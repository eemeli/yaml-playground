{"version":3,"file":"yaml.min.js","sources":["../../browser/dist/nodes/identity.js","../../browser/dist/visit.js","../../browser/dist/doc/directives.js","../../browser/dist/doc/anchors.js","../../browser/dist/doc/applyReviver.js","../../browser/dist/nodes/toJS.js","../../browser/dist/nodes/Node.js","../../browser/dist/nodes/Alias.js","../../browser/dist/nodes/Scalar.js","../../browser/dist/doc/createNode.js","../../browser/dist/nodes/Collection.js","../../browser/dist/stringify/stringifyComment.js","../../browser/dist/stringify/foldFlowLines.js","../../browser/dist/stringify/stringifyString.js","../../browser/dist/stringify/stringify.js","../../browser/dist/log.js","../../browser/dist/nodes/addPairToJSMap.js","../../browser/dist/nodes/Pair.js","../../browser/dist/stringify/stringifyPair.js","../../browser/dist/stringify/stringifyCollection.js","../../browser/dist/nodes/YAMLMap.js","../../browser/dist/schema/common/map.js","../../browser/dist/nodes/YAMLSeq.js","../../browser/dist/schema/common/seq.js","../../browser/dist/schema/common/string.js","../../browser/dist/schema/common/null.js","../../browser/dist/schema/core/bool.js","../../browser/dist/stringify/stringifyNumber.js","../../browser/dist/schema/core/float.js","../../browser/dist/schema/core/int.js","../../browser/dist/schema/core/schema.js","../../browser/dist/schema/json/schema.js","../../browser/dist/schema/yaml-1.1/binary.js","../../browser/dist/schema/yaml-1.1/pairs.js","../../browser/dist/schema/yaml-1.1/omap.js","../../browser/dist/schema/yaml-1.1/bool.js","../../browser/dist/schema/yaml-1.1/float.js","../../browser/dist/schema/yaml-1.1/int.js","../../browser/dist/schema/yaml-1.1/set.js","../../browser/dist/schema/yaml-1.1/timestamp.js","../../browser/dist/schema/yaml-1.1/schema.js","../../browser/dist/schema/tags.js","../../browser/dist/schema/Schema.js","../../browser/dist/doc/Document.js","../../browser/dist/stringify/stringifyDocument.js","../../browser/dist/errors.js","../../browser/dist/compose/resolve-props.js","../../browser/dist/compose/util-contains-newline.js","../../browser/dist/compose/util-flow-indent-check.js","../../browser/dist/compose/util-map-includes.js","../../browser/dist/compose/resolve-block-map.js","../../browser/dist/compose/resolve-end.js","../../browser/dist/compose/resolve-flow-collection.js","../../browser/dist/compose/compose-collection.js","../../browser/dist/compose/resolve-block-seq.js","../../browser/dist/compose/resolve-block-scalar.js","../../browser/dist/compose/resolve-flow-scalar.js","../../browser/dist/compose/compose-scalar.js","../../browser/dist/compose/util-empty-scalar-position.js","../../browser/dist/compose/compose-node.js","../../browser/dist/compose/composer.js","../../browser/dist/compose/compose-doc.js","../../browser/dist/parse/cst-scalar.js","../../browser/dist/parse/cst-stringify.js","../../browser/dist/parse/cst-visit.js","../../browser/dist/parse/cst.js","../../browser/dist/parse/lexer.js","../../browser/dist/parse/line-counter.js","../../browser/dist/parse/parser.js","../../browser/dist/public-api.js"],"sourcesContent":["const ALIAS = Symbol.for('yaml.alias');\nconst DOC = Symbol.for('yaml.document');\nconst MAP = Symbol.for('yaml.map');\nconst PAIR = Symbol.for('yaml.pair');\nconst SCALAR = Symbol.for('yaml.scalar');\nconst SEQ = Symbol.for('yaml.seq');\nconst NODE_TYPE = Symbol.for('yaml.node.type');\nconst isAlias = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === ALIAS;\nconst isDocument = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === DOC;\nconst isMap = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === MAP;\nconst isPair = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === PAIR;\nconst isScalar = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === SCALAR;\nconst isSeq = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === SEQ;\nfunction isCollection(node) {\n    if (node && typeof node === 'object')\n        switch (node[NODE_TYPE]) {\n            case MAP:\n            case SEQ:\n                return true;\n        }\n    return false;\n}\nfunction isNode(node) {\n    if (node && typeof node === 'object')\n        switch (node[NODE_TYPE]) {\n            case ALIAS:\n            case MAP:\n            case SCALAR:\n            case SEQ:\n                return true;\n        }\n    return false;\n}\nconst hasAnchor = (node) => (isScalar(node) || isCollection(node)) && !!node.anchor;\n\nexport { ALIAS, DOC, MAP, NODE_TYPE, PAIR, SCALAR, SEQ, hasAnchor, isAlias, isCollection, isDocument, isMap, isNode, isPair, isScalar, isSeq };\n","import { isDocument, isNode, isPair, isCollection, isMap, isSeq, isScalar, isAlias } from './nodes/identity.js';\n\nconst BREAK = Symbol('break visit');\nconst SKIP = Symbol('skip children');\nconst REMOVE = Symbol('remove node');\n/**\n * Apply a visitor to an AST node or document.\n *\n * Walks through the tree (depth-first) starting from `node`, calling a\n * `visitor` function with three arguments:\n *   - `key`: For sequence values and map `Pair`, the node's index in the\n *     collection. Within a `Pair`, `'key'` or `'value'`, correspondingly.\n *     `null` for the root node.\n *   - `node`: The current node.\n *   - `path`: The ancestry of the current node.\n *\n * The return value of the visitor may be used to control the traversal:\n *   - `undefined` (default): Do nothing and continue\n *   - `visit.SKIP`: Do not visit the children of this node, continue with next\n *     sibling\n *   - `visit.BREAK`: Terminate traversal completely\n *   - `visit.REMOVE`: Remove the current node, then continue with the next one\n *   - `Node`: Replace the current node, then continue by visiting it\n *   - `number`: While iterating the items of a sequence or map, set the index\n *     of the next step. This is useful especially if the index of the current\n *     node has changed.\n *\n * If `visitor` is a single function, it will be called with all values\n * encountered in the tree, including e.g. `null` values. Alternatively,\n * separate visitor functions may be defined for each `Map`, `Pair`, `Seq`,\n * `Alias` and `Scalar` node. To define the same visitor function for more than\n * one node type, use the `Collection` (map and seq), `Value` (map, seq & scalar)\n * and `Node` (alias, map, seq & scalar) targets. Of all these, only the most\n * specific defined one will be used for each node.\n */\nfunction visit(node, visitor) {\n    const visitor_ = initVisitor(visitor);\n    if (isDocument(node)) {\n        const cd = visit_(null, node.contents, visitor_, Object.freeze([node]));\n        if (cd === REMOVE)\n            node.contents = null;\n    }\n    else\n        visit_(null, node, visitor_, Object.freeze([]));\n}\n// Without the `as symbol` casts, TS declares these in the `visit`\n// namespace using `var`, but then complains about that because\n// `unique symbol` must be `const`.\n/** Terminate visit traversal completely */\nvisit.BREAK = BREAK;\n/** Do not visit the children of the current node */\nvisit.SKIP = SKIP;\n/** Remove the current node */\nvisit.REMOVE = REMOVE;\nfunction visit_(key, node, visitor, path) {\n    const ctrl = callVisitor(key, node, visitor, path);\n    if (isNode(ctrl) || isPair(ctrl)) {\n        replaceNode(key, path, ctrl);\n        return visit_(key, ctrl, visitor, path);\n    }\n    if (typeof ctrl !== 'symbol') {\n        if (isCollection(node)) {\n            path = Object.freeze(path.concat(node));\n            for (let i = 0; i < node.items.length; ++i) {\n                const ci = visit_(i, node.items[i], visitor, path);\n                if (typeof ci === 'number')\n                    i = ci - 1;\n                else if (ci === BREAK)\n                    return BREAK;\n                else if (ci === REMOVE) {\n                    node.items.splice(i, 1);\n                    i -= 1;\n                }\n            }\n        }\n        else if (isPair(node)) {\n            path = Object.freeze(path.concat(node));\n            const ck = visit_('key', node.key, visitor, path);\n            if (ck === BREAK)\n                return BREAK;\n            else if (ck === REMOVE)\n                node.key = null;\n            const cv = visit_('value', node.value, visitor, path);\n            if (cv === BREAK)\n                return BREAK;\n            else if (cv === REMOVE)\n                node.value = null;\n        }\n    }\n    return ctrl;\n}\n/**\n * Apply an async visitor to an AST node or document.\n *\n * Walks through the tree (depth-first) starting from `node`, calling a\n * `visitor` function with three arguments:\n *   - `key`: For sequence values and map `Pair`, the node's index in the\n *     collection. Within a `Pair`, `'key'` or `'value'`, correspondingly.\n *     `null` for the root node.\n *   - `node`: The current node.\n *   - `path`: The ancestry of the current node.\n *\n * The return value of the visitor may be used to control the traversal:\n *   - `Promise`: Must resolve to one of the following values\n *   - `undefined` (default): Do nothing and continue\n *   - `visit.SKIP`: Do not visit the children of this node, continue with next\n *     sibling\n *   - `visit.BREAK`: Terminate traversal completely\n *   - `visit.REMOVE`: Remove the current node, then continue with the next one\n *   - `Node`: Replace the current node, then continue by visiting it\n *   - `number`: While iterating the items of a sequence or map, set the index\n *     of the next step. This is useful especially if the index of the current\n *     node has changed.\n *\n * If `visitor` is a single function, it will be called with all values\n * encountered in the tree, including e.g. `null` values. Alternatively,\n * separate visitor functions may be defined for each `Map`, `Pair`, `Seq`,\n * `Alias` and `Scalar` node. To define the same visitor function for more than\n * one node type, use the `Collection` (map and seq), `Value` (map, seq & scalar)\n * and `Node` (alias, map, seq & scalar) targets. Of all these, only the most\n * specific defined one will be used for each node.\n */\nasync function visitAsync(node, visitor) {\n    const visitor_ = initVisitor(visitor);\n    if (isDocument(node)) {\n        const cd = await visitAsync_(null, node.contents, visitor_, Object.freeze([node]));\n        if (cd === REMOVE)\n            node.contents = null;\n    }\n    else\n        await visitAsync_(null, node, visitor_, Object.freeze([]));\n}\n// Without the `as symbol` casts, TS declares these in the `visit`\n// namespace using `var`, but then complains about that because\n// `unique symbol` must be `const`.\n/** Terminate visit traversal completely */\nvisitAsync.BREAK = BREAK;\n/** Do not visit the children of the current node */\nvisitAsync.SKIP = SKIP;\n/** Remove the current node */\nvisitAsync.REMOVE = REMOVE;\nasync function visitAsync_(key, node, visitor, path) {\n    const ctrl = await callVisitor(key, node, visitor, path);\n    if (isNode(ctrl) || isPair(ctrl)) {\n        replaceNode(key, path, ctrl);\n        return visitAsync_(key, ctrl, visitor, path);\n    }\n    if (typeof ctrl !== 'symbol') {\n        if (isCollection(node)) {\n            path = Object.freeze(path.concat(node));\n            for (let i = 0; i < node.items.length; ++i) {\n                const ci = await visitAsync_(i, node.items[i], visitor, path);\n                if (typeof ci === 'number')\n                    i = ci - 1;\n                else if (ci === BREAK)\n                    return BREAK;\n                else if (ci === REMOVE) {\n                    node.items.splice(i, 1);\n                    i -= 1;\n                }\n            }\n        }\n        else if (isPair(node)) {\n            path = Object.freeze(path.concat(node));\n            const ck = await visitAsync_('key', node.key, visitor, path);\n            if (ck === BREAK)\n                return BREAK;\n            else if (ck === REMOVE)\n                node.key = null;\n            const cv = await visitAsync_('value', node.value, visitor, path);\n            if (cv === BREAK)\n                return BREAK;\n            else if (cv === REMOVE)\n                node.value = null;\n        }\n    }\n    return ctrl;\n}\nfunction initVisitor(visitor) {\n    if (typeof visitor === 'object' &&\n        (visitor.Collection || visitor.Node || visitor.Value)) {\n        return Object.assign({\n            Alias: visitor.Node,\n            Map: visitor.Node,\n            Scalar: visitor.Node,\n            Seq: visitor.Node\n        }, visitor.Value && {\n            Map: visitor.Value,\n            Scalar: visitor.Value,\n            Seq: visitor.Value\n        }, visitor.Collection && {\n            Map: visitor.Collection,\n            Seq: visitor.Collection\n        }, visitor);\n    }\n    return visitor;\n}\nfunction callVisitor(key, node, visitor, path) {\n    if (typeof visitor === 'function')\n        return visitor(key, node, path);\n    if (isMap(node))\n        return visitor.Map?.(key, node, path);\n    if (isSeq(node))\n        return visitor.Seq?.(key, node, path);\n    if (isPair(node))\n        return visitor.Pair?.(key, node, path);\n    if (isScalar(node))\n        return visitor.Scalar?.(key, node, path);\n    if (isAlias(node))\n        return visitor.Alias?.(key, node, path);\n    return undefined;\n}\nfunction replaceNode(key, path, node) {\n    const parent = path[path.length - 1];\n    if (isCollection(parent)) {\n        parent.items[key] = node;\n    }\n    else if (isPair(parent)) {\n        if (key === 'key')\n            parent.key = node;\n        else\n            parent.value = node;\n    }\n    else if (isDocument(parent)) {\n        parent.contents = node;\n    }\n    else {\n        const pt = isAlias(parent) ? 'alias' : 'scalar';\n        throw new Error(`Cannot replace node with ${pt} parent`);\n    }\n}\n\nexport { visit, visitAsync };\n","import { isNode } from '../nodes/identity.js';\nimport { visit } from '../visit.js';\n\nconst escapeChars = {\n    '!': '%21',\n    ',': '%2C',\n    '[': '%5B',\n    ']': '%5D',\n    '{': '%7B',\n    '}': '%7D'\n};\nconst escapeTagName = (tn) => tn.replace(/[!,[\\]{}]/g, ch => escapeChars[ch]);\nclass Directives {\n    constructor(yaml, tags) {\n        /**\n         * The directives-end/doc-start marker `---`. If `null`, a marker may still be\n         * included in the document's stringified representation.\n         */\n        this.docStart = null;\n        /** The doc-end marker `...`.  */\n        this.docEnd = false;\n        this.yaml = Object.assign({}, Directives.defaultYaml, yaml);\n        this.tags = Object.assign({}, Directives.defaultTags, tags);\n    }\n    clone() {\n        const copy = new Directives(this.yaml, this.tags);\n        copy.docStart = this.docStart;\n        return copy;\n    }\n    /**\n     * During parsing, get a Directives instance for the current document and\n     * update the stream state according to the current version's spec.\n     */\n    atDocument() {\n        const res = new Directives(this.yaml, this.tags);\n        switch (this.yaml.version) {\n            case '1.1':\n                this.atNextDocument = true;\n                break;\n            case '1.2':\n                this.atNextDocument = false;\n                this.yaml = {\n                    explicit: Directives.defaultYaml.explicit,\n                    version: '1.2'\n                };\n                this.tags = Object.assign({}, Directives.defaultTags);\n                break;\n        }\n        return res;\n    }\n    /**\n     * @param onError - May be called even if the action was successful\n     * @returns `true` on success\n     */\n    add(line, onError) {\n        if (this.atNextDocument) {\n            this.yaml = { explicit: Directives.defaultYaml.explicit, version: '1.1' };\n            this.tags = Object.assign({}, Directives.defaultTags);\n            this.atNextDocument = false;\n        }\n        const parts = line.trim().split(/[ \\t]+/);\n        const name = parts.shift();\n        switch (name) {\n            case '%TAG': {\n                if (parts.length !== 2) {\n                    onError(0, '%TAG directive should contain exactly two parts');\n                    if (parts.length < 2)\n                        return false;\n                }\n                const [handle, prefix] = parts;\n                this.tags[handle] = prefix;\n                return true;\n            }\n            case '%YAML': {\n                this.yaml.explicit = true;\n                if (parts.length !== 1) {\n                    onError(0, '%YAML directive should contain exactly one part');\n                    return false;\n                }\n                const [version] = parts;\n                if (version === '1.1' || version === '1.2') {\n                    this.yaml.version = version;\n                    return true;\n                }\n                else {\n                    const isValid = /^\\d+\\.\\d+$/.test(version);\n                    onError(6, `Unsupported YAML version ${version}`, isValid);\n                    return false;\n                }\n            }\n            default:\n                onError(0, `Unknown directive ${name}`, true);\n                return false;\n        }\n    }\n    /**\n     * Resolves a tag, matching handles to those defined in %TAG directives.\n     *\n     * @returns Resolved tag, which may also be the non-specific tag `'!'` or a\n     *   `'!local'` tag, or `null` if unresolvable.\n     */\n    tagName(source, onError) {\n        if (source === '!')\n            return '!'; // non-specific tag\n        if (source[0] !== '!') {\n            onError(`Not a valid tag: ${source}`);\n            return null;\n        }\n        if (source[1] === '<') {\n            const verbatim = source.slice(2, -1);\n            if (verbatim === '!' || verbatim === '!!') {\n                onError(`Verbatim tags aren't resolved, so ${source} is invalid.`);\n                return null;\n            }\n            if (source[source.length - 1] !== '>')\n                onError('Verbatim tags must end with a >');\n            return verbatim;\n        }\n        const [, handle, suffix] = source.match(/^(.*!)([^!]*)$/s);\n        if (!suffix)\n            onError(`The ${source} tag has no suffix`);\n        const prefix = this.tags[handle];\n        if (prefix) {\n            try {\n                return prefix + decodeURIComponent(suffix);\n            }\n            catch (error) {\n                onError(String(error));\n                return null;\n            }\n        }\n        if (handle === '!')\n            return source; // local tag\n        onError(`Could not resolve tag: ${source}`);\n        return null;\n    }\n    /**\n     * Given a fully resolved tag, returns its printable string form,\n     * taking into account current tag prefixes and defaults.\n     */\n    tagString(tag) {\n        for (const [handle, prefix] of Object.entries(this.tags)) {\n            if (tag.startsWith(prefix))\n                return handle + escapeTagName(tag.substring(prefix.length));\n        }\n        return tag[0] === '!' ? tag : `!<${tag}>`;\n    }\n    toString(doc) {\n        const lines = this.yaml.explicit\n            ? [`%YAML ${this.yaml.version || '1.2'}`]\n            : [];\n        const tagEntries = Object.entries(this.tags);\n        let tagNames;\n        if (doc && tagEntries.length > 0 && isNode(doc.contents)) {\n            const tags = {};\n            visit(doc.contents, (_key, node) => {\n                if (isNode(node) && node.tag)\n                    tags[node.tag] = true;\n            });\n            tagNames = Object.keys(tags);\n        }\n        else\n            tagNames = [];\n        for (const [handle, prefix] of tagEntries) {\n            if (handle === '!!' && prefix === 'tag:yaml.org,2002:')\n                continue;\n            if (!doc || tagNames.some(tn => tn.startsWith(prefix)))\n                lines.push(`%TAG ${handle} ${prefix}`);\n        }\n        return lines.join('\\n');\n    }\n}\nDirectives.defaultYaml = { explicit: false, version: '1.2' };\nDirectives.defaultTags = { '!!': 'tag:yaml.org,2002:' };\n\nexport { Directives };\n","import { isScalar, isCollection } from '../nodes/identity.js';\nimport { visit } from '../visit.js';\n\n/**\n * Verify that the input string is a valid anchor.\n *\n * Will throw on errors.\n */\nfunction anchorIsValid(anchor) {\n    if (/[\\x00-\\x19\\s,[\\]{}]/.test(anchor)) {\n        const sa = JSON.stringify(anchor);\n        const msg = `Anchor must not contain whitespace or control characters: ${sa}`;\n        throw new Error(msg);\n    }\n    return true;\n}\nfunction anchorNames(root) {\n    const anchors = new Set();\n    visit(root, {\n        Value(_key, node) {\n            if (node.anchor)\n                anchors.add(node.anchor);\n        }\n    });\n    return anchors;\n}\n/** Find a new anchor name with the given `prefix` and a one-indexed suffix. */\nfunction findNewAnchor(prefix, exclude) {\n    for (let i = 1; true; ++i) {\n        const name = `${prefix}${i}`;\n        if (!exclude.has(name))\n            return name;\n    }\n}\nfunction createNodeAnchors(doc, prefix) {\n    const aliasObjects = [];\n    const sourceObjects = new Map();\n    let prevAnchors = null;\n    return {\n        onAnchor: (source) => {\n            aliasObjects.push(source);\n            if (!prevAnchors)\n                prevAnchors = anchorNames(doc);\n            const anchor = findNewAnchor(prefix, prevAnchors);\n            prevAnchors.add(anchor);\n            return anchor;\n        },\n        /**\n         * With circular references, the source node is only resolved after all\n         * of its child nodes are. This is why anchors are set only after all of\n         * the nodes have been created.\n         */\n        setAnchors: () => {\n            for (const source of aliasObjects) {\n                const ref = sourceObjects.get(source);\n                if (typeof ref === 'object' &&\n                    ref.anchor &&\n                    (isScalar(ref.node) || isCollection(ref.node))) {\n                    ref.node.anchor = ref.anchor;\n                }\n                else {\n                    const error = new Error('Failed to resolve repeated object (this should not happen)');\n                    error.source = source;\n                    throw error;\n                }\n            }\n        },\n        sourceObjects\n    };\n}\n\nexport { anchorIsValid, anchorNames, createNodeAnchors, findNewAnchor };\n","/**\n * Applies the JSON.parse reviver algorithm as defined in the ECMA-262 spec,\n * in section 24.5.1.1 \"Runtime Semantics: InternalizeJSONProperty\" of the\n * 2021 edition: https://tc39.es/ecma262/#sec-json.parse\n *\n * Includes extensions for handling Map and Set objects.\n */\nfunction applyReviver(reviver, obj, key, val) {\n    if (val && typeof val === 'object') {\n        if (Array.isArray(val)) {\n            for (let i = 0, len = val.length; i < len; ++i) {\n                const v0 = val[i];\n                const v1 = applyReviver(reviver, val, String(i), v0);\n                if (v1 === undefined)\n                    delete val[i];\n                else if (v1 !== v0)\n                    val[i] = v1;\n            }\n        }\n        else if (val instanceof Map) {\n            for (const k of Array.from(val.keys())) {\n                const v0 = val.get(k);\n                const v1 = applyReviver(reviver, val, k, v0);\n                if (v1 === undefined)\n                    val.delete(k);\n                else if (v1 !== v0)\n                    val.set(k, v1);\n            }\n        }\n        else if (val instanceof Set) {\n            for (const v0 of Array.from(val)) {\n                const v1 = applyReviver(reviver, val, v0, v0);\n                if (v1 === undefined)\n                    val.delete(v0);\n                else if (v1 !== v0) {\n                    val.delete(v0);\n                    val.add(v1);\n                }\n            }\n        }\n        else {\n            for (const [k, v0] of Object.entries(val)) {\n                const v1 = applyReviver(reviver, val, k, v0);\n                if (v1 === undefined)\n                    delete val[k];\n                else if (v1 !== v0)\n                    val[k] = v1;\n            }\n        }\n    }\n    return reviver.call(obj, key, val);\n}\n\nexport { applyReviver };\n","import { hasAnchor } from './identity.js';\n\n/**\n * Recursively convert any node or its contents to native JavaScript\n *\n * @param value - The input value\n * @param arg - If `value` defines a `toJSON()` method, use this\n *   as its first argument\n * @param ctx - Conversion context, originally set in Document#toJS(). If\n *   `{ keep: true }` is not set, output should be suitable for JSON\n *   stringification.\n */\nfunction toJS(value, arg, ctx) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    if (Array.isArray(value))\n        return value.map((v, i) => toJS(v, String(i), ctx));\n    if (value && typeof value.toJSON === 'function') {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n        if (!ctx || !hasAnchor(value))\n            return value.toJSON(arg, ctx);\n        const data = { aliasCount: 0, count: 1, res: undefined };\n        ctx.anchors.set(value, data);\n        ctx.onCreate = res => {\n            data.res = res;\n            delete ctx.onCreate;\n        };\n        const res = value.toJSON(arg, ctx);\n        if (ctx.onCreate)\n            ctx.onCreate(res);\n        return res;\n    }\n    if (typeof value === 'bigint' && !ctx?.keep)\n        return Number(value);\n    return value;\n}\n\nexport { toJS };\n","import { applyReviver } from '../doc/applyReviver.js';\nimport { NODE_TYPE, isDocument } from './identity.js';\nimport { toJS } from './toJS.js';\n\nclass NodeBase {\n    constructor(type) {\n        Object.defineProperty(this, NODE_TYPE, { value: type });\n    }\n    /** Create a copy of this node.  */\n    clone() {\n        const copy = Object.create(Object.getPrototypeOf(this), Object.getOwnPropertyDescriptors(this));\n        if (this.range)\n            copy.range = this.range.slice();\n        return copy;\n    }\n    /** A plain JavaScript representation of this node. */\n    toJS(doc, { mapAsMap, maxAliasCount, onAnchor, reviver } = {}) {\n        if (!isDocument(doc))\n            throw new TypeError('A document argument is required');\n        const ctx = {\n            anchors: new Map(),\n            doc,\n            keep: true,\n            mapAsMap: mapAsMap === true,\n            mapKeyWarned: false,\n            maxAliasCount: typeof maxAliasCount === 'number' ? maxAliasCount : 100\n        };\n        const res = toJS(this, '', ctx);\n        if (typeof onAnchor === 'function')\n            for (const { count, res } of ctx.anchors.values())\n                onAnchor(res, count);\n        return typeof reviver === 'function'\n            ? applyReviver(reviver, { '': res }, '', res)\n            : res;\n    }\n}\n\nexport { NodeBase };\n","import { anchorIsValid } from '../doc/anchors.js';\nimport { visit } from '../visit.js';\nimport { ALIAS, isAlias, isCollection, isPair } from './identity.js';\nimport { NodeBase } from './Node.js';\nimport { toJS } from './toJS.js';\n\nclass Alias extends NodeBase {\n    constructor(source) {\n        super(ALIAS);\n        this.source = source;\n        Object.defineProperty(this, 'tag', {\n            set() {\n                throw new Error('Alias nodes cannot have tags');\n            }\n        });\n    }\n    /**\n     * Resolve the value of this alias within `doc`, finding the last\n     * instance of the `source` anchor before this node.\n     */\n    resolve(doc) {\n        let found = undefined;\n        visit(doc, {\n            Node: (_key, node) => {\n                if (node === this)\n                    return visit.BREAK;\n                if (node.anchor === this.source)\n                    found = node;\n            }\n        });\n        return found;\n    }\n    toJSON(_arg, ctx) {\n        if (!ctx)\n            return { source: this.source };\n        const { anchors, doc, maxAliasCount } = ctx;\n        const source = this.resolve(doc);\n        if (!source) {\n            const msg = `Unresolved alias (the anchor must be set before the alias): ${this.source}`;\n            throw new ReferenceError(msg);\n        }\n        let data = anchors.get(source);\n        if (!data) {\n            // Resolve anchors for Node.prototype.toJS()\n            toJS(source, null, ctx);\n            data = anchors.get(source);\n        }\n        /* istanbul ignore if */\n        if (!data || data.res === undefined) {\n            const msg = 'This should not happen: Alias anchor was not resolved?';\n            throw new ReferenceError(msg);\n        }\n        if (maxAliasCount >= 0) {\n            data.count += 1;\n            if (data.aliasCount === 0)\n                data.aliasCount = getAliasCount(doc, source, anchors);\n            if (data.count * data.aliasCount > maxAliasCount) {\n                const msg = 'Excessive alias count indicates a resource exhaustion attack';\n                throw new ReferenceError(msg);\n            }\n        }\n        return data.res;\n    }\n    toString(ctx, _onComment, _onChompKeep) {\n        const src = `*${this.source}`;\n        if (ctx) {\n            anchorIsValid(this.source);\n            if (ctx.options.verifyAliasOrder && !ctx.anchors.has(this.source)) {\n                const msg = `Unresolved alias (the anchor must be set before the alias): ${this.source}`;\n                throw new Error(msg);\n            }\n            if (ctx.implicitKey)\n                return `${src} `;\n        }\n        return src;\n    }\n}\nfunction getAliasCount(doc, node, anchors) {\n    if (isAlias(node)) {\n        const source = node.resolve(doc);\n        const anchor = anchors && source && anchors.get(source);\n        return anchor ? anchor.count * anchor.aliasCount : 0;\n    }\n    else if (isCollection(node)) {\n        let count = 0;\n        for (const item of node.items) {\n            const c = getAliasCount(doc, item, anchors);\n            if (c > count)\n                count = c;\n        }\n        return count;\n    }\n    else if (isPair(node)) {\n        const kc = getAliasCount(doc, node.key, anchors);\n        const vc = getAliasCount(doc, node.value, anchors);\n        return Math.max(kc, vc);\n    }\n    return 1;\n}\n\nexport { Alias };\n","import { SCALAR } from './identity.js';\nimport { NodeBase } from './Node.js';\nimport { toJS } from './toJS.js';\n\nconst isScalarValue = (value) => !value || (typeof value !== 'function' && typeof value !== 'object');\nclass Scalar extends NodeBase {\n    constructor(value) {\n        super(SCALAR);\n        this.value = value;\n    }\n    toJSON(arg, ctx) {\n        return ctx?.keep ? this.value : toJS(this.value, arg, ctx);\n    }\n    toString() {\n        return String(this.value);\n    }\n}\nScalar.BLOCK_FOLDED = 'BLOCK_FOLDED';\nScalar.BLOCK_LITERAL = 'BLOCK_LITERAL';\nScalar.PLAIN = 'PLAIN';\nScalar.QUOTE_DOUBLE = 'QUOTE_DOUBLE';\nScalar.QUOTE_SINGLE = 'QUOTE_SINGLE';\n\nexport { Scalar, isScalarValue };\n","import { Alias } from '../nodes/Alias.js';\nimport { isNode, isPair, MAP, SEQ, isDocument } from '../nodes/identity.js';\nimport { Scalar } from '../nodes/Scalar.js';\n\nconst defaultTagPrefix = 'tag:yaml.org,2002:';\nfunction findTagObject(value, tagName, tags) {\n    if (tagName) {\n        const match = tags.filter(t => t.tag === tagName);\n        const tagObj = match.find(t => !t.format) ?? match[0];\n        if (!tagObj)\n            throw new Error(`Tag ${tagName} not found`);\n        return tagObj;\n    }\n    return tags.find(t => t.identify?.(value) && !t.format);\n}\nfunction createNode(value, tagName, ctx) {\n    if (isDocument(value))\n        value = value.contents;\n    if (isNode(value))\n        return value;\n    if (isPair(value)) {\n        const map = ctx.schema[MAP].createNode?.(ctx.schema, null, ctx);\n        map.items.push(value);\n        return map;\n    }\n    if (value instanceof String ||\n        value instanceof Number ||\n        value instanceof Boolean ||\n        (typeof BigInt !== 'undefined' && value instanceof BigInt) // not supported everywhere\n    ) {\n        // https://tc39.es/ecma262/#sec-serializejsonproperty\n        value = value.valueOf();\n    }\n    const { aliasDuplicateObjects, onAnchor, onTagObj, schema, sourceObjects } = ctx;\n    // Detect duplicate references to the same object & use Alias nodes for all\n    // after first. The `ref` wrapper allows for circular references to resolve.\n    let ref = undefined;\n    if (aliasDuplicateObjects && value && typeof value === 'object') {\n        ref = sourceObjects.get(value);\n        if (ref) {\n            if (!ref.anchor)\n                ref.anchor = onAnchor(value);\n            return new Alias(ref.anchor);\n        }\n        else {\n            ref = { anchor: null, node: null };\n            sourceObjects.set(value, ref);\n        }\n    }\n    if (tagName?.startsWith('!!'))\n        tagName = defaultTagPrefix + tagName.slice(2);\n    let tagObj = findTagObject(value, tagName, schema.tags);\n    if (!tagObj) {\n        if (value && typeof value.toJSON === 'function') {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n            value = value.toJSON();\n        }\n        if (!value || typeof value !== 'object') {\n            const node = new Scalar(value);\n            if (ref)\n                ref.node = node;\n            return node;\n        }\n        tagObj =\n            value instanceof Map\n                ? schema[MAP]\n                : Symbol.iterator in Object(value)\n                    ? schema[SEQ]\n                    : schema[MAP];\n    }\n    if (onTagObj) {\n        onTagObj(tagObj);\n        delete ctx.onTagObj;\n    }\n    const node = tagObj?.createNode\n        ? tagObj.createNode(ctx.schema, value, ctx)\n        : typeof tagObj?.nodeClass?.from === 'function'\n            ? tagObj.nodeClass.from(ctx.schema, value, ctx)\n            : new Scalar(value);\n    if (tagName)\n        node.tag = tagName;\n    else if (!tagObj.default)\n        node.tag = tagObj.tag;\n    if (ref)\n        ref.node = node;\n    return node;\n}\n\nexport { createNode };\n","import { createNode } from '../doc/createNode.js';\nimport { isNode, isPair, isCollection, isScalar } from './identity.js';\nimport { NodeBase } from './Node.js';\n\nfunction collectionFromPath(schema, path, value) {\n    let v = value;\n    for (let i = path.length - 1; i >= 0; --i) {\n        const k = path[i];\n        if (typeof k === 'number' && Number.isInteger(k) && k >= 0) {\n            const a = [];\n            a[k] = v;\n            v = a;\n        }\n        else {\n            v = new Map([[k, v]]);\n        }\n    }\n    return createNode(v, undefined, {\n        aliasDuplicateObjects: false,\n        keepUndefined: false,\n        onAnchor: () => {\n            throw new Error('This should not happen, please report a bug.');\n        },\n        schema,\n        sourceObjects: new Map()\n    });\n}\n// Type guard is intentionally a little wrong so as to be more useful,\n// as it does not cover untypable empty non-string iterables (e.g. []).\nconst isEmptyPath = (path) => path == null ||\n    (typeof path === 'object' && !!path[Symbol.iterator]().next().done);\nclass Collection extends NodeBase {\n    constructor(type, schema) {\n        super(type);\n        Object.defineProperty(this, 'schema', {\n            value: schema,\n            configurable: true,\n            enumerable: false,\n            writable: true\n        });\n    }\n    /**\n     * Create a copy of this collection.\n     *\n     * @param schema - If defined, overwrites the original's schema\n     */\n    clone(schema) {\n        const copy = Object.create(Object.getPrototypeOf(this), Object.getOwnPropertyDescriptors(this));\n        if (schema)\n            copy.schema = schema;\n        copy.items = copy.items.map(it => isNode(it) || isPair(it) ? it.clone(schema) : it);\n        if (this.range)\n            copy.range = this.range.slice();\n        return copy;\n    }\n    /**\n     * Adds a value to the collection. For `!!map` and `!!omap` the value must\n     * be a Pair instance or a `{ key, value }` object, which may not have a key\n     * that already exists in the map.\n     */\n    addIn(path, value) {\n        if (isEmptyPath(path))\n            this.add(value);\n        else {\n            const [key, ...rest] = path;\n            const node = this.get(key, true);\n            if (isCollection(node))\n                node.addIn(rest, value);\n            else if (node === undefined && this.schema)\n                this.set(key, collectionFromPath(this.schema, rest, value));\n            else\n                throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`);\n        }\n    }\n    /**\n     * Removes a value from the collection.\n     * @returns `true` if the item was found and removed.\n     */\n    deleteIn(path) {\n        const [key, ...rest] = path;\n        if (rest.length === 0)\n            return this.delete(key);\n        const node = this.get(key, true);\n        if (isCollection(node))\n            return node.deleteIn(rest);\n        else\n            throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`);\n    }\n    /**\n     * Returns item at `key`, or `undefined` if not found. By default unwraps\n     * scalar values from their surrounding node; to disable set `keepScalar` to\n     * `true` (collections are always returned intact).\n     */\n    getIn(path, keepScalar) {\n        const [key, ...rest] = path;\n        const node = this.get(key, true);\n        if (rest.length === 0)\n            return !keepScalar && isScalar(node) ? node.value : node;\n        else\n            return isCollection(node) ? node.getIn(rest, keepScalar) : undefined;\n    }\n    hasAllNullValues(allowScalar) {\n        return this.items.every(node => {\n            if (!isPair(node))\n                return false;\n            const n = node.value;\n            return (n == null ||\n                (allowScalar &&\n                    isScalar(n) &&\n                    n.value == null &&\n                    !n.commentBefore &&\n                    !n.comment &&\n                    !n.tag));\n        });\n    }\n    /**\n     * Checks if the collection includes a value with the key `key`.\n     */\n    hasIn(path) {\n        const [key, ...rest] = path;\n        if (rest.length === 0)\n            return this.has(key);\n        const node = this.get(key, true);\n        return isCollection(node) ? node.hasIn(rest) : false;\n    }\n    /**\n     * Sets a value in this collection. For `!!set`, `value` needs to be a\n     * boolean to add/remove the item from the set.\n     */\n    setIn(path, value) {\n        const [key, ...rest] = path;\n        if (rest.length === 0) {\n            this.set(key, value);\n        }\n        else {\n            const node = this.get(key, true);\n            if (isCollection(node))\n                node.setIn(rest, value);\n            else if (node === undefined && this.schema)\n                this.set(key, collectionFromPath(this.schema, rest, value));\n            else\n                throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`);\n        }\n    }\n}\nCollection.maxFlowStringSingleLineLength = 60;\n\nexport { Collection, collectionFromPath, isEmptyPath };\n","/**\n * Stringifies a comment.\n *\n * Empty comment lines are left empty,\n * lines consisting of a single space are replaced by `#`,\n * and all other lines are prefixed with a `#`.\n */\nconst stringifyComment = (str) => str.replace(/^(?!$)(?: $)?/gm, '#');\nfunction indentComment(comment, indent) {\n    if (/^\\n+$/.test(comment))\n        return comment.substring(1);\n    return indent ? comment.replace(/^(?! *$)/gm, indent) : comment;\n}\nconst lineComment = (str, indent, comment) => str.endsWith('\\n')\n    ? indentComment(comment, indent)\n    : comment.includes('\\n')\n        ? '\\n' + indentComment(comment, indent)\n        : (str.endsWith(' ') ? '' : ' ') + comment;\n\nexport { indentComment, lineComment, stringifyComment };\n","const FOLD_FLOW = 'flow';\nconst FOLD_BLOCK = 'block';\nconst FOLD_QUOTED = 'quoted';\n/**\n * Tries to keep input at up to `lineWidth` characters, splitting only on spaces\n * not followed by newlines or spaces unless `mode` is `'quoted'`. Lines are\n * terminated with `\\n` and started with `indent`.\n */\nfunction foldFlowLines(text, indent, mode = 'flow', { indentAtStart, lineWidth = 80, minContentWidth = 20, onFold, onOverflow } = {}) {\n    if (!lineWidth || lineWidth < 0)\n        return text;\n    const endStep = Math.max(1 + minContentWidth, 1 + lineWidth - indent.length);\n    if (text.length <= endStep)\n        return text;\n    const folds = [];\n    const escapedFolds = {};\n    let end = lineWidth - indent.length;\n    if (typeof indentAtStart === 'number') {\n        if (indentAtStart > lineWidth - Math.max(2, minContentWidth))\n            folds.push(0);\n        else\n            end = lineWidth - indentAtStart;\n    }\n    let split = undefined;\n    let prev = undefined;\n    let overflow = false;\n    let i = -1;\n    let escStart = -1;\n    let escEnd = -1;\n    if (mode === FOLD_BLOCK) {\n        i = consumeMoreIndentedLines(text, i);\n        if (i !== -1)\n            end = i + endStep;\n    }\n    for (let ch; (ch = text[(i += 1)]);) {\n        if (mode === FOLD_QUOTED && ch === '\\\\') {\n            escStart = i;\n            switch (text[i + 1]) {\n                case 'x':\n                    i += 3;\n                    break;\n                case 'u':\n                    i += 5;\n                    break;\n                case 'U':\n                    i += 9;\n                    break;\n                default:\n                    i += 1;\n            }\n            escEnd = i;\n        }\n        if (ch === '\\n') {\n            if (mode === FOLD_BLOCK)\n                i = consumeMoreIndentedLines(text, i);\n            end = i + endStep;\n            split = undefined;\n        }\n        else {\n            if (ch === ' ' &&\n                prev &&\n                prev !== ' ' &&\n                prev !== '\\n' &&\n                prev !== '\\t') {\n                // space surrounded by non-space can be replaced with newline + indent\n                const next = text[i + 1];\n                if (next && next !== ' ' && next !== '\\n' && next !== '\\t')\n                    split = i;\n            }\n            if (i >= end) {\n                if (split) {\n                    folds.push(split);\n                    end = split + endStep;\n                    split = undefined;\n                }\n                else if (mode === FOLD_QUOTED) {\n                    // white-space collected at end may stretch past lineWidth\n                    while (prev === ' ' || prev === '\\t') {\n                        prev = ch;\n                        ch = text[(i += 1)];\n                        overflow = true;\n                    }\n                    // Account for newline escape, but don't break preceding escape\n                    const j = i > escEnd + 1 ? i - 2 : escStart - 1;\n                    // Bail out if lineWidth & minContentWidth are shorter than an escape string\n                    if (escapedFolds[j])\n                        return text;\n                    folds.push(j);\n                    escapedFolds[j] = true;\n                    end = j + endStep;\n                    split = undefined;\n                }\n                else {\n                    overflow = true;\n                }\n            }\n        }\n        prev = ch;\n    }\n    if (overflow && onOverflow)\n        onOverflow();\n    if (folds.length === 0)\n        return text;\n    if (onFold)\n        onFold();\n    let res = text.slice(0, folds[0]);\n    for (let i = 0; i < folds.length; ++i) {\n        const fold = folds[i];\n        const end = folds[i + 1] || text.length;\n        if (fold === 0)\n            res = `\\n${indent}${text.slice(0, end)}`;\n        else {\n            if (mode === FOLD_QUOTED && escapedFolds[fold])\n                res += `${text[fold]}\\\\`;\n            res += `\\n${indent}${text.slice(fold + 1, end)}`;\n        }\n    }\n    return res;\n}\n/**\n * Presumes `i + 1` is at the start of a line\n * @returns index of last newline in more-indented block\n */\nfunction consumeMoreIndentedLines(text, i) {\n    let ch = text[i + 1];\n    while (ch === ' ' || ch === '\\t') {\n        do {\n            ch = text[(i += 1)];\n        } while (ch && ch !== '\\n');\n        ch = text[i + 1];\n    }\n    return i;\n}\n\nexport { FOLD_BLOCK, FOLD_FLOW, FOLD_QUOTED, foldFlowLines };\n","import { Scalar } from '../nodes/Scalar.js';\nimport { foldFlowLines, FOLD_QUOTED, FOLD_FLOW, FOLD_BLOCK } from './foldFlowLines.js';\n\nconst getFoldOptions = (ctx, isBlock) => ({\n    indentAtStart: isBlock ? ctx.indent.length : ctx.indentAtStart,\n    lineWidth: ctx.options.lineWidth,\n    minContentWidth: ctx.options.minContentWidth\n});\n// Also checks for lines starting with %, as parsing the output as YAML 1.1 will\n// presume that's starting a new document.\nconst containsDocumentMarker = (str) => /^(%|---|\\.\\.\\.)/m.test(str);\nfunction lineLengthOverLimit(str, lineWidth, indentLength) {\n    if (!lineWidth || lineWidth < 0)\n        return false;\n    const limit = lineWidth - indentLength;\n    const strLen = str.length;\n    if (strLen <= limit)\n        return false;\n    for (let i = 0, start = 0; i < strLen; ++i) {\n        if (str[i] === '\\n') {\n            if (i - start > limit)\n                return true;\n            start = i + 1;\n            if (strLen - start <= limit)\n                return false;\n        }\n    }\n    return true;\n}\nfunction doubleQuotedString(value, ctx) {\n    const json = JSON.stringify(value);\n    if (ctx.options.doubleQuotedAsJSON)\n        return json;\n    const { implicitKey } = ctx;\n    const minMultiLineLength = ctx.options.doubleQuotedMinMultiLineLength;\n    const indent = ctx.indent || (containsDocumentMarker(value) ? '  ' : '');\n    let str = '';\n    let start = 0;\n    for (let i = 0, ch = json[i]; ch; ch = json[++i]) {\n        if (ch === ' ' && json[i + 1] === '\\\\' && json[i + 2] === 'n') {\n            // space before newline needs to be escaped to not be folded\n            str += json.slice(start, i) + '\\\\ ';\n            i += 1;\n            start = i;\n            ch = '\\\\';\n        }\n        if (ch === '\\\\')\n            switch (json[i + 1]) {\n                case 'u':\n                    {\n                        str += json.slice(start, i);\n                        const code = json.substr(i + 2, 4);\n                        switch (code) {\n                            case '0000':\n                                str += '\\\\0';\n                                break;\n                            case '0007':\n                                str += '\\\\a';\n                                break;\n                            case '000b':\n                                str += '\\\\v';\n                                break;\n                            case '001b':\n                                str += '\\\\e';\n                                break;\n                            case '0085':\n                                str += '\\\\N';\n                                break;\n                            case '00a0':\n                                str += '\\\\_';\n                                break;\n                            case '2028':\n                                str += '\\\\L';\n                                break;\n                            case '2029':\n                                str += '\\\\P';\n                                break;\n                            default:\n                                if (code.substr(0, 2) === '00')\n                                    str += '\\\\x' + code.substr(2);\n                                else\n                                    str += json.substr(i, 6);\n                        }\n                        i += 5;\n                        start = i + 1;\n                    }\n                    break;\n                case 'n':\n                    if (implicitKey ||\n                        json[i + 2] === '\"' ||\n                        json.length < minMultiLineLength) {\n                        i += 1;\n                    }\n                    else {\n                        // folding will eat first newline\n                        str += json.slice(start, i) + '\\n\\n';\n                        while (json[i + 2] === '\\\\' &&\n                            json[i + 3] === 'n' &&\n                            json[i + 4] !== '\"') {\n                            str += '\\n';\n                            i += 2;\n                        }\n                        str += indent;\n                        // space after newline needs to be escaped to not be folded\n                        if (json[i + 2] === ' ')\n                            str += '\\\\';\n                        i += 1;\n                        start = i + 1;\n                    }\n                    break;\n                default:\n                    i += 1;\n            }\n    }\n    str = start ? str + json.slice(start) : json;\n    return implicitKey\n        ? str\n        : foldFlowLines(str, indent, FOLD_QUOTED, getFoldOptions(ctx, false));\n}\nfunction singleQuotedString(value, ctx) {\n    if (ctx.options.singleQuote === false ||\n        (ctx.implicitKey && value.includes('\\n')) ||\n        /[ \\t]\\n|\\n[ \\t]/.test(value) // single quoted string can't have leading or trailing whitespace around newline\n    )\n        return doubleQuotedString(value, ctx);\n    const indent = ctx.indent || (containsDocumentMarker(value) ? '  ' : '');\n    const res = \"'\" + value.replace(/'/g, \"''\").replace(/\\n+/g, `$&\\n${indent}`) + \"'\";\n    return ctx.implicitKey\n        ? res\n        : foldFlowLines(res, indent, FOLD_FLOW, getFoldOptions(ctx, false));\n}\nfunction quotedString(value, ctx) {\n    const { singleQuote } = ctx.options;\n    let qs;\n    if (singleQuote === false)\n        qs = doubleQuotedString;\n    else {\n        const hasDouble = value.includes('\"');\n        const hasSingle = value.includes(\"'\");\n        if (hasDouble && !hasSingle)\n            qs = singleQuotedString;\n        else if (hasSingle && !hasDouble)\n            qs = doubleQuotedString;\n        else\n            qs = singleQuote ? singleQuotedString : doubleQuotedString;\n    }\n    return qs(value, ctx);\n}\n// The negative lookbehind avoids a polynomial search,\n// but isn't supported yet on Safari: https://caniuse.com/js-regexp-lookbehind\nlet blockEndNewlines;\ntry {\n    blockEndNewlines = new RegExp('(^|(?<!\\n))\\n+(?!\\n|$)', 'g');\n}\ncatch {\n    blockEndNewlines = /\\n+(?!\\n|$)/g;\n}\nfunction blockString({ comment, type, value }, ctx, onComment, onChompKeep) {\n    const { blockQuote, commentString, lineWidth } = ctx.options;\n    // 1. Block can't end in whitespace unless the last line is non-empty.\n    // 2. Strings consisting of only whitespace are best rendered explicitly.\n    if (!blockQuote || /\\n[\\t ]+$/.test(value) || /^\\s*$/.test(value)) {\n        return quotedString(value, ctx);\n    }\n    const indent = ctx.indent ||\n        (ctx.forceBlockIndent || containsDocumentMarker(value) ? '  ' : '');\n    const literal = blockQuote === 'literal'\n        ? true\n        : blockQuote === 'folded' || type === Scalar.BLOCK_FOLDED\n            ? false\n            : type === Scalar.BLOCK_LITERAL\n                ? true\n                : !lineLengthOverLimit(value, lineWidth, indent.length);\n    if (!value)\n        return literal ? '|\\n' : '>\\n';\n    // determine chomping from whitespace at value end\n    let chomp;\n    let endStart;\n    for (endStart = value.length; endStart > 0; --endStart) {\n        const ch = value[endStart - 1];\n        if (ch !== '\\n' && ch !== '\\t' && ch !== ' ')\n            break;\n    }\n    let end = value.substring(endStart);\n    const endNlPos = end.indexOf('\\n');\n    if (endNlPos === -1) {\n        chomp = '-'; // strip\n    }\n    else if (value === end || endNlPos !== end.length - 1) {\n        chomp = '+'; // keep\n        if (onChompKeep)\n            onChompKeep();\n    }\n    else {\n        chomp = ''; // clip\n    }\n    if (end) {\n        value = value.slice(0, -end.length);\n        if (end[end.length - 1] === '\\n')\n            end = end.slice(0, -1);\n        end = end.replace(blockEndNewlines, `$&${indent}`);\n    }\n    // determine indent indicator from whitespace at value start\n    let startWithSpace = false;\n    let startEnd;\n    let startNlPos = -1;\n    for (startEnd = 0; startEnd < value.length; ++startEnd) {\n        const ch = value[startEnd];\n        if (ch === ' ')\n            startWithSpace = true;\n        else if (ch === '\\n')\n            startNlPos = startEnd;\n        else\n            break;\n    }\n    let start = value.substring(0, startNlPos < startEnd ? startNlPos + 1 : startEnd);\n    if (start) {\n        value = value.substring(start.length);\n        start = start.replace(/\\n+/g, `$&${indent}`);\n    }\n    const indentSize = indent ? '2' : '1'; // root is at -1\n    let header = (literal ? '|' : '>') + (startWithSpace ? indentSize : '') + chomp;\n    if (comment) {\n        header += ' ' + commentString(comment.replace(/ ?[\\r\\n]+/g, ' '));\n        if (onComment)\n            onComment();\n    }\n    if (literal) {\n        value = value.replace(/\\n+/g, `$&${indent}`);\n        return `${header}\\n${indent}${start}${value}${end}`;\n    }\n    value = value\n        .replace(/\\n+/g, '\\n$&')\n        .replace(/(?:^|\\n)([\\t ].*)(?:([\\n\\t ]*)\\n(?![\\n\\t ]))?/g, '$1$2') // more-indented lines aren't folded\n        //                ^ more-ind. ^ empty     ^ capture next empty lines only at end of indent\n        .replace(/\\n+/g, `$&${indent}`);\n    const body = foldFlowLines(`${start}${value}${end}`, indent, FOLD_BLOCK, getFoldOptions(ctx, true));\n    return `${header}\\n${indent}${body}`;\n}\nfunction plainString(item, ctx, onComment, onChompKeep) {\n    const { type, value } = item;\n    const { actualString, implicitKey, indent, indentStep, inFlow } = ctx;\n    if ((implicitKey && value.includes('\\n')) ||\n        (inFlow && /[[\\]{},]/.test(value))) {\n        return quotedString(value, ctx);\n    }\n    if (!value ||\n        /^[\\n\\t ,[\\]{}#&*!|>'\"%@`]|^[?-]$|^[?-][ \\t]|[\\n:][ \\t]|[ \\t]\\n|[\\n\\t ]#|[\\n\\t :]$/.test(value)) {\n        // not allowed:\n        // - empty string, '-' or '?'\n        // - start with an indicator character (except [?:-]) or /[?-] /\n        // - '\\n ', ': ' or ' \\n' anywhere\n        // - '#' not preceded by a non-space char\n        // - end with ' ' or ':'\n        return implicitKey || inFlow || !value.includes('\\n')\n            ? quotedString(value, ctx)\n            : blockString(item, ctx, onComment, onChompKeep);\n    }\n    if (!implicitKey &&\n        !inFlow &&\n        type !== Scalar.PLAIN &&\n        value.includes('\\n')) {\n        // Where allowed & type not set explicitly, prefer block style for multiline strings\n        return blockString(item, ctx, onComment, onChompKeep);\n    }\n    if (containsDocumentMarker(value)) {\n        if (indent === '') {\n            ctx.forceBlockIndent = true;\n            return blockString(item, ctx, onComment, onChompKeep);\n        }\n        else if (implicitKey && indent === indentStep) {\n            return quotedString(value, ctx);\n        }\n    }\n    const str = value.replace(/\\n+/g, `$&\\n${indent}`);\n    // Verify that output will be parsed as a string, as e.g. plain numbers and\n    // booleans get parsed with those types in v1.2 (e.g. '42', 'true' & '0.9e-3'),\n    // and others in v1.1.\n    if (actualString) {\n        const test = (tag) => tag.default && tag.tag !== 'tag:yaml.org,2002:str' && tag.test?.test(str);\n        const { compat, tags } = ctx.doc.schema;\n        if (tags.some(test) || compat?.some(test))\n            return quotedString(value, ctx);\n    }\n    return implicitKey\n        ? str\n        : foldFlowLines(str, indent, FOLD_FLOW, getFoldOptions(ctx, false));\n}\nfunction stringifyString(item, ctx, onComment, onChompKeep) {\n    const { implicitKey, inFlow } = ctx;\n    const ss = typeof item.value === 'string'\n        ? item\n        : Object.assign({}, item, { value: String(item.value) });\n    let { type } = item;\n    if (type !== Scalar.QUOTE_DOUBLE) {\n        // force double quotes on control characters & unpaired surrogates\n        if (/[\\x00-\\x08\\x0b-\\x1f\\x7f-\\x9f\\u{D800}-\\u{DFFF}]/u.test(ss.value))\n            type = Scalar.QUOTE_DOUBLE;\n    }\n    const _stringify = (_type) => {\n        switch (_type) {\n            case Scalar.BLOCK_FOLDED:\n            case Scalar.BLOCK_LITERAL:\n                return implicitKey || inFlow\n                    ? quotedString(ss.value, ctx) // blocks are not valid inside flow containers\n                    : blockString(ss, ctx, onComment, onChompKeep);\n            case Scalar.QUOTE_DOUBLE:\n                return doubleQuotedString(ss.value, ctx);\n            case Scalar.QUOTE_SINGLE:\n                return singleQuotedString(ss.value, ctx);\n            case Scalar.PLAIN:\n                return plainString(ss, ctx, onComment, onChompKeep);\n            default:\n                return null;\n        }\n    };\n    let res = _stringify(type);\n    if (res === null) {\n        const { defaultKeyType, defaultStringType } = ctx.options;\n        const t = (implicitKey && defaultKeyType) || defaultStringType;\n        res = _stringify(t);\n        if (res === null)\n            throw new Error(`Unsupported default string type ${t}`);\n    }\n    return res;\n}\n\nexport { stringifyString };\n","import { anchorIsValid } from '../doc/anchors.js';\nimport { isPair, isAlias, isNode, isScalar, isCollection } from '../nodes/identity.js';\nimport { stringifyComment } from './stringifyComment.js';\nimport { stringifyString } from './stringifyString.js';\n\nfunction createStringifyContext(doc, options) {\n    const opt = Object.assign({\n        blockQuote: true,\n        commentString: stringifyComment,\n        defaultKeyType: null,\n        defaultStringType: 'PLAIN',\n        directives: null,\n        doubleQuotedAsJSON: false,\n        doubleQuotedMinMultiLineLength: 40,\n        falseStr: 'false',\n        flowCollectionPadding: true,\n        indentSeq: true,\n        lineWidth: 80,\n        minContentWidth: 20,\n        nullStr: 'null',\n        simpleKeys: false,\n        singleQuote: null,\n        trueStr: 'true',\n        verifyAliasOrder: true\n    }, doc.schema.toStringOptions, options);\n    let inFlow;\n    switch (opt.collectionStyle) {\n        case 'block':\n            inFlow = false;\n            break;\n        case 'flow':\n            inFlow = true;\n            break;\n        default:\n            inFlow = null;\n    }\n    return {\n        anchors: new Set(),\n        doc,\n        flowCollectionPadding: opt.flowCollectionPadding ? ' ' : '',\n        indent: '',\n        indentStep: typeof opt.indent === 'number' ? ' '.repeat(opt.indent) : '  ',\n        inFlow,\n        options: opt\n    };\n}\nfunction getTagObject(tags, item) {\n    if (item.tag) {\n        const match = tags.filter(t => t.tag === item.tag);\n        if (match.length > 0)\n            return match.find(t => t.format === item.format) ?? match[0];\n    }\n    let tagObj = undefined;\n    let obj;\n    if (isScalar(item)) {\n        obj = item.value;\n        const match = tags.filter(t => t.identify?.(obj));\n        tagObj =\n            match.find(t => t.format === item.format) ?? match.find(t => !t.format);\n    }\n    else {\n        obj = item;\n        tagObj = tags.find(t => t.nodeClass && obj instanceof t.nodeClass);\n    }\n    if (!tagObj) {\n        const name = obj?.constructor?.name ?? typeof obj;\n        throw new Error(`Tag not resolved for ${name} value`);\n    }\n    return tagObj;\n}\n// needs to be called before value stringifier to allow for circular anchor refs\nfunction stringifyProps(node, tagObj, { anchors, doc }) {\n    if (!doc.directives)\n        return '';\n    const props = [];\n    const anchor = (isScalar(node) || isCollection(node)) && node.anchor;\n    if (anchor && anchorIsValid(anchor)) {\n        anchors.add(anchor);\n        props.push(`&${anchor}`);\n    }\n    const tag = node.tag ? node.tag : tagObj.default ? null : tagObj.tag;\n    if (tag)\n        props.push(doc.directives.tagString(tag));\n    return props.join(' ');\n}\nfunction stringify(item, ctx, onComment, onChompKeep) {\n    if (isPair(item))\n        return item.toString(ctx, onComment, onChompKeep);\n    if (isAlias(item)) {\n        if (ctx.doc.directives)\n            return item.toString(ctx);\n        if (ctx.resolvedAliases?.has(item)) {\n            throw new TypeError(`Cannot stringify circular structure without alias nodes`);\n        }\n        else {\n            if (ctx.resolvedAliases)\n                ctx.resolvedAliases.add(item);\n            else\n                ctx.resolvedAliases = new Set([item]);\n            item = item.resolve(ctx.doc);\n        }\n    }\n    let tagObj = undefined;\n    const node = isNode(item)\n        ? item\n        : ctx.doc.createNode(item, { onTagObj: o => (tagObj = o) });\n    if (!tagObj)\n        tagObj = getTagObject(ctx.doc.schema.tags, node);\n    const props = stringifyProps(node, tagObj, ctx);\n    if (props.length > 0)\n        ctx.indentAtStart = (ctx.indentAtStart ?? 0) + props.length + 1;\n    const str = typeof tagObj.stringify === 'function'\n        ? tagObj.stringify(node, ctx, onComment, onChompKeep)\n        : isScalar(node)\n            ? stringifyString(node, ctx, onComment, onChompKeep)\n            : node.toString(ctx, onComment, onChompKeep);\n    if (!props)\n        return str;\n    return isScalar(node) || str[0] === '{' || str[0] === '['\n        ? `${props} ${str}`\n        : `${props}\\n${ctx.indent}${str}`;\n}\n\nexport { createStringifyContext, stringify };\n","function debug(logLevel, ...messages) {\n    if (logLevel === 'debug')\n        console.log(...messages);\n}\nfunction warn(logLevel, warning) {\n    if (logLevel === 'debug' || logLevel === 'warn') {\n        // https://github.com/typescript-eslint/typescript-eslint/issues/7478\n        // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n        if (typeof process !== 'undefined' && process.emitWarning)\n            process.emitWarning(warning);\n        else\n            console.warn(warning);\n    }\n}\n\nexport { debug, warn };\n","import { warn } from '../log.js';\nimport { createStringifyContext } from '../stringify/stringify.js';\nimport { isAlias, isSeq, isScalar, isMap, isNode } from './identity.js';\nimport { Scalar } from './Scalar.js';\nimport { toJS } from './toJS.js';\n\nconst MERGE_KEY = '<<';\nfunction addPairToJSMap(ctx, map, { key, value }) {\n    if (ctx?.doc.schema.merge && isMergeKey(key)) {\n        value = isAlias(value) ? value.resolve(ctx.doc) : value;\n        if (isSeq(value))\n            for (const it of value.items)\n                mergeToJSMap(ctx, map, it);\n        else if (Array.isArray(value))\n            for (const it of value)\n                mergeToJSMap(ctx, map, it);\n        else\n            mergeToJSMap(ctx, map, value);\n    }\n    else {\n        const jsKey = toJS(key, '', ctx);\n        if (map instanceof Map) {\n            map.set(jsKey, toJS(value, jsKey, ctx));\n        }\n        else if (map instanceof Set) {\n            map.add(jsKey);\n        }\n        else {\n            const stringKey = stringifyKey(key, jsKey, ctx);\n            const jsValue = toJS(value, stringKey, ctx);\n            if (stringKey in map)\n                Object.defineProperty(map, stringKey, {\n                    value: jsValue,\n                    writable: true,\n                    enumerable: true,\n                    configurable: true\n                });\n            else\n                map[stringKey] = jsValue;\n        }\n    }\n    return map;\n}\nconst isMergeKey = (key) => key === MERGE_KEY ||\n    (isScalar(key) &&\n        key.value === MERGE_KEY &&\n        (!key.type || key.type === Scalar.PLAIN));\n// If the value associated with a merge key is a single mapping node, each of\n// its key/value pairs is inserted into the current mapping, unless the key\n// already exists in it. If the value associated with the merge key is a\n// sequence, then this sequence is expected to contain mapping nodes and each\n// of these nodes is merged in turn according to its order in the sequence.\n// Keys in mapping nodes earlier in the sequence override keys specified in\n// later mapping nodes. -- http://yaml.org/type/merge.html\nfunction mergeToJSMap(ctx, map, value) {\n    const source = ctx && isAlias(value) ? value.resolve(ctx.doc) : value;\n    if (!isMap(source))\n        throw new Error('Merge sources must be maps or map aliases');\n    const srcMap = source.toJSON(null, ctx, Map);\n    for (const [key, value] of srcMap) {\n        if (map instanceof Map) {\n            if (!map.has(key))\n                map.set(key, value);\n        }\n        else if (map instanceof Set) {\n            map.add(key);\n        }\n        else if (!Object.prototype.hasOwnProperty.call(map, key)) {\n            Object.defineProperty(map, key, {\n                value,\n                writable: true,\n                enumerable: true,\n                configurable: true\n            });\n        }\n    }\n    return map;\n}\nfunction stringifyKey(key, jsKey, ctx) {\n    if (jsKey === null)\n        return '';\n    if (typeof jsKey !== 'object')\n        return String(jsKey);\n    if (isNode(key) && ctx?.doc) {\n        const strCtx = createStringifyContext(ctx.doc, {});\n        strCtx.anchors = new Set();\n        for (const node of ctx.anchors.keys())\n            strCtx.anchors.add(node.anchor);\n        strCtx.inFlow = true;\n        strCtx.inStringifyKey = true;\n        const strKey = key.toString(strCtx);\n        if (!ctx.mapKeyWarned) {\n            let jsonStr = JSON.stringify(strKey);\n            if (jsonStr.length > 40)\n                jsonStr = jsonStr.substring(0, 36) + '...\"';\n            warn(ctx.doc.options.logLevel, `Keys with collection values will be stringified due to JS Object restrictions: ${jsonStr}. Set mapAsMap: true to use object keys.`);\n            ctx.mapKeyWarned = true;\n        }\n        return strKey;\n    }\n    return JSON.stringify(jsKey);\n}\n\nexport { addPairToJSMap };\n","import { createNode } from '../doc/createNode.js';\nimport { stringifyPair } from '../stringify/stringifyPair.js';\nimport { addPairToJSMap } from './addPairToJSMap.js';\nimport { NODE_TYPE, PAIR, isNode } from './identity.js';\n\nfunction createPair(key, value, ctx) {\n    const k = createNode(key, undefined, ctx);\n    const v = createNode(value, undefined, ctx);\n    return new Pair(k, v);\n}\nclass Pair {\n    constructor(key, value = null) {\n        Object.defineProperty(this, NODE_TYPE, { value: PAIR });\n        this.key = key;\n        this.value = value;\n    }\n    clone(schema) {\n        let { key, value } = this;\n        if (isNode(key))\n            key = key.clone(schema);\n        if (isNode(value))\n            value = value.clone(schema);\n        return new Pair(key, value);\n    }\n    toJSON(_, ctx) {\n        const pair = ctx?.mapAsMap ? new Map() : {};\n        return addPairToJSMap(ctx, pair, this);\n    }\n    toString(ctx, onComment, onChompKeep) {\n        return ctx?.doc\n            ? stringifyPair(this, ctx, onComment, onChompKeep)\n            : JSON.stringify(this);\n    }\n}\n\nexport { Pair, createPair };\n","import { isCollection, isNode, isScalar, isSeq } from '../nodes/identity.js';\nimport { Scalar } from '../nodes/Scalar.js';\nimport { stringify } from './stringify.js';\nimport { lineComment, indentComment } from './stringifyComment.js';\n\nfunction stringifyPair({ key, value }, ctx, onComment, onChompKeep) {\n    const { allNullValues, doc, indent, indentStep, options: { commentString, indentSeq, simpleKeys } } = ctx;\n    let keyComment = (isNode(key) && key.comment) || null;\n    if (simpleKeys) {\n        if (keyComment) {\n            throw new Error('With simple keys, key nodes cannot have comments');\n        }\n        if (isCollection(key)) {\n            const msg = 'With simple keys, collection cannot be used as a key value';\n            throw new Error(msg);\n        }\n    }\n    let explicitKey = !simpleKeys &&\n        (!key ||\n            (keyComment && value == null && !ctx.inFlow) ||\n            isCollection(key) ||\n            (isScalar(key)\n                ? key.type === Scalar.BLOCK_FOLDED || key.type === Scalar.BLOCK_LITERAL\n                : typeof key === 'object'));\n    ctx = Object.assign({}, ctx, {\n        allNullValues: false,\n        implicitKey: !explicitKey && (simpleKeys || !allNullValues),\n        indent: indent + indentStep\n    });\n    let keyCommentDone = false;\n    let chompKeep = false;\n    let str = stringify(key, ctx, () => (keyCommentDone = true), () => (chompKeep = true));\n    if (!explicitKey && !ctx.inFlow && str.length > 1024) {\n        if (simpleKeys)\n            throw new Error('With simple keys, single line scalar must not span more than 1024 characters');\n        explicitKey = true;\n    }\n    if (ctx.inFlow) {\n        if (allNullValues || value == null) {\n            if (keyCommentDone && onComment)\n                onComment();\n            return str === '' ? '?' : explicitKey ? `? ${str}` : str;\n        }\n    }\n    else if ((allNullValues && !simpleKeys) || (value == null && explicitKey)) {\n        str = `? ${str}`;\n        if (keyComment && !keyCommentDone) {\n            str += lineComment(str, ctx.indent, commentString(keyComment));\n        }\n        else if (chompKeep && onChompKeep)\n            onChompKeep();\n        return str;\n    }\n    if (keyCommentDone)\n        keyComment = null;\n    if (explicitKey) {\n        if (keyComment)\n            str += lineComment(str, ctx.indent, commentString(keyComment));\n        str = `? ${str}\\n${indent}:`;\n    }\n    else {\n        str = `${str}:`;\n        if (keyComment)\n            str += lineComment(str, ctx.indent, commentString(keyComment));\n    }\n    let vsb, vcb, valueComment;\n    if (isNode(value)) {\n        vsb = !!value.spaceBefore;\n        vcb = value.commentBefore;\n        valueComment = value.comment;\n    }\n    else {\n        vsb = false;\n        vcb = null;\n        valueComment = null;\n        if (value && typeof value === 'object')\n            value = doc.createNode(value);\n    }\n    ctx.implicitKey = false;\n    if (!explicitKey && !keyComment && isScalar(value))\n        ctx.indentAtStart = str.length + 1;\n    chompKeep = false;\n    if (!indentSeq &&\n        indentStep.length >= 2 &&\n        !ctx.inFlow &&\n        !explicitKey &&\n        isSeq(value) &&\n        !value.flow &&\n        !value.tag &&\n        !value.anchor) {\n        // If indentSeq === false, consider '- ' as part of indentation where possible\n        ctx.indent = ctx.indent.substring(2);\n    }\n    let valueCommentDone = false;\n    const valueStr = stringify(value, ctx, () => (valueCommentDone = true), () => (chompKeep = true));\n    let ws = ' ';\n    if (keyComment || vsb || vcb) {\n        ws = vsb ? '\\n' : '';\n        if (vcb) {\n            const cs = commentString(vcb);\n            ws += `\\n${indentComment(cs, ctx.indent)}`;\n        }\n        if (valueStr === '' && !ctx.inFlow) {\n            if (ws === '\\n')\n                ws = '\\n\\n';\n        }\n        else {\n            ws += `\\n${ctx.indent}`;\n        }\n    }\n    else if (!explicitKey && isCollection(value)) {\n        const vs0 = valueStr[0];\n        const nl0 = valueStr.indexOf('\\n');\n        const hasNewline = nl0 !== -1;\n        const flow = ctx.inFlow ?? value.flow ?? value.items.length === 0;\n        if (hasNewline || !flow) {\n            let hasPropsLine = false;\n            if (hasNewline && (vs0 === '&' || vs0 === '!')) {\n                let sp0 = valueStr.indexOf(' ');\n                if (vs0 === '&' &&\n                    sp0 !== -1 &&\n                    sp0 < nl0 &&\n                    valueStr[sp0 + 1] === '!') {\n                    sp0 = valueStr.indexOf(' ', sp0 + 1);\n                }\n                if (sp0 === -1 || nl0 < sp0)\n                    hasPropsLine = true;\n            }\n            if (!hasPropsLine)\n                ws = `\\n${ctx.indent}`;\n        }\n    }\n    else if (valueStr === '' || valueStr[0] === '\\n') {\n        ws = '';\n    }\n    str += ws + valueStr;\n    if (ctx.inFlow) {\n        if (valueCommentDone && onComment)\n            onComment();\n    }\n    else if (valueComment && !valueCommentDone) {\n        str += lineComment(str, ctx.indent, commentString(valueComment));\n    }\n    else if (chompKeep && onChompKeep) {\n        onChompKeep();\n    }\n    return str;\n}\n\nexport { stringifyPair };\n","import { isNode, isPair } from '../nodes/identity.js';\nimport { stringify } from './stringify.js';\nimport { lineComment, indentComment } from './stringifyComment.js';\n\nfunction stringifyCollection(collection, ctx, options) {\n    const flow = ctx.inFlow ?? collection.flow;\n    const stringify = flow ? stringifyFlowCollection : stringifyBlockCollection;\n    return stringify(collection, ctx, options);\n}\nfunction stringifyBlockCollection({ comment, items }, ctx, { blockItemPrefix, flowChars, itemIndent, onChompKeep, onComment }) {\n    const { indent, options: { commentString } } = ctx;\n    const itemCtx = Object.assign({}, ctx, { indent: itemIndent, type: null });\n    let chompKeep = false; // flag for the preceding node's status\n    const lines = [];\n    for (let i = 0; i < items.length; ++i) {\n        const item = items[i];\n        let comment = null;\n        if (isNode(item)) {\n            if (!chompKeep && item.spaceBefore)\n                lines.push('');\n            addCommentBefore(ctx, lines, item.commentBefore, chompKeep);\n            if (item.comment)\n                comment = item.comment;\n        }\n        else if (isPair(item)) {\n            const ik = isNode(item.key) ? item.key : null;\n            if (ik) {\n                if (!chompKeep && ik.spaceBefore)\n                    lines.push('');\n                addCommentBefore(ctx, lines, ik.commentBefore, chompKeep);\n            }\n        }\n        chompKeep = false;\n        let str = stringify(item, itemCtx, () => (comment = null), () => (chompKeep = true));\n        if (comment)\n            str += lineComment(str, itemIndent, commentString(comment));\n        if (chompKeep && comment)\n            chompKeep = false;\n        lines.push(blockItemPrefix + str);\n    }\n    let str;\n    if (lines.length === 0) {\n        str = flowChars.start + flowChars.end;\n    }\n    else {\n        str = lines[0];\n        for (let i = 1; i < lines.length; ++i) {\n            const line = lines[i];\n            str += line ? `\\n${indent}${line}` : '\\n';\n        }\n    }\n    if (comment) {\n        str += '\\n' + indentComment(commentString(comment), indent);\n        if (onComment)\n            onComment();\n    }\n    else if (chompKeep && onChompKeep)\n        onChompKeep();\n    return str;\n}\nfunction stringifyFlowCollection({ comment, items }, ctx, { flowChars, itemIndent, onComment }) {\n    const { indent, indentStep, flowCollectionPadding: fcPadding, options: { commentString } } = ctx;\n    itemIndent += indentStep;\n    const itemCtx = Object.assign({}, ctx, {\n        indent: itemIndent,\n        inFlow: true,\n        type: null\n    });\n    let reqNewline = false;\n    let linesAtValue = 0;\n    const lines = [];\n    for (let i = 0; i < items.length; ++i) {\n        const item = items[i];\n        let comment = null;\n        if (isNode(item)) {\n            if (item.spaceBefore)\n                lines.push('');\n            addCommentBefore(ctx, lines, item.commentBefore, false);\n            if (item.comment)\n                comment = item.comment;\n        }\n        else if (isPair(item)) {\n            const ik = isNode(item.key) ? item.key : null;\n            if (ik) {\n                if (ik.spaceBefore)\n                    lines.push('');\n                addCommentBefore(ctx, lines, ik.commentBefore, false);\n                if (ik.comment)\n                    reqNewline = true;\n            }\n            const iv = isNode(item.value) ? item.value : null;\n            if (iv) {\n                if (iv.comment)\n                    comment = iv.comment;\n                if (iv.commentBefore)\n                    reqNewline = true;\n            }\n            else if (item.value == null && ik?.comment) {\n                comment = ik.comment;\n            }\n        }\n        if (comment)\n            reqNewline = true;\n        let str = stringify(item, itemCtx, () => (comment = null));\n        if (i < items.length - 1)\n            str += ',';\n        if (comment)\n            str += lineComment(str, itemIndent, commentString(comment));\n        if (!reqNewline && (lines.length > linesAtValue || str.includes('\\n')))\n            reqNewline = true;\n        lines.push(str);\n        linesAtValue = lines.length;\n    }\n    let str;\n    const { start, end } = flowChars;\n    if (lines.length === 0) {\n        str = start + end;\n    }\n    else {\n        if (!reqNewline) {\n            const len = lines.reduce((sum, line) => sum + line.length + 2, 2);\n            reqNewline = ctx.options.lineWidth > 0 && len > ctx.options.lineWidth;\n        }\n        if (reqNewline) {\n            str = start;\n            for (const line of lines)\n                str += line ? `\\n${indentStep}${indent}${line}` : '\\n';\n            str += `\\n${indent}${end}`;\n        }\n        else {\n            str = `${start}${fcPadding}${lines.join(' ')}${fcPadding}${end}`;\n        }\n    }\n    if (comment) {\n        str += lineComment(str, indent, commentString(comment));\n        if (onComment)\n            onComment();\n    }\n    return str;\n}\nfunction addCommentBefore({ indent, options: { commentString } }, lines, comment, chompKeep) {\n    if (comment && chompKeep)\n        comment = comment.replace(/^\\n+/, '');\n    if (comment) {\n        const ic = indentComment(commentString(comment), indent);\n        lines.push(ic.trimStart()); // Avoid double indent on first line\n    }\n}\n\nexport { stringifyCollection };\n","import { stringifyCollection } from '../stringify/stringifyCollection.js';\nimport { addPairToJSMap } from './addPairToJSMap.js';\nimport { Collection } from './Collection.js';\nimport { isPair, isScalar, MAP } from './identity.js';\nimport { Pair, createPair } from './Pair.js';\nimport { isScalarValue } from './Scalar.js';\n\nfunction findPair(items, key) {\n    const k = isScalar(key) ? key.value : key;\n    for (const it of items) {\n        if (isPair(it)) {\n            if (it.key === key || it.key === k)\n                return it;\n            if (isScalar(it.key) && it.key.value === k)\n                return it;\n        }\n    }\n    return undefined;\n}\nclass YAMLMap extends Collection {\n    static get tagName() {\n        return 'tag:yaml.org,2002:map';\n    }\n    constructor(schema) {\n        super(MAP, schema);\n        this.items = [];\n    }\n    /**\n     * A generic collection parsing method that can be extended\n     * to other node classes that inherit from YAMLMap\n     */\n    static from(schema, obj, ctx) {\n        const { keepUndefined, replacer } = ctx;\n        const map = new this(schema);\n        const add = (key, value) => {\n            if (typeof replacer === 'function')\n                value = replacer.call(obj, key, value);\n            else if (Array.isArray(replacer) && !replacer.includes(key))\n                return;\n            if (value !== undefined || keepUndefined)\n                map.items.push(createPair(key, value, ctx));\n        };\n        if (obj instanceof Map) {\n            for (const [key, value] of obj)\n                add(key, value);\n        }\n        else if (obj && typeof obj === 'object') {\n            for (const key of Object.keys(obj))\n                add(key, obj[key]);\n        }\n        if (typeof schema.sortMapEntries === 'function') {\n            map.items.sort(schema.sortMapEntries);\n        }\n        return map;\n    }\n    /**\n     * Adds a value to the collection.\n     *\n     * @param overwrite - If not set `true`, using a key that is already in the\n     *   collection will throw. Otherwise, overwrites the previous value.\n     */\n    add(pair, overwrite) {\n        let _pair;\n        if (isPair(pair))\n            _pair = pair;\n        else if (!pair || typeof pair !== 'object' || !('key' in pair)) {\n            // In TypeScript, this never happens.\n            _pair = new Pair(pair, pair?.value);\n        }\n        else\n            _pair = new Pair(pair.key, pair.value);\n        const prev = findPair(this.items, _pair.key);\n        const sortEntries = this.schema?.sortMapEntries;\n        if (prev) {\n            if (!overwrite)\n                throw new Error(`Key ${_pair.key} already set`);\n            // For scalars, keep the old node & its comments and anchors\n            if (isScalar(prev.value) && isScalarValue(_pair.value))\n                prev.value.value = _pair.value;\n            else\n                prev.value = _pair.value;\n        }\n        else if (sortEntries) {\n            const i = this.items.findIndex(item => sortEntries(_pair, item) < 0);\n            if (i === -1)\n                this.items.push(_pair);\n            else\n                this.items.splice(i, 0, _pair);\n        }\n        else {\n            this.items.push(_pair);\n        }\n    }\n    delete(key) {\n        const it = findPair(this.items, key);\n        if (!it)\n            return false;\n        const del = this.items.splice(this.items.indexOf(it), 1);\n        return del.length > 0;\n    }\n    get(key, keepScalar) {\n        const it = findPair(this.items, key);\n        const node = it?.value;\n        return (!keepScalar && isScalar(node) ? node.value : node) ?? undefined;\n    }\n    has(key) {\n        return !!findPair(this.items, key);\n    }\n    set(key, value) {\n        this.add(new Pair(key, value), true);\n    }\n    /**\n     * @param ctx - Conversion context, originally set in Document#toJS()\n     * @param {Class} Type - If set, forces the returned collection type\n     * @returns Instance of Type, Map, or Object\n     */\n    toJSON(_, ctx, Type) {\n        const map = Type ? new Type() : ctx?.mapAsMap ? new Map() : {};\n        if (ctx?.onCreate)\n            ctx.onCreate(map);\n        for (const item of this.items)\n            addPairToJSMap(ctx, map, item);\n        return map;\n    }\n    toString(ctx, onComment, onChompKeep) {\n        if (!ctx)\n            return JSON.stringify(this);\n        for (const item of this.items) {\n            if (!isPair(item))\n                throw new Error(`Map items must all be pairs; found ${JSON.stringify(item)} instead`);\n        }\n        if (!ctx.allNullValues && this.hasAllNullValues(false))\n            ctx = Object.assign({}, ctx, { allNullValues: true });\n        return stringifyCollection(this, ctx, {\n            blockItemPrefix: '',\n            flowChars: { start: '{', end: '}' },\n            itemIndent: ctx.indent || '',\n            onChompKeep,\n            onComment\n        });\n    }\n}\n\nexport { YAMLMap, findPair };\n","import { isMap } from '../../nodes/identity.js';\nimport { YAMLMap } from '../../nodes/YAMLMap.js';\n\nconst map = {\n    collection: 'map',\n    default: true,\n    nodeClass: YAMLMap,\n    tag: 'tag:yaml.org,2002:map',\n    resolve(map, onError) {\n        if (!isMap(map))\n            onError('Expected a mapping for this tag');\n        return map;\n    },\n    createNode: (schema, obj, ctx) => YAMLMap.from(schema, obj, ctx)\n};\n\nexport { map };\n","import { createNode } from '../doc/createNode.js';\nimport { stringifyCollection } from '../stringify/stringifyCollection.js';\nimport { Collection } from './Collection.js';\nimport { SEQ, isScalar } from './identity.js';\nimport { isScalarValue } from './Scalar.js';\nimport { toJS } from './toJS.js';\n\nclass YAMLSeq extends Collection {\n    static get tagName() {\n        return 'tag:yaml.org,2002:seq';\n    }\n    constructor(schema) {\n        super(SEQ, schema);\n        this.items = [];\n    }\n    add(value) {\n        this.items.push(value);\n    }\n    /**\n     * Removes a value from the collection.\n     *\n     * `key` must contain a representation of an integer for this to succeed.\n     * It may be wrapped in a `Scalar`.\n     *\n     * @returns `true` if the item was found and removed.\n     */\n    delete(key) {\n        const idx = asItemIndex(key);\n        if (typeof idx !== 'number')\n            return false;\n        const del = this.items.splice(idx, 1);\n        return del.length > 0;\n    }\n    get(key, keepScalar) {\n        const idx = asItemIndex(key);\n        if (typeof idx !== 'number')\n            return undefined;\n        const it = this.items[idx];\n        return !keepScalar && isScalar(it) ? it.value : it;\n    }\n    /**\n     * Checks if the collection includes a value with the key `key`.\n     *\n     * `key` must contain a representation of an integer for this to succeed.\n     * It may be wrapped in a `Scalar`.\n     */\n    has(key) {\n        const idx = asItemIndex(key);\n        return typeof idx === 'number' && idx < this.items.length;\n    }\n    /**\n     * Sets a value in this collection. For `!!set`, `value` needs to be a\n     * boolean to add/remove the item from the set.\n     *\n     * If `key` does not contain a representation of an integer, this will throw.\n     * It may be wrapped in a `Scalar`.\n     */\n    set(key, value) {\n        const idx = asItemIndex(key);\n        if (typeof idx !== 'number')\n            throw new Error(`Expected a valid index, not ${key}.`);\n        const prev = this.items[idx];\n        if (isScalar(prev) && isScalarValue(value))\n            prev.value = value;\n        else\n            this.items[idx] = value;\n    }\n    toJSON(_, ctx) {\n        const seq = [];\n        if (ctx?.onCreate)\n            ctx.onCreate(seq);\n        let i = 0;\n        for (const item of this.items)\n            seq.push(toJS(item, String(i++), ctx));\n        return seq;\n    }\n    toString(ctx, onComment, onChompKeep) {\n        if (!ctx)\n            return JSON.stringify(this);\n        return stringifyCollection(this, ctx, {\n            blockItemPrefix: '- ',\n            flowChars: { start: '[', end: ']' },\n            itemIndent: (ctx.indent || '') + '  ',\n            onChompKeep,\n            onComment\n        });\n    }\n    static from(schema, obj, ctx) {\n        const { replacer } = ctx;\n        const seq = new this(schema);\n        if (obj && Symbol.iterator in Object(obj)) {\n            let i = 0;\n            for (let it of obj) {\n                if (typeof replacer === 'function') {\n                    const key = obj instanceof Set ? it : String(i++);\n                    it = replacer.call(obj, key, it);\n                }\n                seq.items.push(createNode(it, undefined, ctx));\n            }\n        }\n        return seq;\n    }\n}\nfunction asItemIndex(key) {\n    let idx = isScalar(key) ? key.value : key;\n    if (idx && typeof idx === 'string')\n        idx = Number(idx);\n    return typeof idx === 'number' && Number.isInteger(idx) && idx >= 0\n        ? idx\n        : null;\n}\n\nexport { YAMLSeq };\n","import { isSeq } from '../../nodes/identity.js';\nimport { YAMLSeq } from '../../nodes/YAMLSeq.js';\n\nconst seq = {\n    collection: 'seq',\n    default: true,\n    nodeClass: YAMLSeq,\n    tag: 'tag:yaml.org,2002:seq',\n    resolve(seq, onError) {\n        if (!isSeq(seq))\n            onError('Expected a sequence for this tag');\n        return seq;\n    },\n    createNode: (schema, obj, ctx) => YAMLSeq.from(schema, obj, ctx)\n};\n\nexport { seq };\n","import { stringifyString } from '../../stringify/stringifyString.js';\n\nconst string = {\n    identify: value => typeof value === 'string',\n    default: true,\n    tag: 'tag:yaml.org,2002:str',\n    resolve: str => str,\n    stringify(item, ctx, onComment, onChompKeep) {\n        ctx = Object.assign({ actualString: true }, ctx);\n        return stringifyString(item, ctx, onComment, onChompKeep);\n    }\n};\n\nexport { string };\n","import { Scalar } from '../../nodes/Scalar.js';\n\nconst nullTag = {\n    identify: value => value == null,\n    createNode: () => new Scalar(null),\n    default: true,\n    tag: 'tag:yaml.org,2002:null',\n    test: /^(?:~|[Nn]ull|NULL)?$/,\n    resolve: () => new Scalar(null),\n    stringify: ({ source }, ctx) => typeof source === 'string' && nullTag.test.test(source)\n        ? source\n        : ctx.options.nullStr\n};\n\nexport { nullTag };\n","import { Scalar } from '../../nodes/Scalar.js';\n\nconst boolTag = {\n    identify: value => typeof value === 'boolean',\n    default: true,\n    tag: 'tag:yaml.org,2002:bool',\n    test: /^(?:[Tt]rue|TRUE|[Ff]alse|FALSE)$/,\n    resolve: str => new Scalar(str[0] === 't' || str[0] === 'T'),\n    stringify({ source, value }, ctx) {\n        if (source && boolTag.test.test(source)) {\n            const sv = source[0] === 't' || source[0] === 'T';\n            if (value === sv)\n                return source;\n        }\n        return value ? ctx.options.trueStr : ctx.options.falseStr;\n    }\n};\n\nexport { boolTag };\n","function stringifyNumber({ format, minFractionDigits, tag, value }) {\n    if (typeof value === 'bigint')\n        return String(value);\n    const num = typeof value === 'number' ? value : Number(value);\n    if (!isFinite(num))\n        return isNaN(num) ? '.nan' : num < 0 ? '-.inf' : '.inf';\n    let n = JSON.stringify(value);\n    if (!format &&\n        minFractionDigits &&\n        (!tag || tag === 'tag:yaml.org,2002:float') &&\n        /^\\d/.test(n)) {\n        let i = n.indexOf('.');\n        if (i < 0) {\n            i = n.length;\n            n += '.';\n        }\n        let d = minFractionDigits - (n.length - i - 1);\n        while (d-- > 0)\n            n += '0';\n    }\n    return n;\n}\n\nexport { stringifyNumber };\n","import { Scalar } from '../../nodes/Scalar.js';\nimport { stringifyNumber } from '../../stringify/stringifyNumber.js';\n\nconst floatNaN = {\n    identify: value => typeof value === 'number',\n    default: true,\n    tag: 'tag:yaml.org,2002:float',\n    test: /^(?:[-+]?\\.(?:inf|Inf|INF|nan|NaN|NAN))$/,\n    resolve: str => str.slice(-3).toLowerCase() === 'nan'\n        ? NaN\n        : str[0] === '-'\n            ? Number.NEGATIVE_INFINITY\n            : Number.POSITIVE_INFINITY,\n    stringify: stringifyNumber\n};\nconst floatExp = {\n    identify: value => typeof value === 'number',\n    default: true,\n    tag: 'tag:yaml.org,2002:float',\n    format: 'EXP',\n    test: /^[-+]?(?:\\.[0-9]+|[0-9]+(?:\\.[0-9]*)?)[eE][-+]?[0-9]+$/,\n    resolve: str => parseFloat(str),\n    stringify(node) {\n        const num = Number(node.value);\n        return isFinite(num) ? num.toExponential() : stringifyNumber(node);\n    }\n};\nconst float = {\n    identify: value => typeof value === 'number',\n    default: true,\n    tag: 'tag:yaml.org,2002:float',\n    test: /^[-+]?(?:\\.[0-9]+|[0-9]+\\.[0-9]*)$/,\n    resolve(str) {\n        const node = new Scalar(parseFloat(str));\n        const dot = str.indexOf('.');\n        if (dot !== -1 && str[str.length - 1] === '0')\n            node.minFractionDigits = str.length - dot - 1;\n        return node;\n    },\n    stringify: stringifyNumber\n};\n\nexport { float, floatExp, floatNaN };\n","import { stringifyNumber } from '../../stringify/stringifyNumber.js';\n\nconst intIdentify = (value) => typeof value === 'bigint' || Number.isInteger(value);\nconst intResolve = (str, offset, radix, { intAsBigInt }) => (intAsBigInt ? BigInt(str) : parseInt(str.substring(offset), radix));\nfunction intStringify(node, radix, prefix) {\n    const { value } = node;\n    if (intIdentify(value) && value >= 0)\n        return prefix + value.toString(radix);\n    return stringifyNumber(node);\n}\nconst intOct = {\n    identify: value => intIdentify(value) && value >= 0,\n    default: true,\n    tag: 'tag:yaml.org,2002:int',\n    format: 'OCT',\n    test: /^0o[0-7]+$/,\n    resolve: (str, _onError, opt) => intResolve(str, 2, 8, opt),\n    stringify: node => intStringify(node, 8, '0o')\n};\nconst int = {\n    identify: intIdentify,\n    default: true,\n    tag: 'tag:yaml.org,2002:int',\n    test: /^[-+]?[0-9]+$/,\n    resolve: (str, _onError, opt) => intResolve(str, 0, 10, opt),\n    stringify: stringifyNumber\n};\nconst intHex = {\n    identify: value => intIdentify(value) && value >= 0,\n    default: true,\n    tag: 'tag:yaml.org,2002:int',\n    format: 'HEX',\n    test: /^0x[0-9a-fA-F]+$/,\n    resolve: (str, _onError, opt) => intResolve(str, 2, 16, opt),\n    stringify: node => intStringify(node, 16, '0x')\n};\n\nexport { int, intHex, intOct };\n","import { map } from '../common/map.js';\nimport { nullTag } from '../common/null.js';\nimport { seq } from '../common/seq.js';\nimport { string } from '../common/string.js';\nimport { boolTag } from './bool.js';\nimport { floatNaN, floatExp, float } from './float.js';\nimport { intOct, int, intHex } from './int.js';\n\nconst schema = [\n    map,\n    seq,\n    string,\n    nullTag,\n    boolTag,\n    intOct,\n    int,\n    intHex,\n    floatNaN,\n    floatExp,\n    float\n];\n\nexport { schema };\n","import { Scalar } from '../../nodes/Scalar.js';\nimport { map } from '../common/map.js';\nimport { seq } from '../common/seq.js';\n\nfunction intIdentify(value) {\n    return typeof value === 'bigint' || Number.isInteger(value);\n}\nconst stringifyJSON = ({ value }) => JSON.stringify(value);\nconst jsonScalars = [\n    {\n        identify: value => typeof value === 'string',\n        default: true,\n        tag: 'tag:yaml.org,2002:str',\n        resolve: str => str,\n        stringify: stringifyJSON\n    },\n    {\n        identify: value => value == null,\n        createNode: () => new Scalar(null),\n        default: true,\n        tag: 'tag:yaml.org,2002:null',\n        test: /^null$/,\n        resolve: () => null,\n        stringify: stringifyJSON\n    },\n    {\n        identify: value => typeof value === 'boolean',\n        default: true,\n        tag: 'tag:yaml.org,2002:bool',\n        test: /^true|false$/,\n        resolve: str => str === 'true',\n        stringify: stringifyJSON\n    },\n    {\n        identify: intIdentify,\n        default: true,\n        tag: 'tag:yaml.org,2002:int',\n        test: /^-?(?:0|[1-9][0-9]*)$/,\n        resolve: (str, _onError, { intAsBigInt }) => intAsBigInt ? BigInt(str) : parseInt(str, 10),\n        stringify: ({ value }) => intIdentify(value) ? value.toString() : JSON.stringify(value)\n    },\n    {\n        identify: value => typeof value === 'number',\n        default: true,\n        tag: 'tag:yaml.org,2002:float',\n        test: /^-?(?:0|[1-9][0-9]*)(?:\\.[0-9]*)?(?:[eE][-+]?[0-9]+)?$/,\n        resolve: str => parseFloat(str),\n        stringify: stringifyJSON\n    }\n];\nconst jsonError = {\n    default: true,\n    tag: '',\n    test: /^/,\n    resolve(str, onError) {\n        onError(`Unresolved plain scalar ${JSON.stringify(str)}`);\n        return str;\n    }\n};\nconst schema = [map, seq].concat(jsonScalars, jsonError);\n\nexport { schema };\n","import { Scalar } from '../../nodes/Scalar.js';\nimport { stringifyString } from '../../stringify/stringifyString.js';\n\nconst binary = {\n    identify: value => value instanceof Uint8Array, // Buffer inherits from Uint8Array\n    default: false,\n    tag: 'tag:yaml.org,2002:binary',\n    /**\n     * Returns a Buffer in node and an Uint8Array in browsers\n     *\n     * To use the resulting buffer as an image, you'll want to do something like:\n     *\n     *   const blob = new Blob([buffer], { type: 'image/jpeg' })\n     *   document.querySelector('#photo').src = URL.createObjectURL(blob)\n     */\n    resolve(src, onError) {\n        if (typeof Buffer === 'function') {\n            return Buffer.from(src, 'base64');\n        }\n        else if (typeof atob === 'function') {\n            // On IE 11, atob() can't handle newlines\n            const str = atob(src.replace(/[\\n\\r]/g, ''));\n            const buffer = new Uint8Array(str.length);\n            for (let i = 0; i < str.length; ++i)\n                buffer[i] = str.charCodeAt(i);\n            return buffer;\n        }\n        else {\n            onError('This environment does not support reading binary tags; either Buffer or atob is required');\n            return src;\n        }\n    },\n    stringify({ comment, type, value }, ctx, onComment, onChompKeep) {\n        const buf = value; // checked earlier by binary.identify()\n        let str;\n        if (typeof Buffer === 'function') {\n            str =\n                buf instanceof Buffer\n                    ? buf.toString('base64')\n                    : Buffer.from(buf.buffer).toString('base64');\n        }\n        else if (typeof btoa === 'function') {\n            let s = '';\n            for (let i = 0; i < buf.length; ++i)\n                s += String.fromCharCode(buf[i]);\n            str = btoa(s);\n        }\n        else {\n            throw new Error('This environment does not support writing binary tags; either Buffer or btoa is required');\n        }\n        if (!type)\n            type = Scalar.BLOCK_LITERAL;\n        if (type !== Scalar.QUOTE_DOUBLE) {\n            const lineWidth = Math.max(ctx.options.lineWidth - ctx.indent.length, ctx.options.minContentWidth);\n            const n = Math.ceil(str.length / lineWidth);\n            const lines = new Array(n);\n            for (let i = 0, o = 0; i < n; ++i, o += lineWidth) {\n                lines[i] = str.substr(o, lineWidth);\n            }\n            str = lines.join(type === Scalar.BLOCK_LITERAL ? '\\n' : ' ');\n        }\n        return stringifyString({ comment, type, value: str }, ctx, onComment, onChompKeep);\n    }\n};\n\nexport { binary };\n","import { isSeq, isPair, isMap } from '../../nodes/identity.js';\nimport { Pair, createPair } from '../../nodes/Pair.js';\nimport { Scalar } from '../../nodes/Scalar.js';\nimport { YAMLSeq } from '../../nodes/YAMLSeq.js';\n\nfunction resolvePairs(seq, onError) {\n    if (isSeq(seq)) {\n        for (let i = 0; i < seq.items.length; ++i) {\n            let item = seq.items[i];\n            if (isPair(item))\n                continue;\n            else if (isMap(item)) {\n                if (item.items.length > 1)\n                    onError('Each pair must have its own sequence indicator');\n                const pair = item.items[0] || new Pair(new Scalar(null));\n                if (item.commentBefore)\n                    pair.key.commentBefore = pair.key.commentBefore\n                        ? `${item.commentBefore}\\n${pair.key.commentBefore}`\n                        : item.commentBefore;\n                if (item.comment) {\n                    const cn = pair.value ?? pair.key;\n                    cn.comment = cn.comment\n                        ? `${item.comment}\\n${cn.comment}`\n                        : item.comment;\n                }\n                item = pair;\n            }\n            seq.items[i] = isPair(item) ? item : new Pair(item);\n        }\n    }\n    else\n        onError('Expected a sequence for this tag');\n    return seq;\n}\nfunction createPairs(schema, iterable, ctx) {\n    const { replacer } = ctx;\n    const pairs = new YAMLSeq(schema);\n    pairs.tag = 'tag:yaml.org,2002:pairs';\n    let i = 0;\n    if (iterable && Symbol.iterator in Object(iterable))\n        for (let it of iterable) {\n            if (typeof replacer === 'function')\n                it = replacer.call(iterable, String(i++), it);\n            let key, value;\n            if (Array.isArray(it)) {\n                if (it.length === 2) {\n                    key = it[0];\n                    value = it[1];\n                }\n                else\n                    throw new TypeError(`Expected [key, value] tuple: ${it}`);\n            }\n            else if (it && it instanceof Object) {\n                const keys = Object.keys(it);\n                if (keys.length === 1) {\n                    key = keys[0];\n                    value = it[key];\n                }\n                else {\n                    throw new TypeError(`Expected tuple with one key, not ${keys.length} keys`);\n                }\n            }\n            else {\n                key = it;\n            }\n            pairs.items.push(createPair(key, value, ctx));\n        }\n    return pairs;\n}\nconst pairs = {\n    collection: 'seq',\n    default: false,\n    tag: 'tag:yaml.org,2002:pairs',\n    resolve: resolvePairs,\n    createNode: createPairs\n};\n\nexport { createPairs, pairs, resolvePairs };\n","import { isScalar, isPair } from '../../nodes/identity.js';\nimport { toJS } from '../../nodes/toJS.js';\nimport { YAMLMap } from '../../nodes/YAMLMap.js';\nimport { YAMLSeq } from '../../nodes/YAMLSeq.js';\nimport { resolvePairs, createPairs } from './pairs.js';\n\nclass YAMLOMap extends YAMLSeq {\n    constructor() {\n        super();\n        this.add = YAMLMap.prototype.add.bind(this);\n        this.delete = YAMLMap.prototype.delete.bind(this);\n        this.get = YAMLMap.prototype.get.bind(this);\n        this.has = YAMLMap.prototype.has.bind(this);\n        this.set = YAMLMap.prototype.set.bind(this);\n        this.tag = YAMLOMap.tag;\n    }\n    /**\n     * If `ctx` is given, the return type is actually `Map<unknown, unknown>`,\n     * but TypeScript won't allow widening the signature of a child method.\n     */\n    toJSON(_, ctx) {\n        if (!ctx)\n            return super.toJSON(_);\n        const map = new Map();\n        if (ctx?.onCreate)\n            ctx.onCreate(map);\n        for (const pair of this.items) {\n            let key, value;\n            if (isPair(pair)) {\n                key = toJS(pair.key, '', ctx);\n                value = toJS(pair.value, key, ctx);\n            }\n            else {\n                key = toJS(pair, '', ctx);\n            }\n            if (map.has(key))\n                throw new Error('Ordered maps must not include duplicate keys');\n            map.set(key, value);\n        }\n        return map;\n    }\n    static from(schema, iterable, ctx) {\n        const pairs = createPairs(schema, iterable, ctx);\n        const omap = new this();\n        omap.items = pairs.items;\n        return omap;\n    }\n}\nYAMLOMap.tag = 'tag:yaml.org,2002:omap';\nconst omap = {\n    collection: 'seq',\n    identify: value => value instanceof Map,\n    nodeClass: YAMLOMap,\n    default: false,\n    tag: 'tag:yaml.org,2002:omap',\n    resolve(seq, onError) {\n        const pairs = resolvePairs(seq, onError);\n        const seenKeys = [];\n        for (const { key } of pairs.items) {\n            if (isScalar(key)) {\n                if (seenKeys.includes(key.value)) {\n                    onError(`Ordered maps must not include duplicate keys: ${key.value}`);\n                }\n                else {\n                    seenKeys.push(key.value);\n                }\n            }\n        }\n        return Object.assign(new YAMLOMap(), pairs);\n    },\n    createNode: (schema, iterable, ctx) => YAMLOMap.from(schema, iterable, ctx)\n};\n\nexport { YAMLOMap, omap };\n","import { Scalar } from '../../nodes/Scalar.js';\n\nfunction boolStringify({ value, source }, ctx) {\n    const boolObj = value ? trueTag : falseTag;\n    if (source && boolObj.test.test(source))\n        return source;\n    return value ? ctx.options.trueStr : ctx.options.falseStr;\n}\nconst trueTag = {\n    identify: value => value === true,\n    default: true,\n    tag: 'tag:yaml.org,2002:bool',\n    test: /^(?:Y|y|[Yy]es|YES|[Tt]rue|TRUE|[Oo]n|ON)$/,\n    resolve: () => new Scalar(true),\n    stringify: boolStringify\n};\nconst falseTag = {\n    identify: value => value === false,\n    default: true,\n    tag: 'tag:yaml.org,2002:bool',\n    test: /^(?:N|n|[Nn]o|NO|[Ff]alse|FALSE|[Oo]ff|OFF)$/i,\n    resolve: () => new Scalar(false),\n    stringify: boolStringify\n};\n\nexport { falseTag, trueTag };\n","import { Scalar } from '../../nodes/Scalar.js';\nimport { stringifyNumber } from '../../stringify/stringifyNumber.js';\n\nconst floatNaN = {\n    identify: value => typeof value === 'number',\n    default: true,\n    tag: 'tag:yaml.org,2002:float',\n    test: /^[-+]?\\.(?:inf|Inf|INF|nan|NaN|NAN)$/,\n    resolve: (str) => str.slice(-3).toLowerCase() === 'nan'\n        ? NaN\n        : str[0] === '-'\n            ? Number.NEGATIVE_INFINITY\n            : Number.POSITIVE_INFINITY,\n    stringify: stringifyNumber\n};\nconst floatExp = {\n    identify: value => typeof value === 'number',\n    default: true,\n    tag: 'tag:yaml.org,2002:float',\n    format: 'EXP',\n    test: /^[-+]?(?:[0-9][0-9_]*)?(?:\\.[0-9_]*)?[eE][-+]?[0-9]+$/,\n    resolve: (str) => parseFloat(str.replace(/_/g, '')),\n    stringify(node) {\n        const num = Number(node.value);\n        return isFinite(num) ? num.toExponential() : stringifyNumber(node);\n    }\n};\nconst float = {\n    identify: value => typeof value === 'number',\n    default: true,\n    tag: 'tag:yaml.org,2002:float',\n    test: /^[-+]?(?:[0-9][0-9_]*)?\\.[0-9_]*$/,\n    resolve(str) {\n        const node = new Scalar(parseFloat(str.replace(/_/g, '')));\n        const dot = str.indexOf('.');\n        if (dot !== -1) {\n            const f = str.substring(dot + 1).replace(/_/g, '');\n            if (f[f.length - 1] === '0')\n                node.minFractionDigits = f.length;\n        }\n        return node;\n    },\n    stringify: stringifyNumber\n};\n\nexport { float, floatExp, floatNaN };\n","import { stringifyNumber } from '../../stringify/stringifyNumber.js';\n\nconst intIdentify = (value) => typeof value === 'bigint' || Number.isInteger(value);\nfunction intResolve(str, offset, radix, { intAsBigInt }) {\n    const sign = str[0];\n    if (sign === '-' || sign === '+')\n        offset += 1;\n    str = str.substring(offset).replace(/_/g, '');\n    if (intAsBigInt) {\n        switch (radix) {\n            case 2:\n                str = `0b${str}`;\n                break;\n            case 8:\n                str = `0o${str}`;\n                break;\n            case 16:\n                str = `0x${str}`;\n                break;\n        }\n        const n = BigInt(str);\n        return sign === '-' ? BigInt(-1) * n : n;\n    }\n    const n = parseInt(str, radix);\n    return sign === '-' ? -1 * n : n;\n}\nfunction intStringify(node, radix, prefix) {\n    const { value } = node;\n    if (intIdentify(value)) {\n        const str = value.toString(radix);\n        return value < 0 ? '-' + prefix + str.substr(1) : prefix + str;\n    }\n    return stringifyNumber(node);\n}\nconst intBin = {\n    identify: intIdentify,\n    default: true,\n    tag: 'tag:yaml.org,2002:int',\n    format: 'BIN',\n    test: /^[-+]?0b[0-1_]+$/,\n    resolve: (str, _onError, opt) => intResolve(str, 2, 2, opt),\n    stringify: node => intStringify(node, 2, '0b')\n};\nconst intOct = {\n    identify: intIdentify,\n    default: true,\n    tag: 'tag:yaml.org,2002:int',\n    format: 'OCT',\n    test: /^[-+]?0[0-7_]+$/,\n    resolve: (str, _onError, opt) => intResolve(str, 1, 8, opt),\n    stringify: node => intStringify(node, 8, '0')\n};\nconst int = {\n    identify: intIdentify,\n    default: true,\n    tag: 'tag:yaml.org,2002:int',\n    test: /^[-+]?[0-9][0-9_]*$/,\n    resolve: (str, _onError, opt) => intResolve(str, 0, 10, opt),\n    stringify: stringifyNumber\n};\nconst intHex = {\n    identify: intIdentify,\n    default: true,\n    tag: 'tag:yaml.org,2002:int',\n    format: 'HEX',\n    test: /^[-+]?0x[0-9a-fA-F_]+$/,\n    resolve: (str, _onError, opt) => intResolve(str, 2, 16, opt),\n    stringify: node => intStringify(node, 16, '0x')\n};\n\nexport { int, intBin, intHex, intOct };\n","import { isMap, isPair, isScalar } from '../../nodes/identity.js';\nimport { Pair, createPair } from '../../nodes/Pair.js';\nimport { YAMLMap, findPair } from '../../nodes/YAMLMap.js';\n\nclass YAMLSet extends YAMLMap {\n    constructor(schema) {\n        super(schema);\n        this.tag = YAMLSet.tag;\n    }\n    add(key) {\n        let pair;\n        if (isPair(key))\n            pair = key;\n        else if (key &&\n            typeof key === 'object' &&\n            'key' in key &&\n            'value' in key &&\n            key.value === null)\n            pair = new Pair(key.key, null);\n        else\n            pair = new Pair(key, null);\n        const prev = findPair(this.items, pair.key);\n        if (!prev)\n            this.items.push(pair);\n    }\n    /**\n     * If `keepPair` is `true`, returns the Pair matching `key`.\n     * Otherwise, returns the value of that Pair's key.\n     */\n    get(key, keepPair) {\n        const pair = findPair(this.items, key);\n        return !keepPair && isPair(pair)\n            ? isScalar(pair.key)\n                ? pair.key.value\n                : pair.key\n            : pair;\n    }\n    set(key, value) {\n        if (typeof value !== 'boolean')\n            throw new Error(`Expected boolean value for set(key, value) in a YAML set, not ${typeof value}`);\n        const prev = findPair(this.items, key);\n        if (prev && !value) {\n            this.items.splice(this.items.indexOf(prev), 1);\n        }\n        else if (!prev && value) {\n            this.items.push(new Pair(key));\n        }\n    }\n    toJSON(_, ctx) {\n        return super.toJSON(_, ctx, Set);\n    }\n    toString(ctx, onComment, onChompKeep) {\n        if (!ctx)\n            return JSON.stringify(this);\n        if (this.hasAllNullValues(true))\n            return super.toString(Object.assign({}, ctx, { allNullValues: true }), onComment, onChompKeep);\n        else\n            throw new Error('Set items must all have null values');\n    }\n    static from(schema, iterable, ctx) {\n        const { replacer } = ctx;\n        const set = new this(schema);\n        if (iterable && Symbol.iterator in Object(iterable))\n            for (let value of iterable) {\n                if (typeof replacer === 'function')\n                    value = replacer.call(iterable, value, value);\n                set.items.push(createPair(value, null, ctx));\n            }\n        return set;\n    }\n}\nYAMLSet.tag = 'tag:yaml.org,2002:set';\nconst set = {\n    collection: 'map',\n    identify: value => value instanceof Set,\n    nodeClass: YAMLSet,\n    default: false,\n    tag: 'tag:yaml.org,2002:set',\n    createNode: (schema, iterable, ctx) => YAMLSet.from(schema, iterable, ctx),\n    resolve(map, onError) {\n        if (isMap(map)) {\n            if (map.hasAllNullValues(true))\n                return Object.assign(new YAMLSet(), map);\n            else\n                onError('Set items must all have null values');\n        }\n        else\n            onError('Expected a mapping for this tag');\n        return map;\n    }\n};\n\nexport { YAMLSet, set };\n","import { stringifyNumber } from '../../stringify/stringifyNumber.js';\n\n/** Internal types handle bigint as number, because TS can't figure it out. */\nfunction parseSexagesimal(str, asBigInt) {\n    const sign = str[0];\n    const parts = sign === '-' || sign === '+' ? str.substring(1) : str;\n    const num = (n) => asBigInt ? BigInt(n) : Number(n);\n    const res = parts\n        .replace(/_/g, '')\n        .split(':')\n        .reduce((res, p) => res * num(60) + num(p), num(0));\n    return (sign === '-' ? num(-1) * res : res);\n}\n/**\n * hhhh:mm:ss.sss\n *\n * Internal types handle bigint as number, because TS can't figure it out.\n */\nfunction stringifySexagesimal(node) {\n    let { value } = node;\n    let num = (n) => n;\n    if (typeof value === 'bigint')\n        num = n => BigInt(n);\n    else if (isNaN(value) || !isFinite(value))\n        return stringifyNumber(node);\n    let sign = '';\n    if (value < 0) {\n        sign = '-';\n        value *= num(-1);\n    }\n    const _60 = num(60);\n    const parts = [value % _60]; // seconds, including ms\n    if (value < 60) {\n        parts.unshift(0); // at least one : is required\n    }\n    else {\n        value = (value - parts[0]) / _60;\n        parts.unshift(value % _60); // minutes\n        if (value >= 60) {\n            value = (value - parts[0]) / _60;\n            parts.unshift(value); // hours\n        }\n    }\n    return (sign +\n        parts\n            .map(n => String(n).padStart(2, '0'))\n            .join(':')\n            .replace(/000000\\d*$/, '') // % 60 may introduce error\n    );\n}\nconst intTime = {\n    identify: value => typeof value === 'bigint' || Number.isInteger(value),\n    default: true,\n    tag: 'tag:yaml.org,2002:int',\n    format: 'TIME',\n    test: /^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+$/,\n    resolve: (str, _onError, { intAsBigInt }) => parseSexagesimal(str, intAsBigInt),\n    stringify: stringifySexagesimal\n};\nconst floatTime = {\n    identify: value => typeof value === 'number',\n    default: true,\n    tag: 'tag:yaml.org,2002:float',\n    format: 'TIME',\n    test: /^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\.[0-9_]*$/,\n    resolve: str => parseSexagesimal(str, false),\n    stringify: stringifySexagesimal\n};\nconst timestamp = {\n    identify: value => value instanceof Date,\n    default: true,\n    tag: 'tag:yaml.org,2002:timestamp',\n    // If the time zone is omitted, the timestamp is assumed to be specified in UTC. The time part\n    // may be omitted altogether, resulting in a date format. In such a case, the time part is\n    // assumed to be 00:00:00Z (start of day, UTC).\n    test: RegExp('^([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})' + // YYYY-Mm-Dd\n        '(?:' + // time is optional\n        '(?:t|T|[ \\\\t]+)' + // t | T | whitespace\n        '([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2}(\\\\.[0-9]+)?)' + // Hh:Mm:Ss(.ss)?\n        '(?:[ \\\\t]*(Z|[-+][012]?[0-9](?::[0-9]{2})?))?' + // Z | +5 | -03:30\n        ')?$'),\n    resolve(str) {\n        const match = str.match(timestamp.test);\n        if (!match)\n            throw new Error('!!timestamp expects a date, starting with yyyy-mm-dd');\n        const [, year, month, day, hour, minute, second] = match.map(Number);\n        const millisec = match[7] ? Number((match[7] + '00').substr(1, 3)) : 0;\n        let date = Date.UTC(year, month - 1, day, hour || 0, minute || 0, second || 0, millisec);\n        const tz = match[8];\n        if (tz && tz !== 'Z') {\n            let d = parseSexagesimal(tz, false);\n            if (Math.abs(d) < 30)\n                d *= 60;\n            date -= 60000 * d;\n        }\n        return new Date(date);\n    },\n    stringify: ({ value }) => value.toISOString().replace(/((T00:00)?:00)?\\.000Z$/, '')\n};\n\nexport { floatTime, intTime, timestamp };\n","import { map } from '../common/map.js';\nimport { nullTag } from '../common/null.js';\nimport { seq } from '../common/seq.js';\nimport { string } from '../common/string.js';\nimport { binary } from './binary.js';\nimport { trueTag, falseTag } from './bool.js';\nimport { floatNaN, floatExp, float } from './float.js';\nimport { intBin, intOct, int, intHex } from './int.js';\nimport { omap } from './omap.js';\nimport { pairs } from './pairs.js';\nimport { set } from './set.js';\nimport { intTime, floatTime, timestamp } from './timestamp.js';\n\nconst schema = [\n    map,\n    seq,\n    string,\n    nullTag,\n    trueTag,\n    falseTag,\n    intBin,\n    intOct,\n    int,\n    intHex,\n    floatNaN,\n    floatExp,\n    float,\n    binary,\n    omap,\n    pairs,\n    set,\n    intTime,\n    floatTime,\n    timestamp\n];\n\nexport { schema };\n","import { map } from './common/map.js';\nimport { nullTag } from './common/null.js';\nimport { seq } from './common/seq.js';\nimport { string } from './common/string.js';\nimport { boolTag } from './core/bool.js';\nimport { float, floatExp, floatNaN } from './core/float.js';\nimport { int, intHex, intOct } from './core/int.js';\nimport { schema } from './core/schema.js';\nimport { schema as schema$1 } from './json/schema.js';\nimport { binary } from './yaml-1.1/binary.js';\nimport { omap } from './yaml-1.1/omap.js';\nimport { pairs } from './yaml-1.1/pairs.js';\nimport { schema as schema$2 } from './yaml-1.1/schema.js';\nimport { set } from './yaml-1.1/set.js';\nimport { timestamp, floatTime, intTime } from './yaml-1.1/timestamp.js';\n\nconst schemas = new Map([\n    ['core', schema],\n    ['failsafe', [map, seq, string]],\n    ['json', schema$1],\n    ['yaml11', schema$2],\n    ['yaml-1.1', schema$2]\n]);\nconst tagsByName = {\n    binary,\n    bool: boolTag,\n    float,\n    floatExp,\n    floatNaN,\n    floatTime,\n    int,\n    intHex,\n    intOct,\n    intTime,\n    map,\n    null: nullTag,\n    omap,\n    pairs,\n    seq,\n    set,\n    timestamp\n};\nconst coreKnownTags = {\n    'tag:yaml.org,2002:binary': binary,\n    'tag:yaml.org,2002:omap': omap,\n    'tag:yaml.org,2002:pairs': pairs,\n    'tag:yaml.org,2002:set': set,\n    'tag:yaml.org,2002:timestamp': timestamp\n};\nfunction getTags(customTags, schemaName) {\n    let tags = schemas.get(schemaName);\n    if (!tags) {\n        if (Array.isArray(customTags))\n            tags = [];\n        else {\n            const keys = Array.from(schemas.keys())\n                .filter(key => key !== 'yaml11')\n                .map(key => JSON.stringify(key))\n                .join(', ');\n            throw new Error(`Unknown schema \"${schemaName}\"; use one of ${keys} or define customTags array`);\n        }\n    }\n    if (Array.isArray(customTags)) {\n        for (const tag of customTags)\n            tags = tags.concat(tag);\n    }\n    else if (typeof customTags === 'function') {\n        tags = customTags(tags.slice());\n    }\n    return tags.map(tag => {\n        if (typeof tag !== 'string')\n            return tag;\n        const tagObj = tagsByName[tag];\n        if (tagObj)\n            return tagObj;\n        const keys = Object.keys(tagsByName)\n            .map(key => JSON.stringify(key))\n            .join(', ');\n        throw new Error(`Unknown custom tag \"${tag}\"; use one of ${keys}`);\n    });\n}\n\nexport { coreKnownTags, getTags };\n","import { MAP, SCALAR, SEQ } from '../nodes/identity.js';\nimport { map } from './common/map.js';\nimport { seq } from './common/seq.js';\nimport { string } from './common/string.js';\nimport { getTags, coreKnownTags } from './tags.js';\n\nconst sortMapEntriesByKey = (a, b) => a.key < b.key ? -1 : a.key > b.key ? 1 : 0;\nclass Schema {\n    constructor({ compat, customTags, merge, resolveKnownTags, schema, sortMapEntries, toStringDefaults }) {\n        this.compat = Array.isArray(compat)\n            ? getTags(compat, 'compat')\n            : compat\n                ? getTags(null, compat)\n                : null;\n        this.merge = !!merge;\n        this.name = (typeof schema === 'string' && schema) || 'core';\n        this.knownTags = resolveKnownTags ? coreKnownTags : {};\n        this.tags = getTags(customTags, this.name);\n        this.toStringOptions = toStringDefaults ?? null;\n        Object.defineProperty(this, MAP, { value: map });\n        Object.defineProperty(this, SCALAR, { value: string });\n        Object.defineProperty(this, SEQ, { value: seq });\n        // Used by createMap()\n        this.sortMapEntries =\n            typeof sortMapEntries === 'function'\n                ? sortMapEntries\n                : sortMapEntries === true\n                    ? sortMapEntriesByKey\n                    : null;\n    }\n    clone() {\n        const copy = Object.create(Schema.prototype, Object.getOwnPropertyDescriptors(this));\n        copy.tags = this.tags.slice();\n        return copy;\n    }\n}\n\nexport { Schema };\n","import { Alias } from '../nodes/Alias.js';\nimport { isEmptyPath, collectionFromPath } from '../nodes/Collection.js';\nimport { NODE_TYPE, DOC, isNode, isCollection, isScalar } from '../nodes/identity.js';\nimport { Pair } from '../nodes/Pair.js';\nimport { toJS } from '../nodes/toJS.js';\nimport { Schema } from '../schema/Schema.js';\nimport { stringifyDocument } from '../stringify/stringifyDocument.js';\nimport { anchorNames, findNewAnchor, createNodeAnchors } from './anchors.js';\nimport { applyReviver } from './applyReviver.js';\nimport { createNode } from './createNode.js';\nimport { Directives } from './directives.js';\n\nclass Document {\n    constructor(value, replacer, options) {\n        /** A comment before this Document */\n        this.commentBefore = null;\n        /** A comment immediately after this Document */\n        this.comment = null;\n        /** Errors encountered during parsing. */\n        this.errors = [];\n        /** Warnings encountered during parsing. */\n        this.warnings = [];\n        Object.defineProperty(this, NODE_TYPE, { value: DOC });\n        let _replacer = null;\n        if (typeof replacer === 'function' || Array.isArray(replacer)) {\n            _replacer = replacer;\n        }\n        else if (options === undefined && replacer) {\n            options = replacer;\n            replacer = undefined;\n        }\n        const opt = Object.assign({\n            intAsBigInt: false,\n            keepSourceTokens: false,\n            logLevel: 'warn',\n            prettyErrors: true,\n            strict: true,\n            uniqueKeys: true,\n            version: '1.2'\n        }, options);\n        this.options = opt;\n        let { version } = opt;\n        if (options?._directives) {\n            this.directives = options._directives.atDocument();\n            if (this.directives.yaml.explicit)\n                version = this.directives.yaml.version;\n        }\n        else\n            this.directives = new Directives({ version });\n        this.setSchema(version, options);\n        // @ts-expect-error We can't really know that this matches Contents.\n        this.contents =\n            value === undefined ? null : this.createNode(value, _replacer, options);\n    }\n    /**\n     * Create a deep copy of this Document and its contents.\n     *\n     * Custom Node values that inherit from `Object` still refer to their original instances.\n     */\n    clone() {\n        const copy = Object.create(Document.prototype, {\n            [NODE_TYPE]: { value: DOC }\n        });\n        copy.commentBefore = this.commentBefore;\n        copy.comment = this.comment;\n        copy.errors = this.errors.slice();\n        copy.warnings = this.warnings.slice();\n        copy.options = Object.assign({}, this.options);\n        if (this.directives)\n            copy.directives = this.directives.clone();\n        copy.schema = this.schema.clone();\n        // @ts-expect-error We can't really know that this matches Contents.\n        copy.contents = isNode(this.contents)\n            ? this.contents.clone(copy.schema)\n            : this.contents;\n        if (this.range)\n            copy.range = this.range.slice();\n        return copy;\n    }\n    /** Adds a value to the document. */\n    add(value) {\n        if (assertCollection(this.contents))\n            this.contents.add(value);\n    }\n    /** Adds a value to the document. */\n    addIn(path, value) {\n        if (assertCollection(this.contents))\n            this.contents.addIn(path, value);\n    }\n    /**\n     * Create a new `Alias` node, ensuring that the target `node` has the required anchor.\n     *\n     * If `node` already has an anchor, `name` is ignored.\n     * Otherwise, the `node.anchor` value will be set to `name`,\n     * or if an anchor with that name is already present in the document,\n     * `name` will be used as a prefix for a new unique anchor.\n     * If `name` is undefined, the generated anchor will use 'a' as a prefix.\n     */\n    createAlias(node, name) {\n        if (!node.anchor) {\n            const prev = anchorNames(this);\n            node.anchor =\n                // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n                !name || prev.has(name) ? findNewAnchor(name || 'a', prev) : name;\n        }\n        return new Alias(node.anchor);\n    }\n    createNode(value, replacer, options) {\n        let _replacer = undefined;\n        if (typeof replacer === 'function') {\n            value = replacer.call({ '': value }, '', value);\n            _replacer = replacer;\n        }\n        else if (Array.isArray(replacer)) {\n            const keyToStr = (v) => typeof v === 'number' || v instanceof String || v instanceof Number;\n            const asStr = replacer.filter(keyToStr).map(String);\n            if (asStr.length > 0)\n                replacer = replacer.concat(asStr);\n            _replacer = replacer;\n        }\n        else if (options === undefined && replacer) {\n            options = replacer;\n            replacer = undefined;\n        }\n        const { aliasDuplicateObjects, anchorPrefix, flow, keepUndefined, onTagObj, tag } = options ?? {};\n        const { onAnchor, setAnchors, sourceObjects } = createNodeAnchors(this, \n        // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n        anchorPrefix || 'a');\n        const ctx = {\n            aliasDuplicateObjects: aliasDuplicateObjects ?? true,\n            keepUndefined: keepUndefined ?? false,\n            onAnchor,\n            onTagObj,\n            replacer: _replacer,\n            schema: this.schema,\n            sourceObjects\n        };\n        const node = createNode(value, tag, ctx);\n        if (flow && isCollection(node))\n            node.flow = true;\n        setAnchors();\n        return node;\n    }\n    /**\n     * Convert a key and a value into a `Pair` using the current schema,\n     * recursively wrapping all values as `Scalar` or `Collection` nodes.\n     */\n    createPair(key, value, options = {}) {\n        const k = this.createNode(key, null, options);\n        const v = this.createNode(value, null, options);\n        return new Pair(k, v);\n    }\n    /**\n     * Removes a value from the document.\n     * @returns `true` if the item was found and removed.\n     */\n    delete(key) {\n        return assertCollection(this.contents) ? this.contents.delete(key) : false;\n    }\n    /**\n     * Removes a value from the document.\n     * @returns `true` if the item was found and removed.\n     */\n    deleteIn(path) {\n        if (isEmptyPath(path)) {\n            if (this.contents == null)\n                return false;\n            // @ts-expect-error Presumed impossible if Strict extends false\n            this.contents = null;\n            return true;\n        }\n        return assertCollection(this.contents)\n            ? this.contents.deleteIn(path)\n            : false;\n    }\n    /**\n     * Returns item at `key`, or `undefined` if not found. By default unwraps\n     * scalar values from their surrounding node; to disable set `keepScalar` to\n     * `true` (collections are always returned intact).\n     */\n    get(key, keepScalar) {\n        return isCollection(this.contents)\n            ? this.contents.get(key, keepScalar)\n            : undefined;\n    }\n    /**\n     * Returns item at `path`, or `undefined` if not found. By default unwraps\n     * scalar values from their surrounding node; to disable set `keepScalar` to\n     * `true` (collections are always returned intact).\n     */\n    getIn(path, keepScalar) {\n        if (isEmptyPath(path))\n            return !keepScalar && isScalar(this.contents)\n                ? this.contents.value\n                : this.contents;\n        return isCollection(this.contents)\n            ? this.contents.getIn(path, keepScalar)\n            : undefined;\n    }\n    /**\n     * Checks if the document includes a value with the key `key`.\n     */\n    has(key) {\n        return isCollection(this.contents) ? this.contents.has(key) : false;\n    }\n    /**\n     * Checks if the document includes a value at `path`.\n     */\n    hasIn(path) {\n        if (isEmptyPath(path))\n            return this.contents !== undefined;\n        return isCollection(this.contents) ? this.contents.hasIn(path) : false;\n    }\n    /**\n     * Sets a value in this document. For `!!set`, `value` needs to be a\n     * boolean to add/remove the item from the set.\n     */\n    set(key, value) {\n        if (this.contents == null) {\n            // @ts-expect-error We can't really know that this matches Contents.\n            this.contents = collectionFromPath(this.schema, [key], value);\n        }\n        else if (assertCollection(this.contents)) {\n            this.contents.set(key, value);\n        }\n    }\n    /**\n     * Sets a value in this document. For `!!set`, `value` needs to be a\n     * boolean to add/remove the item from the set.\n     */\n    setIn(path, value) {\n        if (isEmptyPath(path)) {\n            // @ts-expect-error We can't really know that this matches Contents.\n            this.contents = value;\n        }\n        else if (this.contents == null) {\n            // @ts-expect-error We can't really know that this matches Contents.\n            this.contents = collectionFromPath(this.schema, Array.from(path), value);\n        }\n        else if (assertCollection(this.contents)) {\n            this.contents.setIn(path, value);\n        }\n    }\n    /**\n     * Change the YAML version and schema used by the document.\n     * A `null` version disables support for directives, explicit tags, anchors, and aliases.\n     * It also requires the `schema` option to be given as a `Schema` instance value.\n     *\n     * Overrides all previously set schema options.\n     */\n    setSchema(version, options = {}) {\n        if (typeof version === 'number')\n            version = String(version);\n        let opt;\n        switch (version) {\n            case '1.1':\n                if (this.directives)\n                    this.directives.yaml.version = '1.1';\n                else\n                    this.directives = new Directives({ version: '1.1' });\n                opt = { merge: true, resolveKnownTags: false, schema: 'yaml-1.1' };\n                break;\n            case '1.2':\n            case 'next':\n                if (this.directives)\n                    this.directives.yaml.version = version;\n                else\n                    this.directives = new Directives({ version });\n                opt = { merge: false, resolveKnownTags: true, schema: 'core' };\n                break;\n            case null:\n                if (this.directives)\n                    delete this.directives;\n                opt = null;\n                break;\n            default: {\n                const sv = JSON.stringify(version);\n                throw new Error(`Expected '1.1', '1.2' or null as first argument, but found: ${sv}`);\n            }\n        }\n        // Not using `instanceof Schema` to allow for duck typing\n        if (options.schema instanceof Object)\n            this.schema = options.schema;\n        else if (opt)\n            this.schema = new Schema(Object.assign(opt, options));\n        else\n            throw new Error(`With a null YAML version, the { schema: Schema } option is required`);\n    }\n    // json & jsonArg are only used from toJSON()\n    toJS({ json, jsonArg, mapAsMap, maxAliasCount, onAnchor, reviver } = {}) {\n        const ctx = {\n            anchors: new Map(),\n            doc: this,\n            keep: !json,\n            mapAsMap: mapAsMap === true,\n            mapKeyWarned: false,\n            maxAliasCount: typeof maxAliasCount === 'number' ? maxAliasCount : 100\n        };\n        const res = toJS(this.contents, jsonArg ?? '', ctx);\n        if (typeof onAnchor === 'function')\n            for (const { count, res } of ctx.anchors.values())\n                onAnchor(res, count);\n        return typeof reviver === 'function'\n            ? applyReviver(reviver, { '': res }, '', res)\n            : res;\n    }\n    /**\n     * A JSON representation of the document `contents`.\n     *\n     * @param jsonArg Used by `JSON.stringify` to indicate the array index or\n     *   property name.\n     */\n    toJSON(jsonArg, onAnchor) {\n        return this.toJS({ json: true, jsonArg, mapAsMap: false, onAnchor });\n    }\n    /** A YAML representation of the document. */\n    toString(options = {}) {\n        if (this.errors.length > 0)\n            throw new Error('Document with errors cannot be stringified');\n        if ('indent' in options &&\n            (!Number.isInteger(options.indent) || Number(options.indent) <= 0)) {\n            const s = JSON.stringify(options.indent);\n            throw new Error(`\"indent\" option must be a positive integer, not ${s}`);\n        }\n        return stringifyDocument(this, options);\n    }\n}\nfunction assertCollection(contents) {\n    if (isCollection(contents))\n        return true;\n    throw new Error('Expected a YAML collection as document contents');\n}\n\nexport { Document };\n","import { isNode } from '../nodes/identity.js';\nimport { createStringifyContext, stringify } from './stringify.js';\nimport { indentComment, lineComment } from './stringifyComment.js';\n\nfunction stringifyDocument(doc, options) {\n    const lines = [];\n    let hasDirectives = options.directives === true;\n    if (options.directives !== false && doc.directives) {\n        const dir = doc.directives.toString(doc);\n        if (dir) {\n            lines.push(dir);\n            hasDirectives = true;\n        }\n        else if (doc.directives.docStart)\n            hasDirectives = true;\n    }\n    if (hasDirectives)\n        lines.push('---');\n    const ctx = createStringifyContext(doc, options);\n    const { commentString } = ctx.options;\n    if (doc.commentBefore) {\n        if (lines.length !== 1)\n            lines.unshift('');\n        const cs = commentString(doc.commentBefore);\n        lines.unshift(indentComment(cs, ''));\n    }\n    let chompKeep = false;\n    let contentComment = null;\n    if (doc.contents) {\n        if (isNode(doc.contents)) {\n            if (doc.contents.spaceBefore && hasDirectives)\n                lines.push('');\n            if (doc.contents.commentBefore) {\n                const cs = commentString(doc.contents.commentBefore);\n                lines.push(indentComment(cs, ''));\n            }\n            // top-level block scalars need to be indented if followed by a comment\n            ctx.forceBlockIndent = !!doc.comment;\n            contentComment = doc.contents.comment;\n        }\n        const onChompKeep = contentComment ? undefined : () => (chompKeep = true);\n        let body = stringify(doc.contents, ctx, () => (contentComment = null), onChompKeep);\n        if (contentComment)\n            body += lineComment(body, '', commentString(contentComment));\n        if ((body[0] === '|' || body[0] === '>') &&\n            lines[lines.length - 1] === '---') {\n            // Top-level block scalars with a preceding doc marker ought to use the\n            // same line for their header.\n            lines[lines.length - 1] = `--- ${body}`;\n        }\n        else\n            lines.push(body);\n    }\n    else {\n        lines.push(stringify(doc.contents, ctx));\n    }\n    if (doc.directives?.docEnd) {\n        if (doc.comment) {\n            const cs = commentString(doc.comment);\n            if (cs.includes('\\n')) {\n                lines.push('...');\n                lines.push(indentComment(cs, ''));\n            }\n            else {\n                lines.push(`... ${cs}`);\n            }\n        }\n        else {\n            lines.push('...');\n        }\n    }\n    else {\n        let dc = doc.comment;\n        if (dc && chompKeep)\n            dc = dc.replace(/^\\n+/, '');\n        if (dc) {\n            if ((!chompKeep || contentComment) && lines[lines.length - 1] !== '')\n                lines.push('');\n            lines.push(indentComment(commentString(dc), ''));\n        }\n    }\n    return lines.join('\\n') + '\\n';\n}\n\nexport { stringifyDocument };\n","class YAMLError extends Error {\n    constructor(name, pos, code, message) {\n        super();\n        this.name = name;\n        this.code = code;\n        this.message = message;\n        this.pos = pos;\n    }\n}\nclass YAMLParseError extends YAMLError {\n    constructor(pos, code, message) {\n        super('YAMLParseError', pos, code, message);\n    }\n}\nclass YAMLWarning extends YAMLError {\n    constructor(pos, code, message) {\n        super('YAMLWarning', pos, code, message);\n    }\n}\nconst prettifyError = (src, lc) => (error) => {\n    if (error.pos[0] === -1)\n        return;\n    error.linePos = error.pos.map(pos => lc.linePos(pos));\n    const { line, col } = error.linePos[0];\n    error.message += ` at line ${line}, column ${col}`;\n    let ci = col - 1;\n    let lineStr = src\n        .substring(lc.lineStarts[line - 1], lc.lineStarts[line])\n        .replace(/[\\n\\r]+$/, '');\n    // Trim to max 80 chars, keeping col position near the middle\n    if (ci >= 60 && lineStr.length > 80) {\n        const trimStart = Math.min(ci - 39, lineStr.length - 79);\n        lineStr = '…' + lineStr.substring(trimStart);\n        ci -= trimStart - 1;\n    }\n    if (lineStr.length > 80)\n        lineStr = lineStr.substring(0, 79) + '…';\n    // Include previous line in context if pointing at line start\n    if (line > 1 && /^ *$/.test(lineStr.substring(0, ci))) {\n        // Regexp won't match if start is trimmed\n        let prev = src.substring(lc.lineStarts[line - 2], lc.lineStarts[line - 1]);\n        if (prev.length > 80)\n            prev = prev.substring(0, 79) + '…\\n';\n        lineStr = prev + lineStr;\n    }\n    if (/[^ ]/.test(lineStr)) {\n        let count = 1;\n        const end = error.linePos[1];\n        if (end && end.line === line && end.col > col) {\n            count = Math.max(1, Math.min(end.col - col, 80 - ci));\n        }\n        const pointer = ' '.repeat(ci) + '^'.repeat(count);\n        error.message += `:\\n\\n${lineStr}\\n${pointer}\\n`;\n    }\n};\n\nexport { YAMLError, YAMLParseError, YAMLWarning, prettifyError };\n","function resolveProps(tokens, { flow, indicator, next, offset, onError, startOnNewline }) {\n    let spaceBefore = false;\n    let atNewline = startOnNewline;\n    let hasSpace = startOnNewline;\n    let comment = '';\n    let commentSep = '';\n    let hasNewline = false;\n    let hasNewlineAfterProp = false;\n    let reqSpace = false;\n    let anchor = null;\n    let tag = null;\n    let comma = null;\n    let found = null;\n    let start = null;\n    for (const token of tokens) {\n        if (reqSpace) {\n            if (token.type !== 'space' &&\n                token.type !== 'newline' &&\n                token.type !== 'comma')\n                onError(token.offset, 'MISSING_CHAR', 'Tags and anchors must be separated from the next token by white space');\n            reqSpace = false;\n        }\n        switch (token.type) {\n            case 'space':\n                // At the doc level, tabs at line start may be parsed\n                // as leading white space rather than indentation.\n                // In a flow collection, only the parser handles indent.\n                if (!flow &&\n                    atNewline &&\n                    indicator !== 'doc-start' &&\n                    token.source[0] === '\\t')\n                    onError(token, 'TAB_AS_INDENT', 'Tabs are not allowed as indentation');\n                hasSpace = true;\n                break;\n            case 'comment': {\n                if (!hasSpace)\n                    onError(token, 'MISSING_CHAR', 'Comments must be separated from other tokens by white space characters');\n                const cb = token.source.substring(1) || ' ';\n                if (!comment)\n                    comment = cb;\n                else\n                    comment += commentSep + cb;\n                commentSep = '';\n                atNewline = false;\n                break;\n            }\n            case 'newline':\n                if (atNewline) {\n                    if (comment)\n                        comment += token.source;\n                    else\n                        spaceBefore = true;\n                }\n                else\n                    commentSep += token.source;\n                atNewline = true;\n                hasNewline = true;\n                if (anchor || tag)\n                    hasNewlineAfterProp = true;\n                hasSpace = true;\n                break;\n            case 'anchor':\n                if (anchor)\n                    onError(token, 'MULTIPLE_ANCHORS', 'A node can have at most one anchor');\n                if (token.source.endsWith(':'))\n                    onError(token.offset + token.source.length - 1, 'BAD_ALIAS', 'Anchor ending in : is ambiguous', true);\n                anchor = token;\n                if (start === null)\n                    start = token.offset;\n                atNewline = false;\n                hasSpace = false;\n                reqSpace = true;\n                break;\n            case 'tag': {\n                if (tag)\n                    onError(token, 'MULTIPLE_TAGS', 'A node can have at most one tag');\n                tag = token;\n                if (start === null)\n                    start = token.offset;\n                atNewline = false;\n                hasSpace = false;\n                reqSpace = true;\n                break;\n            }\n            case indicator:\n                // Could here handle preceding comments differently\n                if (anchor || tag)\n                    onError(token, 'BAD_PROP_ORDER', `Anchors and tags must be after the ${token.source} indicator`);\n                if (found)\n                    onError(token, 'UNEXPECTED_TOKEN', `Unexpected ${token.source} in ${flow ?? 'collection'}`);\n                found = token;\n                atNewline = false;\n                hasSpace = false;\n                break;\n            case 'comma':\n                if (flow) {\n                    if (comma)\n                        onError(token, 'UNEXPECTED_TOKEN', `Unexpected , in ${flow}`);\n                    comma = token;\n                    atNewline = false;\n                    hasSpace = false;\n                    break;\n                }\n            // else fallthrough\n            default:\n                onError(token, 'UNEXPECTED_TOKEN', `Unexpected ${token.type} token`);\n                atNewline = false;\n                hasSpace = false;\n        }\n    }\n    const last = tokens[tokens.length - 1];\n    const end = last ? last.offset + last.source.length : offset;\n    if (reqSpace &&\n        next &&\n        next.type !== 'space' &&\n        next.type !== 'newline' &&\n        next.type !== 'comma' &&\n        (next.type !== 'scalar' || next.source !== ''))\n        onError(next.offset, 'MISSING_CHAR', 'Tags and anchors must be separated from the next token by white space');\n    return {\n        comma,\n        found,\n        spaceBefore,\n        comment,\n        hasNewline,\n        hasNewlineAfterProp,\n        anchor,\n        tag,\n        end,\n        start: start ?? end\n    };\n}\n\nexport { resolveProps };\n","function containsNewline(key) {\n    if (!key)\n        return null;\n    switch (key.type) {\n        case 'alias':\n        case 'scalar':\n        case 'double-quoted-scalar':\n        case 'single-quoted-scalar':\n            if (key.source.includes('\\n'))\n                return true;\n            if (key.end)\n                for (const st of key.end)\n                    if (st.type === 'newline')\n                        return true;\n            return false;\n        case 'flow-collection':\n            for (const it of key.items) {\n                for (const st of it.start)\n                    if (st.type === 'newline')\n                        return true;\n                if (it.sep)\n                    for (const st of it.sep)\n                        if (st.type === 'newline')\n                            return true;\n                if (containsNewline(it.key) || containsNewline(it.value))\n                    return true;\n            }\n            return false;\n        default:\n            return true;\n    }\n}\n\nexport { containsNewline };\n","import { containsNewline } from './util-contains-newline.js';\n\nfunction flowIndentCheck(indent, fc, onError) {\n    if (fc?.type === 'flow-collection') {\n        const end = fc.end[0];\n        if (end.indent === indent &&\n            (end.source === ']' || end.source === '}') &&\n            containsNewline(fc)) {\n            const msg = 'Flow end indicator should be more indented than parent';\n            onError(end, 'BAD_INDENT', msg, true);\n        }\n    }\n}\n\nexport { flowIndentCheck };\n","import { isScalar } from '../nodes/identity.js';\n\nfunction mapIncludes(ctx, items, search) {\n    const { uniqueKeys } = ctx.options;\n    if (uniqueKeys === false)\n        return false;\n    const isEqual = typeof uniqueKeys === 'function'\n        ? uniqueKeys\n        : (a, b) => a === b ||\n            (isScalar(a) &&\n                isScalar(b) &&\n                a.value === b.value &&\n                !(a.value === '<<' && ctx.schema.merge));\n    return items.some(pair => isEqual(pair.key, search));\n}\n\nexport { mapIncludes };\n","import { Pair } from '../nodes/Pair.js';\nimport { YAMLMap } from '../nodes/YAMLMap.js';\nimport { resolveProps } from './resolve-props.js';\nimport { containsNewline } from './util-contains-newline.js';\nimport { flowIndentCheck } from './util-flow-indent-check.js';\nimport { mapIncludes } from './util-map-includes.js';\n\nconst startColMsg = 'All mapping items must start at the same column';\nfunction resolveBlockMap({ composeNode, composeEmptyNode }, ctx, bm, onError, tag) {\n    const NodeClass = tag?.nodeClass ?? YAMLMap;\n    const map = new NodeClass(ctx.schema);\n    if (ctx.atRoot)\n        ctx.atRoot = false;\n    let offset = bm.offset;\n    let commentEnd = null;\n    for (const collItem of bm.items) {\n        const { start, key, sep, value } = collItem;\n        // key properties\n        const keyProps = resolveProps(start, {\n            indicator: 'explicit-key-ind',\n            next: key ?? sep?.[0],\n            offset,\n            onError,\n            startOnNewline: true\n        });\n        const implicitKey = !keyProps.found;\n        if (implicitKey) {\n            if (key) {\n                if (key.type === 'block-seq')\n                    onError(offset, 'BLOCK_AS_IMPLICIT_KEY', 'A block sequence may not be used as an implicit map key');\n                else if ('indent' in key && key.indent !== bm.indent)\n                    onError(offset, 'BAD_INDENT', startColMsg);\n            }\n            if (!keyProps.anchor && !keyProps.tag && !sep) {\n                commentEnd = keyProps.end;\n                if (keyProps.comment) {\n                    if (map.comment)\n                        map.comment += '\\n' + keyProps.comment;\n                    else\n                        map.comment = keyProps.comment;\n                }\n                continue;\n            }\n            if (keyProps.hasNewlineAfterProp || containsNewline(key)) {\n                onError(key ?? start[start.length - 1], 'MULTILINE_IMPLICIT_KEY', 'Implicit keys need to be on a single line');\n            }\n        }\n        else if (keyProps.found?.indent !== bm.indent) {\n            onError(offset, 'BAD_INDENT', startColMsg);\n        }\n        // key value\n        const keyStart = keyProps.end;\n        const keyNode = key\n            ? composeNode(ctx, key, keyProps, onError)\n            : composeEmptyNode(ctx, keyStart, start, null, keyProps, onError);\n        if (ctx.schema.compat)\n            flowIndentCheck(bm.indent, key, onError);\n        if (mapIncludes(ctx, map.items, keyNode))\n            onError(keyStart, 'DUPLICATE_KEY', 'Map keys must be unique');\n        // value properties\n        const valueProps = resolveProps(sep ?? [], {\n            indicator: 'map-value-ind',\n            next: value,\n            offset: keyNode.range[2],\n            onError,\n            startOnNewline: !key || key.type === 'block-scalar'\n        });\n        offset = valueProps.end;\n        if (valueProps.found) {\n            if (implicitKey) {\n                if (value?.type === 'block-map' && !valueProps.hasNewline)\n                    onError(offset, 'BLOCK_AS_IMPLICIT_KEY', 'Nested mappings are not allowed in compact mappings');\n                if (ctx.options.strict &&\n                    keyProps.start < valueProps.found.offset - 1024)\n                    onError(keyNode.range, 'KEY_OVER_1024_CHARS', 'The : indicator must be at most 1024 chars after the start of an implicit block mapping key');\n            }\n            // value value\n            const valueNode = value\n                ? composeNode(ctx, value, valueProps, onError)\n                : composeEmptyNode(ctx, offset, sep, null, valueProps, onError);\n            if (ctx.schema.compat)\n                flowIndentCheck(bm.indent, value, onError);\n            offset = valueNode.range[2];\n            const pair = new Pair(keyNode, valueNode);\n            if (ctx.options.keepSourceTokens)\n                pair.srcToken = collItem;\n            map.items.push(pair);\n        }\n        else {\n            // key with no value\n            if (implicitKey)\n                onError(keyNode.range, 'MISSING_CHAR', 'Implicit map keys need to be followed by map values');\n            if (valueProps.comment) {\n                if (keyNode.comment)\n                    keyNode.comment += '\\n' + valueProps.comment;\n                else\n                    keyNode.comment = valueProps.comment;\n            }\n            const pair = new Pair(keyNode);\n            if (ctx.options.keepSourceTokens)\n                pair.srcToken = collItem;\n            map.items.push(pair);\n        }\n    }\n    if (commentEnd && commentEnd < offset)\n        onError(commentEnd, 'IMPOSSIBLE', 'Map comment with trailing content');\n    map.range = [bm.offset, offset, commentEnd ?? offset];\n    return map;\n}\n\nexport { resolveBlockMap };\n","function resolveEnd(end, offset, reqSpace, onError) {\n    let comment = '';\n    if (end) {\n        let hasSpace = false;\n        let sep = '';\n        for (const token of end) {\n            const { source, type } = token;\n            switch (type) {\n                case 'space':\n                    hasSpace = true;\n                    break;\n                case 'comment': {\n                    if (reqSpace && !hasSpace)\n                        onError(token, 'MISSING_CHAR', 'Comments must be separated from other tokens by white space characters');\n                    const cb = source.substring(1) || ' ';\n                    if (!comment)\n                        comment = cb;\n                    else\n                        comment += sep + cb;\n                    sep = '';\n                    break;\n                }\n                case 'newline':\n                    if (comment)\n                        sep += source;\n                    hasSpace = true;\n                    break;\n                default:\n                    onError(token, 'UNEXPECTED_TOKEN', `Unexpected ${type} at node end`);\n            }\n            offset += source.length;\n        }\n    }\n    return { comment, offset };\n}\n\nexport { resolveEnd };\n","import { isPair } from '../nodes/identity.js';\nimport { Pair } from '../nodes/Pair.js';\nimport { YAMLMap } from '../nodes/YAMLMap.js';\nimport { YAMLSeq } from '../nodes/YAMLSeq.js';\nimport { resolveEnd } from './resolve-end.js';\nimport { resolveProps } from './resolve-props.js';\nimport { containsNewline } from './util-contains-newline.js';\nimport { mapIncludes } from './util-map-includes.js';\n\nconst blockMsg = 'Block collections are not allowed within flow collections';\nconst isBlock = (token) => token && (token.type === 'block-map' || token.type === 'block-seq');\nfunction resolveFlowCollection({ composeNode, composeEmptyNode }, ctx, fc, onError, tag) {\n    const isMap = fc.start.source === '{';\n    const fcName = isMap ? 'flow map' : 'flow sequence';\n    const NodeClass = (tag?.nodeClass ?? (isMap ? YAMLMap : YAMLSeq));\n    const coll = new NodeClass(ctx.schema);\n    coll.flow = true;\n    const atRoot = ctx.atRoot;\n    if (atRoot)\n        ctx.atRoot = false;\n    let offset = fc.offset + fc.start.source.length;\n    for (let i = 0; i < fc.items.length; ++i) {\n        const collItem = fc.items[i];\n        const { start, key, sep, value } = collItem;\n        const props = resolveProps(start, {\n            flow: fcName,\n            indicator: 'explicit-key-ind',\n            next: key ?? sep?.[0],\n            offset,\n            onError,\n            startOnNewline: false\n        });\n        if (!props.found) {\n            if (!props.anchor && !props.tag && !sep && !value) {\n                if (i === 0 && props.comma)\n                    onError(props.comma, 'UNEXPECTED_TOKEN', `Unexpected , in ${fcName}`);\n                else if (i < fc.items.length - 1)\n                    onError(props.start, 'UNEXPECTED_TOKEN', `Unexpected empty item in ${fcName}`);\n                if (props.comment) {\n                    if (coll.comment)\n                        coll.comment += '\\n' + props.comment;\n                    else\n                        coll.comment = props.comment;\n                }\n                offset = props.end;\n                continue;\n            }\n            if (!isMap && ctx.options.strict && containsNewline(key))\n                onError(key, // checked by containsNewline()\n                'MULTILINE_IMPLICIT_KEY', 'Implicit keys of flow sequence pairs need to be on a single line');\n        }\n        if (i === 0) {\n            if (props.comma)\n                onError(props.comma, 'UNEXPECTED_TOKEN', `Unexpected , in ${fcName}`);\n        }\n        else {\n            if (!props.comma)\n                onError(props.start, 'MISSING_CHAR', `Missing , between ${fcName} items`);\n            if (props.comment) {\n                let prevItemComment = '';\n                loop: for (const st of start) {\n                    switch (st.type) {\n                        case 'comma':\n                        case 'space':\n                            break;\n                        case 'comment':\n                            prevItemComment = st.source.substring(1);\n                            break loop;\n                        default:\n                            break loop;\n                    }\n                }\n                if (prevItemComment) {\n                    let prev = coll.items[coll.items.length - 1];\n                    if (isPair(prev))\n                        prev = prev.value ?? prev.key;\n                    if (prev.comment)\n                        prev.comment += '\\n' + prevItemComment;\n                    else\n                        prev.comment = prevItemComment;\n                    props.comment = props.comment.substring(prevItemComment.length + 1);\n                }\n            }\n        }\n        if (!isMap && !sep && !props.found) {\n            // item is a value in a seq\n            // → key & sep are empty, start does not include ? or :\n            const valueNode = value\n                ? composeNode(ctx, value, props, onError)\n                : composeEmptyNode(ctx, props.end, sep, null, props, onError);\n            coll.items.push(valueNode);\n            offset = valueNode.range[2];\n            if (isBlock(value))\n                onError(valueNode.range, 'BLOCK_IN_FLOW', blockMsg);\n        }\n        else {\n            // item is a key+value pair\n            // key value\n            const keyStart = props.end;\n            const keyNode = key\n                ? composeNode(ctx, key, props, onError)\n                : composeEmptyNode(ctx, keyStart, start, null, props, onError);\n            if (isBlock(key))\n                onError(keyNode.range, 'BLOCK_IN_FLOW', blockMsg);\n            // value properties\n            const valueProps = resolveProps(sep ?? [], {\n                flow: fcName,\n                indicator: 'map-value-ind',\n                next: value,\n                offset: keyNode.range[2],\n                onError,\n                startOnNewline: false\n            });\n            if (valueProps.found) {\n                if (!isMap && !props.found && ctx.options.strict) {\n                    if (sep)\n                        for (const st of sep) {\n                            if (st === valueProps.found)\n                                break;\n                            if (st.type === 'newline') {\n                                onError(st, 'MULTILINE_IMPLICIT_KEY', 'Implicit keys of flow sequence pairs need to be on a single line');\n                                break;\n                            }\n                        }\n                    if (props.start < valueProps.found.offset - 1024)\n                        onError(valueProps.found, 'KEY_OVER_1024_CHARS', 'The : indicator must be at most 1024 chars after the start of an implicit flow sequence key');\n                }\n            }\n            else if (value) {\n                if ('source' in value && value.source && value.source[0] === ':')\n                    onError(value, 'MISSING_CHAR', `Missing space after : in ${fcName}`);\n                else\n                    onError(valueProps.start, 'MISSING_CHAR', `Missing , or : between ${fcName} items`);\n            }\n            // value value\n            const valueNode = value\n                ? composeNode(ctx, value, valueProps, onError)\n                : valueProps.found\n                    ? composeEmptyNode(ctx, valueProps.end, sep, null, valueProps, onError)\n                    : null;\n            if (valueNode) {\n                if (isBlock(value))\n                    onError(valueNode.range, 'BLOCK_IN_FLOW', blockMsg);\n            }\n            else if (valueProps.comment) {\n                if (keyNode.comment)\n                    keyNode.comment += '\\n' + valueProps.comment;\n                else\n                    keyNode.comment = valueProps.comment;\n            }\n            const pair = new Pair(keyNode, valueNode);\n            if (ctx.options.keepSourceTokens)\n                pair.srcToken = collItem;\n            if (isMap) {\n                const map = coll;\n                if (mapIncludes(ctx, map.items, keyNode))\n                    onError(keyStart, 'DUPLICATE_KEY', 'Map keys must be unique');\n                map.items.push(pair);\n            }\n            else {\n                const map = new YAMLMap(ctx.schema);\n                map.flow = true;\n                map.items.push(pair);\n                coll.items.push(map);\n            }\n            offset = valueNode ? valueNode.range[2] : valueProps.end;\n        }\n    }\n    const expectedEnd = isMap ? '}' : ']';\n    const [ce, ...ee] = fc.end;\n    let cePos = offset;\n    if (ce && ce.source === expectedEnd)\n        cePos = ce.offset + ce.source.length;\n    else {\n        const name = fcName[0].toUpperCase() + fcName.substring(1);\n        const msg = atRoot\n            ? `${name} must end with a ${expectedEnd}`\n            : `${name} in block collection must be sufficiently indented and end with a ${expectedEnd}`;\n        onError(offset, atRoot ? 'MISSING_CHAR' : 'BAD_INDENT', msg);\n        if (ce && ce.source.length !== 1)\n            ee.unshift(ce);\n    }\n    if (ee.length > 0) {\n        const end = resolveEnd(ee, cePos, ctx.options.strict, onError);\n        if (end.comment) {\n            if (coll.comment)\n                coll.comment += '\\n' + end.comment;\n            else\n                coll.comment = end.comment;\n        }\n        coll.range = [fc.offset, cePos, end.offset];\n    }\n    else {\n        coll.range = [fc.offset, cePos, cePos];\n    }\n    return coll;\n}\n\nexport { resolveFlowCollection };\n","import { isNode } from '../nodes/identity.js';\nimport { Scalar } from '../nodes/Scalar.js';\nimport { YAMLMap } from '../nodes/YAMLMap.js';\nimport { YAMLSeq } from '../nodes/YAMLSeq.js';\nimport { resolveBlockMap } from './resolve-block-map.js';\nimport { resolveBlockSeq } from './resolve-block-seq.js';\nimport { resolveFlowCollection } from './resolve-flow-collection.js';\n\nfunction resolveCollection(CN, ctx, token, onError, tagName, tag) {\n    const coll = token.type === 'block-map'\n        ? resolveBlockMap(CN, ctx, token, onError, tag)\n        : token.type === 'block-seq'\n            ? resolveBlockSeq(CN, ctx, token, onError, tag)\n            : resolveFlowCollection(CN, ctx, token, onError, tag);\n    const Coll = coll.constructor;\n    // If we got a tagName matching the class, or the tag name is '!',\n    // then use the tagName from the node class used to create it.\n    if (tagName === '!' || tagName === Coll.tagName) {\n        coll.tag = Coll.tagName;\n        return coll;\n    }\n    if (tagName)\n        coll.tag = tagName;\n    return coll;\n}\nfunction composeCollection(CN, ctx, token, tagToken, onError) {\n    const tagName = !tagToken\n        ? null\n        : ctx.directives.tagName(tagToken.source, msg => onError(tagToken, 'TAG_RESOLVE_FAILED', msg));\n    const expType = token.type === 'block-map'\n        ? 'map'\n        : token.type === 'block-seq'\n            ? 'seq'\n            : token.start.source === '{'\n                ? 'map'\n                : 'seq';\n    // shortcut: check if it's a generic YAMLMap or YAMLSeq\n    // before jumping into the custom tag logic.\n    if (!tagToken ||\n        !tagName ||\n        tagName === '!' ||\n        (tagName === YAMLMap.tagName && expType === 'map') ||\n        (tagName === YAMLSeq.tagName && expType === 'seq') ||\n        !expType) {\n        return resolveCollection(CN, ctx, token, onError, tagName);\n    }\n    let tag = ctx.schema.tags.find(t => t.tag === tagName && t.collection === expType);\n    if (!tag) {\n        const kt = ctx.schema.knownTags[tagName];\n        if (kt && kt.collection === expType) {\n            ctx.schema.tags.push(Object.assign({}, kt, { default: false }));\n            tag = kt;\n        }\n        else {\n            if (kt?.collection) {\n                onError(tagToken, 'BAD_COLLECTION_TYPE', `${kt.tag} used for ${expType} collection, but expects ${kt.collection}`, true);\n            }\n            else {\n                onError(tagToken, 'TAG_RESOLVE_FAILED', `Unresolved tag: ${tagName}`, true);\n            }\n            return resolveCollection(CN, ctx, token, onError, tagName);\n        }\n    }\n    const coll = resolveCollection(CN, ctx, token, onError, tagName, tag);\n    const res = tag.resolve?.(coll, msg => onError(tagToken, 'TAG_RESOLVE_FAILED', msg), ctx.options) ?? coll;\n    const node = isNode(res)\n        ? res\n        : new Scalar(res);\n    node.range = coll.range;\n    node.tag = tagName;\n    if (tag?.format)\n        node.format = tag.format;\n    return node;\n}\n\nexport { composeCollection };\n","import { YAMLSeq } from '../nodes/YAMLSeq.js';\nimport { resolveProps } from './resolve-props.js';\nimport { flowIndentCheck } from './util-flow-indent-check.js';\n\nfunction resolveBlockSeq({ composeNode, composeEmptyNode }, ctx, bs, onError, tag) {\n    const NodeClass = tag?.nodeClass ?? YAMLSeq;\n    const seq = new NodeClass(ctx.schema);\n    if (ctx.atRoot)\n        ctx.atRoot = false;\n    let offset = bs.offset;\n    let commentEnd = null;\n    for (const { start, value } of bs.items) {\n        const props = resolveProps(start, {\n            indicator: 'seq-item-ind',\n            next: value,\n            offset,\n            onError,\n            startOnNewline: true\n        });\n        if (!props.found) {\n            if (props.anchor || props.tag || value) {\n                if (value && value.type === 'block-seq')\n                    onError(props.end, 'BAD_INDENT', 'All sequence items must start at the same column');\n                else\n                    onError(offset, 'MISSING_CHAR', 'Sequence item without - indicator');\n            }\n            else {\n                commentEnd = props.end;\n                if (props.comment)\n                    seq.comment = props.comment;\n                continue;\n            }\n        }\n        const node = value\n            ? composeNode(ctx, value, props, onError)\n            : composeEmptyNode(ctx, props.end, start, null, props, onError);\n        if (ctx.schema.compat)\n            flowIndentCheck(bs.indent, value, onError);\n        offset = node.range[2];\n        seq.items.push(node);\n    }\n    seq.range = [bs.offset, offset, commentEnd ?? offset];\n    return seq;\n}\n\nexport { resolveBlockSeq };\n","import { Scalar } from '../nodes/Scalar.js';\n\nfunction resolveBlockScalar(scalar, strict, onError) {\n    const start = scalar.offset;\n    const header = parseBlockScalarHeader(scalar, strict, onError);\n    if (!header)\n        return { value: '', type: null, comment: '', range: [start, start, start] };\n    const type = header.mode === '>' ? Scalar.BLOCK_FOLDED : Scalar.BLOCK_LITERAL;\n    const lines = scalar.source ? splitLines(scalar.source) : [];\n    // determine the end of content & start of chomping\n    let chompStart = lines.length;\n    for (let i = lines.length - 1; i >= 0; --i) {\n        const content = lines[i][1];\n        if (content === '' || content === '\\r')\n            chompStart = i;\n        else\n            break;\n    }\n    // shortcut for empty contents\n    if (chompStart === 0) {\n        const value = header.chomp === '+' && lines.length > 0\n            ? '\\n'.repeat(Math.max(1, lines.length - 1))\n            : '';\n        let end = start + header.length;\n        if (scalar.source)\n            end += scalar.source.length;\n        return { value, type, comment: header.comment, range: [start, end, end] };\n    }\n    // find the indentation level to trim from start\n    let trimIndent = scalar.indent + header.indent;\n    let offset = scalar.offset + header.length;\n    let contentStart = 0;\n    for (let i = 0; i < chompStart; ++i) {\n        const [indent, content] = lines[i];\n        if (content === '' || content === '\\r') {\n            if (header.indent === 0 && indent.length > trimIndent)\n                trimIndent = indent.length;\n        }\n        else {\n            if (indent.length < trimIndent) {\n                const message = 'Block scalars with more-indented leading empty lines must use an explicit indentation indicator';\n                onError(offset + indent.length, 'MISSING_CHAR', message);\n            }\n            if (header.indent === 0)\n                trimIndent = indent.length;\n            contentStart = i;\n            break;\n        }\n        offset += indent.length + content.length + 1;\n    }\n    // include trailing more-indented empty lines in content\n    for (let i = lines.length - 1; i >= chompStart; --i) {\n        if (lines[i][0].length > trimIndent)\n            chompStart = i + 1;\n    }\n    let value = '';\n    let sep = '';\n    let prevMoreIndented = false;\n    // leading whitespace is kept intact\n    for (let i = 0; i < contentStart; ++i)\n        value += lines[i][0].slice(trimIndent) + '\\n';\n    for (let i = contentStart; i < chompStart; ++i) {\n        let [indent, content] = lines[i];\n        offset += indent.length + content.length + 1;\n        const crlf = content[content.length - 1] === '\\r';\n        if (crlf)\n            content = content.slice(0, -1);\n        /* istanbul ignore if already caught in lexer */\n        if (content && indent.length < trimIndent) {\n            const src = header.indent\n                ? 'explicit indentation indicator'\n                : 'first line';\n            const message = `Block scalar lines must not be less indented than their ${src}`;\n            onError(offset - content.length - (crlf ? 2 : 1), 'BAD_INDENT', message);\n            indent = '';\n        }\n        if (type === Scalar.BLOCK_LITERAL) {\n            value += sep + indent.slice(trimIndent) + content;\n            sep = '\\n';\n        }\n        else if (indent.length > trimIndent || content[0] === '\\t') {\n            // more-indented content within a folded block\n            if (sep === ' ')\n                sep = '\\n';\n            else if (!prevMoreIndented && sep === '\\n')\n                sep = '\\n\\n';\n            value += sep + indent.slice(trimIndent) + content;\n            sep = '\\n';\n            prevMoreIndented = true;\n        }\n        else if (content === '') {\n            // empty line\n            if (sep === '\\n')\n                value += '\\n';\n            else\n                sep = '\\n';\n        }\n        else {\n            value += sep + content;\n            sep = ' ';\n            prevMoreIndented = false;\n        }\n    }\n    switch (header.chomp) {\n        case '-':\n            break;\n        case '+':\n            for (let i = chompStart; i < lines.length; ++i)\n                value += '\\n' + lines[i][0].slice(trimIndent);\n            if (value[value.length - 1] !== '\\n')\n                value += '\\n';\n            break;\n        default:\n            value += '\\n';\n    }\n    const end = start + header.length + scalar.source.length;\n    return { value, type, comment: header.comment, range: [start, end, end] };\n}\nfunction parseBlockScalarHeader({ offset, props }, strict, onError) {\n    /* istanbul ignore if should not happen */\n    if (props[0].type !== 'block-scalar-header') {\n        onError(props[0], 'IMPOSSIBLE', 'Block scalar header not found');\n        return null;\n    }\n    const { source } = props[0];\n    const mode = source[0];\n    let indent = 0;\n    let chomp = '';\n    let error = -1;\n    for (let i = 1; i < source.length; ++i) {\n        const ch = source[i];\n        if (!chomp && (ch === '-' || ch === '+'))\n            chomp = ch;\n        else {\n            const n = Number(ch);\n            if (!indent && n)\n                indent = n;\n            else if (error === -1)\n                error = offset + i;\n        }\n    }\n    if (error !== -1)\n        onError(error, 'UNEXPECTED_TOKEN', `Block scalar header includes extra characters: ${source}`);\n    let hasSpace = false;\n    let comment = '';\n    let length = source.length;\n    for (let i = 1; i < props.length; ++i) {\n        const token = props[i];\n        switch (token.type) {\n            case 'space':\n                hasSpace = true;\n            // fallthrough\n            case 'newline':\n                length += token.source.length;\n                break;\n            case 'comment':\n                if (strict && !hasSpace) {\n                    const message = 'Comments must be separated from other tokens by white space characters';\n                    onError(token, 'MISSING_CHAR', message);\n                }\n                length += token.source.length;\n                comment = token.source.substring(1);\n                break;\n            case 'error':\n                onError(token, 'UNEXPECTED_TOKEN', token.message);\n                length += token.source.length;\n                break;\n            /* istanbul ignore next should not happen */\n            default: {\n                const message = `Unexpected token in block scalar header: ${token.type}`;\n                onError(token, 'UNEXPECTED_TOKEN', message);\n                const ts = token.source;\n                if (ts && typeof ts === 'string')\n                    length += ts.length;\n            }\n        }\n    }\n    return { mode, indent, chomp, comment, length };\n}\n/** @returns Array of lines split up as `[indent, content]` */\nfunction splitLines(source) {\n    const split = source.split(/\\n( *)/);\n    const first = split[0];\n    const m = first.match(/^( *)/);\n    const line0 = m?.[1]\n        ? [m[1], first.slice(m[1].length)]\n        : ['', first];\n    const lines = [line0];\n    for (let i = 1; i < split.length; i += 2)\n        lines.push([split[i], split[i + 1]]);\n    return lines;\n}\n\nexport { resolveBlockScalar };\n","import { Scalar } from '../nodes/Scalar.js';\nimport { resolveEnd } from './resolve-end.js';\n\nfunction resolveFlowScalar(scalar, strict, onError) {\n    const { offset, type, source, end } = scalar;\n    let _type;\n    let value;\n    const _onError = (rel, code, msg) => onError(offset + rel, code, msg);\n    switch (type) {\n        case 'scalar':\n            _type = Scalar.PLAIN;\n            value = plainValue(source, _onError);\n            break;\n        case 'single-quoted-scalar':\n            _type = Scalar.QUOTE_SINGLE;\n            value = singleQuotedValue(source, _onError);\n            break;\n        case 'double-quoted-scalar':\n            _type = Scalar.QUOTE_DOUBLE;\n            value = doubleQuotedValue(source, _onError);\n            break;\n        /* istanbul ignore next should not happen */\n        default:\n            onError(scalar, 'UNEXPECTED_TOKEN', `Expected a flow scalar value, but found: ${type}`);\n            return {\n                value: '',\n                type: null,\n                comment: '',\n                range: [offset, offset + source.length, offset + source.length]\n            };\n    }\n    const valueEnd = offset + source.length;\n    const re = resolveEnd(end, valueEnd, strict, onError);\n    return {\n        value,\n        type: _type,\n        comment: re.comment,\n        range: [offset, valueEnd, re.offset]\n    };\n}\nfunction plainValue(source, onError) {\n    let badChar = '';\n    switch (source[0]) {\n        /* istanbul ignore next should not happen */\n        case '\\t':\n            badChar = 'a tab character';\n            break;\n        case ',':\n            badChar = 'flow indicator character ,';\n            break;\n        case '%':\n            badChar = 'directive indicator character %';\n            break;\n        case '|':\n        case '>': {\n            badChar = `block scalar indicator ${source[0]}`;\n            break;\n        }\n        case '@':\n        case '`': {\n            badChar = `reserved character ${source[0]}`;\n            break;\n        }\n    }\n    if (badChar)\n        onError(0, 'BAD_SCALAR_START', `Plain value cannot start with ${badChar}`);\n    return foldLines(source);\n}\nfunction singleQuotedValue(source, onError) {\n    if (source[source.length - 1] !== \"'\" || source.length === 1)\n        onError(source.length, 'MISSING_CHAR', \"Missing closing 'quote\");\n    return foldLines(source.slice(1, -1)).replace(/''/g, \"'\");\n}\nfunction foldLines(source) {\n    /**\n     * The negative lookbehind here and in the `re` RegExp is to\n     * prevent causing a polynomial search time in certain cases.\n     *\n     * The try-catch is for Safari, which doesn't support this yet:\n     * https://caniuse.com/js-regexp-lookbehind\n     */\n    let first, line;\n    try {\n        first = new RegExp('(.*?)(?<![ \\t])[ \\t]*\\r?\\n', 'sy');\n        line = new RegExp('[ \\t]*(.*?)(?:(?<![ \\t])[ \\t]*)?\\r?\\n', 'sy');\n    }\n    catch (_) {\n        first = /(.*?)[ \\t]*\\r?\\n/sy;\n        line = /[ \\t]*(.*?)[ \\t]*\\r?\\n/sy;\n    }\n    let match = first.exec(source);\n    if (!match)\n        return source;\n    let res = match[1];\n    let sep = ' ';\n    let pos = first.lastIndex;\n    line.lastIndex = pos;\n    while ((match = line.exec(source))) {\n        if (match[1] === '') {\n            if (sep === '\\n')\n                res += sep;\n            else\n                sep = '\\n';\n        }\n        else {\n            res += sep + match[1];\n            sep = ' ';\n        }\n        pos = line.lastIndex;\n    }\n    const last = /[ \\t]*(.*)/sy;\n    last.lastIndex = pos;\n    match = last.exec(source);\n    return res + sep + (match?.[1] ?? '');\n}\nfunction doubleQuotedValue(source, onError) {\n    let res = '';\n    for (let i = 1; i < source.length - 1; ++i) {\n        const ch = source[i];\n        if (ch === '\\r' && source[i + 1] === '\\n')\n            continue;\n        if (ch === '\\n') {\n            const { fold, offset } = foldNewline(source, i);\n            res += fold;\n            i = offset;\n        }\n        else if (ch === '\\\\') {\n            let next = source[++i];\n            const cc = escapeCodes[next];\n            if (cc)\n                res += cc;\n            else if (next === '\\n') {\n                // skip escaped newlines, but still trim the following line\n                next = source[i + 1];\n                while (next === ' ' || next === '\\t')\n                    next = source[++i + 1];\n            }\n            else if (next === '\\r' && source[i + 1] === '\\n') {\n                // skip escaped CRLF newlines, but still trim the following line\n                next = source[++i + 1];\n                while (next === ' ' || next === '\\t')\n                    next = source[++i + 1];\n            }\n            else if (next === 'x' || next === 'u' || next === 'U') {\n                const length = { x: 2, u: 4, U: 8 }[next];\n                res += parseCharCode(source, i + 1, length, onError);\n                i += length;\n            }\n            else {\n                const raw = source.substr(i - 1, 2);\n                onError(i - 1, 'BAD_DQ_ESCAPE', `Invalid escape sequence ${raw}`);\n                res += raw;\n            }\n        }\n        else if (ch === ' ' || ch === '\\t') {\n            // trim trailing whitespace\n            const wsStart = i;\n            let next = source[i + 1];\n            while (next === ' ' || next === '\\t')\n                next = source[++i + 1];\n            if (next !== '\\n' && !(next === '\\r' && source[i + 2] === '\\n'))\n                res += i > wsStart ? source.slice(wsStart, i + 1) : ch;\n        }\n        else {\n            res += ch;\n        }\n    }\n    if (source[source.length - 1] !== '\"' || source.length === 1)\n        onError(source.length, 'MISSING_CHAR', 'Missing closing \"quote');\n    return res;\n}\n/**\n * Fold a single newline into a space, multiple newlines to N - 1 newlines.\n * Presumes `source[offset] === '\\n'`\n */\nfunction foldNewline(source, offset) {\n    let fold = '';\n    let ch = source[offset + 1];\n    while (ch === ' ' || ch === '\\t' || ch === '\\n' || ch === '\\r') {\n        if (ch === '\\r' && source[offset + 2] !== '\\n')\n            break;\n        if (ch === '\\n')\n            fold += '\\n';\n        offset += 1;\n        ch = source[offset + 1];\n    }\n    if (!fold)\n        fold = ' ';\n    return { fold, offset };\n}\nconst escapeCodes = {\n    '0': '\\0', // null character\n    a: '\\x07', // bell character\n    b: '\\b', // backspace\n    e: '\\x1b', // escape character\n    f: '\\f', // form feed\n    n: '\\n', // line feed\n    r: '\\r', // carriage return\n    t: '\\t', // horizontal tab\n    v: '\\v', // vertical tab\n    N: '\\u0085', // Unicode next line\n    _: '\\u00a0', // Unicode non-breaking space\n    L: '\\u2028', // Unicode line separator\n    P: '\\u2029', // Unicode paragraph separator\n    ' ': ' ',\n    '\"': '\"',\n    '/': '/',\n    '\\\\': '\\\\',\n    '\\t': '\\t'\n};\nfunction parseCharCode(source, offset, length, onError) {\n    const cc = source.substr(offset, length);\n    const ok = cc.length === length && /^[0-9a-fA-F]+$/.test(cc);\n    const code = ok ? parseInt(cc, 16) : NaN;\n    if (isNaN(code)) {\n        const raw = source.substr(offset - 2, length + 2);\n        onError(offset - 2, 'BAD_DQ_ESCAPE', `Invalid escape sequence ${raw}`);\n        return raw;\n    }\n    return String.fromCodePoint(code);\n}\n\nexport { resolveFlowScalar };\n","import { SCALAR, isScalar } from '../nodes/identity.js';\nimport { Scalar } from '../nodes/Scalar.js';\nimport { resolveBlockScalar } from './resolve-block-scalar.js';\nimport { resolveFlowScalar } from './resolve-flow-scalar.js';\n\nfunction composeScalar(ctx, token, tagToken, onError) {\n    const { value, type, comment, range } = token.type === 'block-scalar'\n        ? resolveBlockScalar(token, ctx.options.strict, onError)\n        : resolveFlowScalar(token, ctx.options.strict, onError);\n    const tagName = tagToken\n        ? ctx.directives.tagName(tagToken.source, msg => onError(tagToken, 'TAG_RESOLVE_FAILED', msg))\n        : null;\n    const tag = tagToken && tagName\n        ? findScalarTagByName(ctx.schema, value, tagName, tagToken, onError)\n        : token.type === 'scalar'\n            ? findScalarTagByTest(ctx, value, token, onError)\n            : ctx.schema[SCALAR];\n    let scalar;\n    try {\n        const res = tag.resolve(value, msg => onError(tagToken ?? token, 'TAG_RESOLVE_FAILED', msg), ctx.options);\n        scalar = isScalar(res) ? res : new Scalar(res);\n    }\n    catch (error) {\n        const msg = error instanceof Error ? error.message : String(error);\n        onError(tagToken ?? token, 'TAG_RESOLVE_FAILED', msg);\n        scalar = new Scalar(value);\n    }\n    scalar.range = range;\n    scalar.source = value;\n    if (type)\n        scalar.type = type;\n    if (tagName)\n        scalar.tag = tagName;\n    if (tag.format)\n        scalar.format = tag.format;\n    if (comment)\n        scalar.comment = comment;\n    return scalar;\n}\nfunction findScalarTagByName(schema, value, tagName, tagToken, onError) {\n    if (tagName === '!')\n        return schema[SCALAR]; // non-specific tag\n    const matchWithTest = [];\n    for (const tag of schema.tags) {\n        if (!tag.collection && tag.tag === tagName) {\n            if (tag.default && tag.test)\n                matchWithTest.push(tag);\n            else\n                return tag;\n        }\n    }\n    for (const tag of matchWithTest)\n        if (tag.test?.test(value))\n            return tag;\n    const kt = schema.knownTags[tagName];\n    if (kt && !kt.collection) {\n        // Ensure that the known tag is available for stringifying,\n        // but does not get used by default.\n        schema.tags.push(Object.assign({}, kt, { default: false, test: undefined }));\n        return kt;\n    }\n    onError(tagToken, 'TAG_RESOLVE_FAILED', `Unresolved tag: ${tagName}`, tagName !== 'tag:yaml.org,2002:str');\n    return schema[SCALAR];\n}\nfunction findScalarTagByTest({ directives, schema }, value, token, onError) {\n    const tag = schema.tags.find(tag => tag.default && tag.test?.test(value)) || schema[SCALAR];\n    if (schema.compat) {\n        const compat = schema.compat.find(tag => tag.default && tag.test?.test(value)) ??\n            schema[SCALAR];\n        if (tag.tag !== compat.tag) {\n            const ts = directives.tagString(tag.tag);\n            const cs = directives.tagString(compat.tag);\n            const msg = `Value may be parsed as either ${ts} or ${cs}`;\n            onError(token, 'TAG_RESOLVE_FAILED', msg, true);\n        }\n    }\n    return tag;\n}\n\nexport { composeScalar };\n","function emptyScalarPosition(offset, before, pos) {\n    if (before) {\n        if (pos === null)\n            pos = before.length;\n        for (let i = pos - 1; i >= 0; --i) {\n            let st = before[i];\n            switch (st.type) {\n                case 'space':\n                case 'comment':\n                case 'newline':\n                    offset -= st.source.length;\n                    continue;\n            }\n            // Technically, an empty scalar is immediately after the last non-empty\n            // node, but it's more useful to place it after any whitespace.\n            st = before[++i];\n            while (st?.type === 'space') {\n                offset += st.source.length;\n                st = before[++i];\n            }\n            break;\n        }\n    }\n    return offset;\n}\n\nexport { emptyScalarPosition };\n","import { Alias } from '../nodes/Alias.js';\nimport { composeCollection } from './compose-collection.js';\nimport { composeScalar } from './compose-scalar.js';\nimport { resolveEnd } from './resolve-end.js';\nimport { emptyScalarPosition } from './util-empty-scalar-position.js';\n\nconst CN = { composeNode, composeEmptyNode };\nfunction composeNode(ctx, token, props, onError) {\n    const { spaceBefore, comment, anchor, tag } = props;\n    let node;\n    let isSrcToken = true;\n    switch (token.type) {\n        case 'alias':\n            node = composeAlias(ctx, token, onError);\n            if (anchor || tag)\n                onError(token, 'ALIAS_PROPS', 'An alias node must not specify any properties');\n            break;\n        case 'scalar':\n        case 'single-quoted-scalar':\n        case 'double-quoted-scalar':\n        case 'block-scalar':\n            node = composeScalar(ctx, token, tag, onError);\n            if (anchor)\n                node.anchor = anchor.source.substring(1);\n            break;\n        case 'block-map':\n        case 'block-seq':\n        case 'flow-collection':\n            node = composeCollection(CN, ctx, token, tag, onError);\n            if (anchor)\n                node.anchor = anchor.source.substring(1);\n            break;\n        default: {\n            const message = token.type === 'error'\n                ? token.message\n                : `Unsupported token (type: ${token.type})`;\n            onError(token, 'UNEXPECTED_TOKEN', message);\n            node = composeEmptyNode(ctx, token.offset, undefined, null, props, onError);\n            isSrcToken = false;\n        }\n    }\n    if (anchor && node.anchor === '')\n        onError(anchor, 'BAD_ALIAS', 'Anchor cannot be an empty string');\n    if (spaceBefore)\n        node.spaceBefore = true;\n    if (comment) {\n        if (token.type === 'scalar' && token.source === '')\n            node.comment = comment;\n        else\n            node.commentBefore = comment;\n    }\n    // @ts-expect-error Type checking misses meaning of isSrcToken\n    if (ctx.options.keepSourceTokens && isSrcToken)\n        node.srcToken = token;\n    return node;\n}\nfunction composeEmptyNode(ctx, offset, before, pos, { spaceBefore, comment, anchor, tag, end }, onError) {\n    const token = {\n        type: 'scalar',\n        offset: emptyScalarPosition(offset, before, pos),\n        indent: -1,\n        source: ''\n    };\n    const node = composeScalar(ctx, token, tag, onError);\n    if (anchor) {\n        node.anchor = anchor.source.substring(1);\n        if (node.anchor === '')\n            onError(anchor, 'BAD_ALIAS', 'Anchor cannot be an empty string');\n    }\n    if (spaceBefore)\n        node.spaceBefore = true;\n    if (comment) {\n        node.comment = comment;\n        node.range[2] = end;\n    }\n    return node;\n}\nfunction composeAlias({ options }, { offset, source, end }, onError) {\n    const alias = new Alias(source.substring(1));\n    if (alias.source === '')\n        onError(offset, 'BAD_ALIAS', 'Alias cannot be an empty string');\n    if (alias.source.endsWith(':'))\n        onError(offset + source.length - 1, 'BAD_ALIAS', 'Alias ending in : is ambiguous', true);\n    const valueEnd = offset + source.length;\n    const re = resolveEnd(end, valueEnd, options.strict, onError);\n    alias.range = [offset, valueEnd, re.offset];\n    if (re.comment)\n        alias.comment = re.comment;\n    return alias;\n}\n\nexport { composeEmptyNode, composeNode };\n","import { Directives } from '../doc/directives.js';\nimport { Document } from '../doc/Document.js';\nimport { YAMLWarning, YAMLParseError } from '../errors.js';\nimport { isCollection, isPair } from '../nodes/identity.js';\nimport { composeDoc } from './compose-doc.js';\nimport { resolveEnd } from './resolve-end.js';\n\nfunction getErrorPos(src) {\n    if (typeof src === 'number')\n        return [src, src + 1];\n    if (Array.isArray(src))\n        return src.length === 2 ? src : [src[0], src[1]];\n    const { offset, source } = src;\n    return [offset, offset + (typeof source === 'string' ? source.length : 1)];\n}\nfunction parsePrelude(prelude) {\n    let comment = '';\n    let atComment = false;\n    let afterEmptyLine = false;\n    for (let i = 0; i < prelude.length; ++i) {\n        const source = prelude[i];\n        switch (source[0]) {\n            case '#':\n                comment +=\n                    (comment === '' ? '' : afterEmptyLine ? '\\n\\n' : '\\n') +\n                        (source.substring(1) || ' ');\n                atComment = true;\n                afterEmptyLine = false;\n                break;\n            case '%':\n                if (prelude[i + 1]?.[0] !== '#')\n                    i += 1;\n                atComment = false;\n                break;\n            default:\n                // This may be wrong after doc-end, but in that case it doesn't matter\n                if (!atComment)\n                    afterEmptyLine = true;\n                atComment = false;\n        }\n    }\n    return { comment, afterEmptyLine };\n}\n/**\n * Compose a stream of CST nodes into a stream of YAML Documents.\n *\n * ```ts\n * import { Composer, Parser } from 'yaml'\n *\n * const src: string = ...\n * const tokens = new Parser().parse(src)\n * const docs = new Composer().compose(tokens)\n * ```\n */\nclass Composer {\n    constructor(options = {}) {\n        this.doc = null;\n        this.atDirectives = false;\n        this.prelude = [];\n        this.errors = [];\n        this.warnings = [];\n        this.onError = (source, code, message, warning) => {\n            const pos = getErrorPos(source);\n            if (warning)\n                this.warnings.push(new YAMLWarning(pos, code, message));\n            else\n                this.errors.push(new YAMLParseError(pos, code, message));\n        };\n        // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n        this.directives = new Directives({ version: options.version || '1.2' });\n        this.options = options;\n    }\n    decorate(doc, afterDoc) {\n        const { comment, afterEmptyLine } = parsePrelude(this.prelude);\n        //console.log({ dc: doc.comment, prelude, comment })\n        if (comment) {\n            const dc = doc.contents;\n            if (afterDoc) {\n                doc.comment = doc.comment ? `${doc.comment}\\n${comment}` : comment;\n            }\n            else if (afterEmptyLine || doc.directives.docStart || !dc) {\n                doc.commentBefore = comment;\n            }\n            else if (isCollection(dc) && !dc.flow && dc.items.length > 0) {\n                let it = dc.items[0];\n                if (isPair(it))\n                    it = it.key;\n                const cb = it.commentBefore;\n                it.commentBefore = cb ? `${comment}\\n${cb}` : comment;\n            }\n            else {\n                const cb = dc.commentBefore;\n                dc.commentBefore = cb ? `${comment}\\n${cb}` : comment;\n            }\n        }\n        if (afterDoc) {\n            Array.prototype.push.apply(doc.errors, this.errors);\n            Array.prototype.push.apply(doc.warnings, this.warnings);\n        }\n        else {\n            doc.errors = this.errors;\n            doc.warnings = this.warnings;\n        }\n        this.prelude = [];\n        this.errors = [];\n        this.warnings = [];\n    }\n    /**\n     * Current stream status information.\n     *\n     * Mostly useful at the end of input for an empty stream.\n     */\n    streamInfo() {\n        return {\n            comment: parsePrelude(this.prelude).comment,\n            directives: this.directives,\n            errors: this.errors,\n            warnings: this.warnings\n        };\n    }\n    /**\n     * Compose tokens into documents.\n     *\n     * @param forceDoc - If the stream contains no document, still emit a final document including any comments and directives that would be applied to a subsequent document.\n     * @param endOffset - Should be set if `forceDoc` is also set, to set the document range end and to indicate errors correctly.\n     */\n    *compose(tokens, forceDoc = false, endOffset = -1) {\n        for (const token of tokens)\n            yield* this.next(token);\n        yield* this.end(forceDoc, endOffset);\n    }\n    /** Advance the composer by one CST token. */\n    *next(token) {\n        switch (token.type) {\n            case 'directive':\n                this.directives.add(token.source, (offset, message, warning) => {\n                    const pos = getErrorPos(token);\n                    pos[0] += offset;\n                    this.onError(pos, 'BAD_DIRECTIVE', message, warning);\n                });\n                this.prelude.push(token.source);\n                this.atDirectives = true;\n                break;\n            case 'document': {\n                const doc = composeDoc(this.options, this.directives, token, this.onError);\n                if (this.atDirectives && !doc.directives.docStart)\n                    this.onError(token, 'MISSING_CHAR', 'Missing directives-end/doc-start indicator line');\n                this.decorate(doc, false);\n                if (this.doc)\n                    yield this.doc;\n                this.doc = doc;\n                this.atDirectives = false;\n                break;\n            }\n            case 'byte-order-mark':\n            case 'space':\n                break;\n            case 'comment':\n            case 'newline':\n                this.prelude.push(token.source);\n                break;\n            case 'error': {\n                const msg = token.source\n                    ? `${token.message}: ${JSON.stringify(token.source)}`\n                    : token.message;\n                const error = new YAMLParseError(getErrorPos(token), 'UNEXPECTED_TOKEN', msg);\n                if (this.atDirectives || !this.doc)\n                    this.errors.push(error);\n                else\n                    this.doc.errors.push(error);\n                break;\n            }\n            case 'doc-end': {\n                if (!this.doc) {\n                    const msg = 'Unexpected doc-end without preceding document';\n                    this.errors.push(new YAMLParseError(getErrorPos(token), 'UNEXPECTED_TOKEN', msg));\n                    break;\n                }\n                this.doc.directives.docEnd = true;\n                const end = resolveEnd(token.end, token.offset + token.source.length, this.doc.options.strict, this.onError);\n                this.decorate(this.doc, true);\n                if (end.comment) {\n                    const dc = this.doc.comment;\n                    this.doc.comment = dc ? `${dc}\\n${end.comment}` : end.comment;\n                }\n                this.doc.range[2] = end.offset;\n                break;\n            }\n            default:\n                this.errors.push(new YAMLParseError(getErrorPos(token), 'UNEXPECTED_TOKEN', `Unsupported token ${token.type}`));\n        }\n    }\n    /**\n     * Call at end of input to yield any remaining document.\n     *\n     * @param forceDoc - If the stream contains no document, still emit a final document including any comments and directives that would be applied to a subsequent document.\n     * @param endOffset - Should be set if `forceDoc` is also set, to set the document range end and to indicate errors correctly.\n     */\n    *end(forceDoc = false, endOffset = -1) {\n        if (this.doc) {\n            this.decorate(this.doc, true);\n            yield this.doc;\n            this.doc = null;\n        }\n        else if (forceDoc) {\n            const opts = Object.assign({ _directives: this.directives }, this.options);\n            const doc = new Document(undefined, opts);\n            if (this.atDirectives)\n                this.onError(endOffset, 'MISSING_CHAR', 'Missing directives-end indicator line');\n            doc.range = [0, endOffset, endOffset];\n            this.decorate(doc, false);\n            yield doc;\n        }\n    }\n}\n\nexport { Composer };\n","import { Document } from '../doc/Document.js';\nimport { composeNode, composeEmptyNode } from './compose-node.js';\nimport { resolveEnd } from './resolve-end.js';\nimport { resolveProps } from './resolve-props.js';\n\nfunction composeDoc(options, directives, { offset, start, value, end }, onError) {\n    const opts = Object.assign({ _directives: directives }, options);\n    const doc = new Document(undefined, opts);\n    const ctx = {\n        atRoot: true,\n        directives: doc.directives,\n        options: doc.options,\n        schema: doc.schema\n    };\n    const props = resolveProps(start, {\n        indicator: 'doc-start',\n        next: value ?? end?.[0],\n        offset,\n        onError,\n        startOnNewline: true\n    });\n    if (props.found) {\n        doc.directives.docStart = true;\n        if (value &&\n            (value.type === 'block-map' || value.type === 'block-seq') &&\n            !props.hasNewline)\n            onError(props.end, 'MISSING_CHAR', 'Block collection cannot start on same line with directives-end marker');\n    }\n    // @ts-expect-error If Contents is set, let's trust the user\n    doc.contents = value\n        ? composeNode(ctx, value, props, onError)\n        : composeEmptyNode(ctx, props.end, start, null, props, onError);\n    const contentEnd = doc.contents.range[2];\n    const re = resolveEnd(end, contentEnd, false, onError);\n    if (re.comment)\n        doc.comment = re.comment;\n    doc.range = [offset, contentEnd, re.offset];\n    return doc;\n}\n\nexport { composeDoc };\n","import { resolveBlockScalar } from '../compose/resolve-block-scalar.js';\nimport { resolveFlowScalar } from '../compose/resolve-flow-scalar.js';\nimport { YAMLParseError } from '../errors.js';\nimport { stringifyString } from '../stringify/stringifyString.js';\n\nfunction resolveAsScalar(token, strict = true, onError) {\n    if (token) {\n        const _onError = (pos, code, message) => {\n            const offset = typeof pos === 'number' ? pos : Array.isArray(pos) ? pos[0] : pos.offset;\n            if (onError)\n                onError(offset, code, message);\n            else\n                throw new YAMLParseError([offset, offset + 1], code, message);\n        };\n        switch (token.type) {\n            case 'scalar':\n            case 'single-quoted-scalar':\n            case 'double-quoted-scalar':\n                return resolveFlowScalar(token, strict, _onError);\n            case 'block-scalar':\n                return resolveBlockScalar(token, strict, _onError);\n        }\n    }\n    return null;\n}\n/**\n * Create a new scalar token with `value`\n *\n * Values that represent an actual string but may be parsed as a different type should use a `type` other than `'PLAIN'`,\n * as this function does not support any schema operations and won't check for such conflicts.\n *\n * @param value The string representation of the value, which will have its content properly indented.\n * @param context.end Comments and whitespace after the end of the value, or after the block scalar header. If undefined, a newline will be added.\n * @param context.implicitKey Being within an implicit key may affect the resolved type of the token's value.\n * @param context.indent The indent level of the token.\n * @param context.inFlow Is this scalar within a flow collection? This may affect the resolved type of the token's value.\n * @param context.offset The offset position of the token.\n * @param context.type The preferred type of the scalar token. If undefined, the previous type of the `token` will be used, defaulting to `'PLAIN'`.\n */\nfunction createScalarToken(value, context) {\n    const { implicitKey = false, indent, inFlow = false, offset = -1, type = 'PLAIN' } = context;\n    const source = stringifyString({ type, value }, {\n        implicitKey,\n        indent: indent > 0 ? ' '.repeat(indent) : '',\n        inFlow,\n        options: { blockQuote: true, lineWidth: -1 }\n    });\n    const end = context.end ?? [\n        { type: 'newline', offset: -1, indent, source: '\\n' }\n    ];\n    switch (source[0]) {\n        case '|':\n        case '>': {\n            const he = source.indexOf('\\n');\n            const head = source.substring(0, he);\n            const body = source.substring(he + 1) + '\\n';\n            const props = [\n                { type: 'block-scalar-header', offset, indent, source: head }\n            ];\n            if (!addEndtoBlockProps(props, end))\n                props.push({ type: 'newline', offset: -1, indent, source: '\\n' });\n            return { type: 'block-scalar', offset, indent, props, source: body };\n        }\n        case '\"':\n            return { type: 'double-quoted-scalar', offset, indent, source, end };\n        case \"'\":\n            return { type: 'single-quoted-scalar', offset, indent, source, end };\n        default:\n            return { type: 'scalar', offset, indent, source, end };\n    }\n}\n/**\n * Set the value of `token` to the given string `value`, overwriting any previous contents and type that it may have.\n *\n * Best efforts are made to retain any comments previously associated with the `token`,\n * though all contents within a collection's `items` will be overwritten.\n *\n * Values that represent an actual string but may be parsed as a different type should use a `type` other than `'PLAIN'`,\n * as this function does not support any schema operations and won't check for such conflicts.\n *\n * @param token Any token. If it does not include an `indent` value, the value will be stringified as if it were an implicit key.\n * @param value The string representation of the value, which will have its content properly indented.\n * @param context.afterKey In most cases, values after a key should have an additional level of indentation.\n * @param context.implicitKey Being within an implicit key may affect the resolved type of the token's value.\n * @param context.inFlow Being within a flow collection may affect the resolved type of the token's value.\n * @param context.type The preferred type of the scalar token. If undefined, the previous type of the `token` will be used, defaulting to `'PLAIN'`.\n */\nfunction setScalarValue(token, value, context = {}) {\n    let { afterKey = false, implicitKey = false, inFlow = false, type } = context;\n    let indent = 'indent' in token ? token.indent : null;\n    if (afterKey && typeof indent === 'number')\n        indent += 2;\n    if (!type)\n        switch (token.type) {\n            case 'single-quoted-scalar':\n                type = 'QUOTE_SINGLE';\n                break;\n            case 'double-quoted-scalar':\n                type = 'QUOTE_DOUBLE';\n                break;\n            case 'block-scalar': {\n                const header = token.props[0];\n                if (header.type !== 'block-scalar-header')\n                    throw new Error('Invalid block scalar header');\n                type = header.source[0] === '>' ? 'BLOCK_FOLDED' : 'BLOCK_LITERAL';\n                break;\n            }\n            default:\n                type = 'PLAIN';\n        }\n    const source = stringifyString({ type, value }, {\n        implicitKey: implicitKey || indent === null,\n        indent: indent !== null && indent > 0 ? ' '.repeat(indent) : '',\n        inFlow,\n        options: { blockQuote: true, lineWidth: -1 }\n    });\n    switch (source[0]) {\n        case '|':\n        case '>':\n            setBlockScalarValue(token, source);\n            break;\n        case '\"':\n            setFlowScalarValue(token, source, 'double-quoted-scalar');\n            break;\n        case \"'\":\n            setFlowScalarValue(token, source, 'single-quoted-scalar');\n            break;\n        default:\n            setFlowScalarValue(token, source, 'scalar');\n    }\n}\nfunction setBlockScalarValue(token, source) {\n    const he = source.indexOf('\\n');\n    const head = source.substring(0, he);\n    const body = source.substring(he + 1) + '\\n';\n    if (token.type === 'block-scalar') {\n        const header = token.props[0];\n        if (header.type !== 'block-scalar-header')\n            throw new Error('Invalid block scalar header');\n        header.source = head;\n        token.source = body;\n    }\n    else {\n        const { offset } = token;\n        const indent = 'indent' in token ? token.indent : -1;\n        const props = [\n            { type: 'block-scalar-header', offset, indent, source: head }\n        ];\n        if (!addEndtoBlockProps(props, 'end' in token ? token.end : undefined))\n            props.push({ type: 'newline', offset: -1, indent, source: '\\n' });\n        for (const key of Object.keys(token))\n            if (key !== 'type' && key !== 'offset')\n                delete token[key];\n        Object.assign(token, { type: 'block-scalar', indent, props, source: body });\n    }\n}\n/** @returns `true` if last token is a newline */\nfunction addEndtoBlockProps(props, end) {\n    if (end)\n        for (const st of end)\n            switch (st.type) {\n                case 'space':\n                case 'comment':\n                    props.push(st);\n                    break;\n                case 'newline':\n                    props.push(st);\n                    return true;\n            }\n    return false;\n}\nfunction setFlowScalarValue(token, source, type) {\n    switch (token.type) {\n        case 'scalar':\n        case 'double-quoted-scalar':\n        case 'single-quoted-scalar':\n            token.type = type;\n            token.source = source;\n            break;\n        case 'block-scalar': {\n            const end = token.props.slice(1);\n            let oa = source.length;\n            if (token.props[0].type === 'block-scalar-header')\n                oa -= token.props[0].source.length;\n            for (const tok of end)\n                tok.offset += oa;\n            delete token.props;\n            Object.assign(token, { type, source, end });\n            break;\n        }\n        case 'block-map':\n        case 'block-seq': {\n            const offset = token.offset + source.length;\n            const nl = { type: 'newline', offset, indent: token.indent, source: '\\n' };\n            delete token.items;\n            Object.assign(token, { type, source, end: [nl] });\n            break;\n        }\n        default: {\n            const indent = 'indent' in token ? token.indent : -1;\n            const end = 'end' in token && Array.isArray(token.end)\n                ? token.end.filter(st => st.type === 'space' ||\n                    st.type === 'comment' ||\n                    st.type === 'newline')\n                : [];\n            for (const key of Object.keys(token))\n                if (key !== 'type' && key !== 'offset')\n                    delete token[key];\n            Object.assign(token, { type, indent, source, end });\n        }\n    }\n}\n\nexport { createScalarToken, resolveAsScalar, setScalarValue };\n","/**\n * Stringify a CST document, token, or collection item\n *\n * Fair warning: This applies no validation whatsoever, and\n * simply concatenates the sources in their logical order.\n */\nconst stringify = (cst) => 'type' in cst ? stringifyToken(cst) : stringifyItem(cst);\nfunction stringifyToken(token) {\n    switch (token.type) {\n        case 'block-scalar': {\n            let res = '';\n            for (const tok of token.props)\n                res += stringifyToken(tok);\n            return res + token.source;\n        }\n        case 'block-map':\n        case 'block-seq': {\n            let res = '';\n            for (const item of token.items)\n                res += stringifyItem(item);\n            return res;\n        }\n        case 'flow-collection': {\n            let res = token.start.source;\n            for (const item of token.items)\n                res += stringifyItem(item);\n            for (const st of token.end)\n                res += st.source;\n            return res;\n        }\n        case 'document': {\n            let res = stringifyItem(token);\n            if (token.end)\n                for (const st of token.end)\n                    res += st.source;\n            return res;\n        }\n        default: {\n            let res = token.source;\n            if ('end' in token && token.end)\n                for (const st of token.end)\n                    res += st.source;\n            return res;\n        }\n    }\n}\nfunction stringifyItem({ start, key, sep, value }) {\n    let res = '';\n    for (const st of start)\n        res += st.source;\n    if (key)\n        res += stringifyToken(key);\n    if (sep)\n        for (const st of sep)\n            res += st.source;\n    if (value)\n        res += stringifyToken(value);\n    return res;\n}\n\nexport { stringify };\n","const BREAK = Symbol('break visit');\nconst SKIP = Symbol('skip children');\nconst REMOVE = Symbol('remove item');\n/**\n * Apply a visitor to a CST document or item.\n *\n * Walks through the tree (depth-first) starting from the root, calling a\n * `visitor` function with two arguments when entering each item:\n *   - `item`: The current item, which included the following members:\n *     - `start: SourceToken[]` – Source tokens before the key or value,\n *       possibly including its anchor or tag.\n *     - `key?: Token | null` – Set for pair values. May then be `null`, if\n *       the key before the `:` separator is empty.\n *     - `sep?: SourceToken[]` – Source tokens between the key and the value,\n *       which should include the `:` map value indicator if `value` is set.\n *     - `value?: Token` – The value of a sequence item, or of a map pair.\n *   - `path`: The steps from the root to the current node, as an array of\n *     `['key' | 'value', number]` tuples.\n *\n * The return value of the visitor may be used to control the traversal:\n *   - `undefined` (default): Do nothing and continue\n *   - `visit.SKIP`: Do not visit the children of this token, continue with\n *      next sibling\n *   - `visit.BREAK`: Terminate traversal completely\n *   - `visit.REMOVE`: Remove the current item, then continue with the next one\n *   - `number`: Set the index of the next step. This is useful especially if\n *     the index of the current token has changed.\n *   - `function`: Define the next visitor for this item. After the original\n *     visitor is called on item entry, next visitors are called after handling\n *     a non-empty `key` and when exiting the item.\n */\nfunction visit(cst, visitor) {\n    if ('type' in cst && cst.type === 'document')\n        cst = { start: cst.start, value: cst.value };\n    _visit(Object.freeze([]), cst, visitor);\n}\n// Without the `as symbol` casts, TS declares these in the `visit`\n// namespace using `var`, but then complains about that because\n// `unique symbol` must be `const`.\n/** Terminate visit traversal completely */\nvisit.BREAK = BREAK;\n/** Do not visit the children of the current item */\nvisit.SKIP = SKIP;\n/** Remove the current item */\nvisit.REMOVE = REMOVE;\n/** Find the item at `path` from `cst` as the root */\nvisit.itemAtPath = (cst, path) => {\n    let item = cst;\n    for (const [field, index] of path) {\n        const tok = item?.[field];\n        if (tok && 'items' in tok) {\n            item = tok.items[index];\n        }\n        else\n            return undefined;\n    }\n    return item;\n};\n/**\n * Get the immediate parent collection of the item at `path` from `cst` as the root.\n *\n * Throws an error if the collection is not found, which should never happen if the item itself exists.\n */\nvisit.parentCollection = (cst, path) => {\n    const parent = visit.itemAtPath(cst, path.slice(0, -1));\n    const field = path[path.length - 1][0];\n    const coll = parent?.[field];\n    if (coll && 'items' in coll)\n        return coll;\n    throw new Error('Parent collection not found');\n};\nfunction _visit(path, item, visitor) {\n    let ctrl = visitor(item, path);\n    if (typeof ctrl === 'symbol')\n        return ctrl;\n    for (const field of ['key', 'value']) {\n        const token = item[field];\n        if (token && 'items' in token) {\n            for (let i = 0; i < token.items.length; ++i) {\n                const ci = _visit(Object.freeze(path.concat([[field, i]])), token.items[i], visitor);\n                if (typeof ci === 'number')\n                    i = ci - 1;\n                else if (ci === BREAK)\n                    return BREAK;\n                else if (ci === REMOVE) {\n                    token.items.splice(i, 1);\n                    i -= 1;\n                }\n            }\n            if (typeof ctrl === 'function' && field === 'key')\n                ctrl = ctrl(item, path);\n        }\n    }\n    return typeof ctrl === 'function' ? ctrl(item, path) : ctrl;\n}\n\nexport { visit };\n","export { createScalarToken, resolveAsScalar, setScalarValue } from './cst-scalar.js';\nexport { stringify } from './cst-stringify.js';\nexport { visit } from './cst-visit.js';\n\n/** The byte order mark */\nconst BOM = '\\u{FEFF}';\n/** Start of doc-mode */\nconst DOCUMENT = '\\x02'; // C0: Start of Text\n/** Unexpected end of flow-mode */\nconst FLOW_END = '\\x18'; // C0: Cancel\n/** Next token is a scalar value */\nconst SCALAR = '\\x1f'; // C0: Unit Separator\n/** @returns `true` if `token` is a flow or block collection */\nconst isCollection = (token) => !!token && 'items' in token;\n/** @returns `true` if `token` is a flow or block scalar; not an alias */\nconst isScalar = (token) => !!token &&\n    (token.type === 'scalar' ||\n        token.type === 'single-quoted-scalar' ||\n        token.type === 'double-quoted-scalar' ||\n        token.type === 'block-scalar');\n/* istanbul ignore next */\n/** Get a printable representation of a lexer token */\nfunction prettyToken(token) {\n    switch (token) {\n        case BOM:\n            return '<BOM>';\n        case DOCUMENT:\n            return '<DOC>';\n        case FLOW_END:\n            return '<FLOW_END>';\n        case SCALAR:\n            return '<SCALAR>';\n        default:\n            return JSON.stringify(token);\n    }\n}\n/** Identify the type of a lexer token. May return `null` for unknown tokens. */\nfunction tokenType(source) {\n    switch (source) {\n        case BOM:\n            return 'byte-order-mark';\n        case DOCUMENT:\n            return 'doc-mode';\n        case FLOW_END:\n            return 'flow-error-end';\n        case SCALAR:\n            return 'scalar';\n        case '---':\n            return 'doc-start';\n        case '...':\n            return 'doc-end';\n        case '':\n        case '\\n':\n        case '\\r\\n':\n            return 'newline';\n        case '-':\n            return 'seq-item-ind';\n        case '?':\n            return 'explicit-key-ind';\n        case ':':\n            return 'map-value-ind';\n        case '{':\n            return 'flow-map-start';\n        case '}':\n            return 'flow-map-end';\n        case '[':\n            return 'flow-seq-start';\n        case ']':\n            return 'flow-seq-end';\n        case ',':\n            return 'comma';\n    }\n    switch (source[0]) {\n        case ' ':\n        case '\\t':\n            return 'space';\n        case '#':\n            return 'comment';\n        case '%':\n            return 'directive-line';\n        case '*':\n            return 'alias';\n        case '&':\n            return 'anchor';\n        case '!':\n            return 'tag';\n        case \"'\":\n            return 'single-quoted-scalar';\n        case '\"':\n            return 'double-quoted-scalar';\n        case '|':\n        case '>':\n            return 'block-scalar-header';\n    }\n    return null;\n}\n\nexport { BOM, DOCUMENT, FLOW_END, SCALAR, isCollection, isScalar, prettyToken, tokenType };\n","import { BOM, DOCUMENT, FLOW_END, SCALAR } from './cst.js';\n\n/*\nSTART -> stream\n\nstream\n  directive -> line-end -> stream\n  indent + line-end -> stream\n  [else] -> line-start\n\nline-end\n  comment -> line-end\n  newline -> .\n  input-end -> END\n\nline-start\n  doc-start -> doc\n  doc-end -> stream\n  [else] -> indent -> block-start\n\nblock-start\n  seq-item-start -> block-start\n  explicit-key-start -> block-start\n  map-value-start -> block-start\n  [else] -> doc\n\ndoc\n  line-end -> line-start\n  spaces -> doc\n  anchor -> doc\n  tag -> doc\n  flow-start -> flow -> doc\n  flow-end -> error -> doc\n  seq-item-start -> error -> doc\n  explicit-key-start -> error -> doc\n  map-value-start -> doc\n  alias -> doc\n  quote-start -> quoted-scalar -> doc\n  block-scalar-header -> line-end -> block-scalar(min) -> line-start\n  [else] -> plain-scalar(false, min) -> doc\n\nflow\n  line-end -> flow\n  spaces -> flow\n  anchor -> flow\n  tag -> flow\n  flow-start -> flow -> flow\n  flow-end -> .\n  seq-item-start -> error -> flow\n  explicit-key-start -> flow\n  map-value-start -> flow\n  alias -> flow\n  quote-start -> quoted-scalar -> flow\n  comma -> flow\n  [else] -> plain-scalar(true, 0) -> flow\n\nquoted-scalar\n  quote-end -> .\n  [else] -> quoted-scalar\n\nblock-scalar(min)\n  newline + peek(indent < min) -> .\n  [else] -> block-scalar(min)\n\nplain-scalar(is-flow, min)\n  scalar-end(is-flow) -> .\n  peek(newline + (indent < min)) -> .\n  [else] -> plain-scalar(min)\n*/\nfunction isEmpty(ch) {\n    switch (ch) {\n        case undefined:\n        case ' ':\n        case '\\n':\n        case '\\r':\n        case '\\t':\n            return true;\n        default:\n            return false;\n    }\n}\nconst hexDigits = '0123456789ABCDEFabcdef'.split('');\nconst tagChars = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-#;/?:@&=+$_.!~*'()\".split('');\nconst invalidFlowScalarChars = ',[]{}'.split('');\nconst invalidAnchorChars = ' ,[]{}\\n\\r\\t'.split('');\nconst isNotAnchorChar = (ch) => !ch || invalidAnchorChars.includes(ch);\n/**\n * Splits an input string into lexical tokens, i.e. smaller strings that are\n * easily identifiable by `tokens.tokenType()`.\n *\n * Lexing starts always in a \"stream\" context. Incomplete input may be buffered\n * until a complete token can be emitted.\n *\n * In addition to slices of the original input, the following control characters\n * may also be emitted:\n *\n * - `\\x02` (Start of Text): A document starts with the next token\n * - `\\x18` (Cancel): Unexpected end of flow-mode (indicates an error)\n * - `\\x1f` (Unit Separator): Next token is a scalar value\n * - `\\u{FEFF}` (Byte order mark): Emitted separately outside documents\n */\nclass Lexer {\n    constructor() {\n        /**\n         * Flag indicating whether the end of the current buffer marks the end of\n         * all input\n         */\n        this.atEnd = false;\n        /**\n         * Explicit indent set in block scalar header, as an offset from the current\n         * minimum indent, so e.g. set to 1 from a header `|2+`. Set to -1 if not\n         * explicitly set.\n         */\n        this.blockScalarIndent = -1;\n        /**\n         * Block scalars that include a + (keep) chomping indicator in their header\n         * include trailing empty lines, which are otherwise excluded from the\n         * scalar's contents.\n         */\n        this.blockScalarKeep = false;\n        /** Current input */\n        this.buffer = '';\n        /**\n         * Flag noting whether the map value indicator : can immediately follow this\n         * node within a flow context.\n         */\n        this.flowKey = false;\n        /** Count of surrounding flow collection levels. */\n        this.flowLevel = 0;\n        /**\n         * Minimum level of indentation required for next lines to be parsed as a\n         * part of the current scalar value.\n         */\n        this.indentNext = 0;\n        /** Indentation level of the current line. */\n        this.indentValue = 0;\n        /** Position of the next \\n character. */\n        this.lineEndPos = null;\n        /** Stores the state of the lexer if reaching the end of incpomplete input */\n        this.next = null;\n        /** A pointer to `buffer`; the current position of the lexer. */\n        this.pos = 0;\n    }\n    /**\n     * Generate YAML tokens from the `source` string. If `incomplete`,\n     * a part of the last line may be left as a buffer for the next call.\n     *\n     * @returns A generator of lexical tokens\n     */\n    *lex(source, incomplete = false) {\n        if (source) {\n            this.buffer = this.buffer ? this.buffer + source : source;\n            this.lineEndPos = null;\n        }\n        this.atEnd = !incomplete;\n        let next = this.next ?? 'stream';\n        while (next && (incomplete || this.hasChars(1)))\n            next = yield* this.parseNext(next);\n    }\n    atLineEnd() {\n        let i = this.pos;\n        let ch = this.buffer[i];\n        while (ch === ' ' || ch === '\\t')\n            ch = this.buffer[++i];\n        if (!ch || ch === '#' || ch === '\\n')\n            return true;\n        if (ch === '\\r')\n            return this.buffer[i + 1] === '\\n';\n        return false;\n    }\n    charAt(n) {\n        return this.buffer[this.pos + n];\n    }\n    continueScalar(offset) {\n        let ch = this.buffer[offset];\n        if (this.indentNext > 0) {\n            let indent = 0;\n            while (ch === ' ')\n                ch = this.buffer[++indent + offset];\n            if (ch === '\\r') {\n                const next = this.buffer[indent + offset + 1];\n                if (next === '\\n' || (!next && !this.atEnd))\n                    return offset + indent + 1;\n            }\n            return ch === '\\n' || indent >= this.indentNext || (!ch && !this.atEnd)\n                ? offset + indent\n                : -1;\n        }\n        if (ch === '-' || ch === '.') {\n            const dt = this.buffer.substr(offset, 3);\n            if ((dt === '---' || dt === '...') && isEmpty(this.buffer[offset + 3]))\n                return -1;\n        }\n        return offset;\n    }\n    getLine() {\n        let end = this.lineEndPos;\n        if (typeof end !== 'number' || (end !== -1 && end < this.pos)) {\n            end = this.buffer.indexOf('\\n', this.pos);\n            this.lineEndPos = end;\n        }\n        if (end === -1)\n            return this.atEnd ? this.buffer.substring(this.pos) : null;\n        if (this.buffer[end - 1] === '\\r')\n            end -= 1;\n        return this.buffer.substring(this.pos, end);\n    }\n    hasChars(n) {\n        return this.pos + n <= this.buffer.length;\n    }\n    setNext(state) {\n        this.buffer = this.buffer.substring(this.pos);\n        this.pos = 0;\n        this.lineEndPos = null;\n        this.next = state;\n        return null;\n    }\n    peek(n) {\n        return this.buffer.substr(this.pos, n);\n    }\n    *parseNext(next) {\n        switch (next) {\n            case 'stream':\n                return yield* this.parseStream();\n            case 'line-start':\n                return yield* this.parseLineStart();\n            case 'block-start':\n                return yield* this.parseBlockStart();\n            case 'doc':\n                return yield* this.parseDocument();\n            case 'flow':\n                return yield* this.parseFlowCollection();\n            case 'quoted-scalar':\n                return yield* this.parseQuotedScalar();\n            case 'block-scalar':\n                return yield* this.parseBlockScalar();\n            case 'plain-scalar':\n                return yield* this.parsePlainScalar();\n        }\n    }\n    *parseStream() {\n        let line = this.getLine();\n        if (line === null)\n            return this.setNext('stream');\n        if (line[0] === BOM) {\n            yield* this.pushCount(1);\n            line = line.substring(1);\n        }\n        if (line[0] === '%') {\n            let dirEnd = line.length;\n            const cs = line.indexOf('#');\n            if (cs !== -1) {\n                const ch = line[cs - 1];\n                if (ch === ' ' || ch === '\\t')\n                    dirEnd = cs - 1;\n            }\n            while (true) {\n                const ch = line[dirEnd - 1];\n                if (ch === ' ' || ch === '\\t')\n                    dirEnd -= 1;\n                else\n                    break;\n            }\n            const n = (yield* this.pushCount(dirEnd)) + (yield* this.pushSpaces(true));\n            yield* this.pushCount(line.length - n); // possible comment\n            this.pushNewline();\n            return 'stream';\n        }\n        if (this.atLineEnd()) {\n            const sp = yield* this.pushSpaces(true);\n            yield* this.pushCount(line.length - sp);\n            yield* this.pushNewline();\n            return 'stream';\n        }\n        yield DOCUMENT;\n        return yield* this.parseLineStart();\n    }\n    *parseLineStart() {\n        const ch = this.charAt(0);\n        if (!ch && !this.atEnd)\n            return this.setNext('line-start');\n        if (ch === '-' || ch === '.') {\n            if (!this.atEnd && !this.hasChars(4))\n                return this.setNext('line-start');\n            const s = this.peek(3);\n            if (s === '---' && isEmpty(this.charAt(3))) {\n                yield* this.pushCount(3);\n                this.indentValue = 0;\n                this.indentNext = 0;\n                return 'doc';\n            }\n            else if (s === '...' && isEmpty(this.charAt(3))) {\n                yield* this.pushCount(3);\n                return 'stream';\n            }\n        }\n        this.indentValue = yield* this.pushSpaces(false);\n        if (this.indentNext > this.indentValue && !isEmpty(this.charAt(1)))\n            this.indentNext = this.indentValue;\n        return yield* this.parseBlockStart();\n    }\n    *parseBlockStart() {\n        const [ch0, ch1] = this.peek(2);\n        if (!ch1 && !this.atEnd)\n            return this.setNext('block-start');\n        if ((ch0 === '-' || ch0 === '?' || ch0 === ':') && isEmpty(ch1)) {\n            const n = (yield* this.pushCount(1)) + (yield* this.pushSpaces(true));\n            this.indentNext = this.indentValue + 1;\n            this.indentValue += n;\n            return yield* this.parseBlockStart();\n        }\n        return 'doc';\n    }\n    *parseDocument() {\n        yield* this.pushSpaces(true);\n        const line = this.getLine();\n        if (line === null)\n            return this.setNext('doc');\n        let n = yield* this.pushIndicators();\n        switch (line[n]) {\n            case '#':\n                yield* this.pushCount(line.length - n);\n            // fallthrough\n            case undefined:\n                yield* this.pushNewline();\n                return yield* this.parseLineStart();\n            case '{':\n            case '[':\n                yield* this.pushCount(1);\n                this.flowKey = false;\n                this.flowLevel = 1;\n                return 'flow';\n            case '}':\n            case ']':\n                // this is an error\n                yield* this.pushCount(1);\n                return 'doc';\n            case '*':\n                yield* this.pushUntil(isNotAnchorChar);\n                return 'doc';\n            case '\"':\n            case \"'\":\n                return yield* this.parseQuotedScalar();\n            case '|':\n            case '>':\n                n += yield* this.parseBlockScalarHeader();\n                n += yield* this.pushSpaces(true);\n                yield* this.pushCount(line.length - n);\n                yield* this.pushNewline();\n                return yield* this.parseBlockScalar();\n            default:\n                return yield* this.parsePlainScalar();\n        }\n    }\n    *parseFlowCollection() {\n        let nl, sp;\n        let indent = -1;\n        do {\n            nl = yield* this.pushNewline();\n            if (nl > 0) {\n                sp = yield* this.pushSpaces(false);\n                this.indentValue = indent = sp;\n            }\n            else {\n                sp = 0;\n            }\n            sp += yield* this.pushSpaces(true);\n        } while (nl + sp > 0);\n        const line = this.getLine();\n        if (line === null)\n            return this.setNext('flow');\n        if ((indent !== -1 && indent < this.indentNext && line[0] !== '#') ||\n            (indent === 0 &&\n                (line.startsWith('---') || line.startsWith('...')) &&\n                isEmpty(line[3]))) {\n            // Allowing for the terminal ] or } at the same (rather than greater)\n            // indent level as the initial [ or { is technically invalid, but\n            // failing here would be surprising to users.\n            const atFlowEndMarker = indent === this.indentNext - 1 &&\n                this.flowLevel === 1 &&\n                (line[0] === ']' || line[0] === '}');\n            if (!atFlowEndMarker) {\n                // this is an error\n                this.flowLevel = 0;\n                yield FLOW_END;\n                return yield* this.parseLineStart();\n            }\n        }\n        let n = 0;\n        while (line[n] === ',') {\n            n += yield* this.pushCount(1);\n            n += yield* this.pushSpaces(true);\n            this.flowKey = false;\n        }\n        n += yield* this.pushIndicators();\n        switch (line[n]) {\n            case undefined:\n                return 'flow';\n            case '#':\n                yield* this.pushCount(line.length - n);\n                return 'flow';\n            case '{':\n            case '[':\n                yield* this.pushCount(1);\n                this.flowKey = false;\n                this.flowLevel += 1;\n                return 'flow';\n            case '}':\n            case ']':\n                yield* this.pushCount(1);\n                this.flowKey = true;\n                this.flowLevel -= 1;\n                return this.flowLevel ? 'flow' : 'doc';\n            case '*':\n                yield* this.pushUntil(isNotAnchorChar);\n                return 'flow';\n            case '\"':\n            case \"'\":\n                this.flowKey = true;\n                return yield* this.parseQuotedScalar();\n            case ':': {\n                const next = this.charAt(1);\n                if (this.flowKey || isEmpty(next) || next === ',') {\n                    this.flowKey = false;\n                    yield* this.pushCount(1);\n                    yield* this.pushSpaces(true);\n                    return 'flow';\n                }\n            }\n            // fallthrough\n            default:\n                this.flowKey = false;\n                return yield* this.parsePlainScalar();\n        }\n    }\n    *parseQuotedScalar() {\n        const quote = this.charAt(0);\n        let end = this.buffer.indexOf(quote, this.pos + 1);\n        if (quote === \"'\") {\n            while (end !== -1 && this.buffer[end + 1] === \"'\")\n                end = this.buffer.indexOf(\"'\", end + 2);\n        }\n        else {\n            // double-quote\n            while (end !== -1) {\n                let n = 0;\n                while (this.buffer[end - 1 - n] === '\\\\')\n                    n += 1;\n                if (n % 2 === 0)\n                    break;\n                end = this.buffer.indexOf('\"', end + 1);\n            }\n        }\n        // Only looking for newlines within the quotes\n        const qb = this.buffer.substring(0, end);\n        let nl = qb.indexOf('\\n', this.pos);\n        if (nl !== -1) {\n            while (nl !== -1) {\n                const cs = this.continueScalar(nl + 1);\n                if (cs === -1)\n                    break;\n                nl = qb.indexOf('\\n', cs);\n            }\n            if (nl !== -1) {\n                // this is an error caused by an unexpected unindent\n                end = nl - (qb[nl - 1] === '\\r' ? 2 : 1);\n            }\n        }\n        if (end === -1) {\n            if (!this.atEnd)\n                return this.setNext('quoted-scalar');\n            end = this.buffer.length;\n        }\n        yield* this.pushToIndex(end + 1, false);\n        return this.flowLevel ? 'flow' : 'doc';\n    }\n    *parseBlockScalarHeader() {\n        this.blockScalarIndent = -1;\n        this.blockScalarKeep = false;\n        let i = this.pos;\n        while (true) {\n            const ch = this.buffer[++i];\n            if (ch === '+')\n                this.blockScalarKeep = true;\n            else if (ch > '0' && ch <= '9')\n                this.blockScalarIndent = Number(ch) - 1;\n            else if (ch !== '-')\n                break;\n        }\n        return yield* this.pushUntil(ch => isEmpty(ch) || ch === '#');\n    }\n    *parseBlockScalar() {\n        let nl = this.pos - 1; // may be -1 if this.pos === 0\n        let indent = 0;\n        let ch;\n        loop: for (let i = this.pos; (ch = this.buffer[i]); ++i) {\n            switch (ch) {\n                case ' ':\n                    indent += 1;\n                    break;\n                case '\\n':\n                    nl = i;\n                    indent = 0;\n                    break;\n                case '\\r': {\n                    const next = this.buffer[i + 1];\n                    if (!next && !this.atEnd)\n                        return this.setNext('block-scalar');\n                    if (next === '\\n')\n                        break;\n                } // fallthrough\n                default:\n                    break loop;\n            }\n        }\n        if (!ch && !this.atEnd)\n            return this.setNext('block-scalar');\n        if (indent >= this.indentNext) {\n            if (this.blockScalarIndent === -1)\n                this.indentNext = indent;\n            else\n                this.indentNext += this.blockScalarIndent;\n            do {\n                const cs = this.continueScalar(nl + 1);\n                if (cs === -1)\n                    break;\n                nl = this.buffer.indexOf('\\n', cs);\n            } while (nl !== -1);\n            if (nl === -1) {\n                if (!this.atEnd)\n                    return this.setNext('block-scalar');\n                nl = this.buffer.length;\n            }\n        }\n        if (!this.blockScalarKeep) {\n            do {\n                let i = nl - 1;\n                let ch = this.buffer[i];\n                if (ch === '\\r')\n                    ch = this.buffer[--i];\n                const lastChar = i; // Drop the line if last char not more indented\n                while (ch === ' ' || ch === '\\t')\n                    ch = this.buffer[--i];\n                if (ch === '\\n' && i >= this.pos && i + 1 + indent > lastChar)\n                    nl = i;\n                else\n                    break;\n            } while (true);\n        }\n        yield SCALAR;\n        yield* this.pushToIndex(nl + 1, true);\n        return yield* this.parseLineStart();\n    }\n    *parsePlainScalar() {\n        const inFlow = this.flowLevel > 0;\n        let end = this.pos - 1;\n        let i = this.pos - 1;\n        let ch;\n        while ((ch = this.buffer[++i])) {\n            if (ch === ':') {\n                const next = this.buffer[i + 1];\n                if (isEmpty(next) || (inFlow && next === ','))\n                    break;\n                end = i;\n            }\n            else if (isEmpty(ch)) {\n                let next = this.buffer[i + 1];\n                if (ch === '\\r') {\n                    if (next === '\\n') {\n                        i += 1;\n                        ch = '\\n';\n                        next = this.buffer[i + 1];\n                    }\n                    else\n                        end = i;\n                }\n                if (next === '#' || (inFlow && invalidFlowScalarChars.includes(next)))\n                    break;\n                if (ch === '\\n') {\n                    const cs = this.continueScalar(i + 1);\n                    if (cs === -1)\n                        break;\n                    i = Math.max(i, cs - 2); // to advance, but still account for ' #'\n                }\n            }\n            else {\n                if (inFlow && invalidFlowScalarChars.includes(ch))\n                    break;\n                end = i;\n            }\n        }\n        if (!ch && !this.atEnd)\n            return this.setNext('plain-scalar');\n        yield SCALAR;\n        yield* this.pushToIndex(end + 1, true);\n        return inFlow ? 'flow' : 'doc';\n    }\n    *pushCount(n) {\n        if (n > 0) {\n            yield this.buffer.substr(this.pos, n);\n            this.pos += n;\n            return n;\n        }\n        return 0;\n    }\n    *pushToIndex(i, allowEmpty) {\n        const s = this.buffer.slice(this.pos, i);\n        if (s) {\n            yield s;\n            this.pos += s.length;\n            return s.length;\n        }\n        else if (allowEmpty)\n            yield '';\n        return 0;\n    }\n    *pushIndicators() {\n        switch (this.charAt(0)) {\n            case '!':\n                return ((yield* this.pushTag()) +\n                    (yield* this.pushSpaces(true)) +\n                    (yield* this.pushIndicators()));\n            case '&':\n                return ((yield* this.pushUntil(isNotAnchorChar)) +\n                    (yield* this.pushSpaces(true)) +\n                    (yield* this.pushIndicators()));\n            case '-': // this is an error\n            case '?': // this is an error outside flow collections\n            case ':': {\n                const inFlow = this.flowLevel > 0;\n                const ch1 = this.charAt(1);\n                if (isEmpty(ch1) || (inFlow && invalidFlowScalarChars.includes(ch1))) {\n                    if (!inFlow)\n                        this.indentNext = this.indentValue + 1;\n                    else if (this.flowKey)\n                        this.flowKey = false;\n                    return ((yield* this.pushCount(1)) +\n                        (yield* this.pushSpaces(true)) +\n                        (yield* this.pushIndicators()));\n                }\n            }\n        }\n        return 0;\n    }\n    *pushTag() {\n        if (this.charAt(1) === '<') {\n            let i = this.pos + 2;\n            let ch = this.buffer[i];\n            while (!isEmpty(ch) && ch !== '>')\n                ch = this.buffer[++i];\n            return yield* this.pushToIndex(ch === '>' ? i + 1 : i, false);\n        }\n        else {\n            let i = this.pos + 1;\n            let ch = this.buffer[i];\n            while (ch) {\n                if (tagChars.includes(ch))\n                    ch = this.buffer[++i];\n                else if (ch === '%' &&\n                    hexDigits.includes(this.buffer[i + 1]) &&\n                    hexDigits.includes(this.buffer[i + 2])) {\n                    ch = this.buffer[(i += 3)];\n                }\n                else\n                    break;\n            }\n            return yield* this.pushToIndex(i, false);\n        }\n    }\n    *pushNewline() {\n        const ch = this.buffer[this.pos];\n        if (ch === '\\n')\n            return yield* this.pushCount(1);\n        else if (ch === '\\r' && this.charAt(1) === '\\n')\n            return yield* this.pushCount(2);\n        else\n            return 0;\n    }\n    *pushSpaces(allowTabs) {\n        let i = this.pos - 1;\n        let ch;\n        do {\n            ch = this.buffer[++i];\n        } while (ch === ' ' || (allowTabs && ch === '\\t'));\n        const n = i - this.pos;\n        if (n > 0) {\n            yield this.buffer.substr(this.pos, n);\n            this.pos = i;\n        }\n        return n;\n    }\n    *pushUntil(test) {\n        let i = this.pos;\n        let ch = this.buffer[i];\n        while (!test(ch))\n            ch = this.buffer[++i];\n        return yield* this.pushToIndex(i, false);\n    }\n}\n\nexport { Lexer };\n","/**\n * Tracks newlines during parsing in order to provide an efficient API for\n * determining the one-indexed `{ line, col }` position for any offset\n * within the input.\n */\nclass LineCounter {\n    constructor() {\n        this.lineStarts = [];\n        /**\n         * Should be called in ascending order. Otherwise, call\n         * `lineCounter.lineStarts.sort()` before calling `linePos()`.\n         */\n        this.addNewLine = (offset) => this.lineStarts.push(offset);\n        /**\n         * Performs a binary search and returns the 1-indexed { line, col }\n         * position of `offset`. If `line === 0`, `addNewLine` has never been\n         * called or `offset` is before the first known newline.\n         */\n        this.linePos = (offset) => {\n            let low = 0;\n            let high = this.lineStarts.length;\n            while (low < high) {\n                const mid = (low + high) >> 1; // Math.floor((low + high) / 2)\n                if (this.lineStarts[mid] < offset)\n                    low = mid + 1;\n                else\n                    high = mid;\n            }\n            if (this.lineStarts[low] === offset)\n                return { line: low + 1, col: 1 };\n            if (low === 0)\n                return { line: 0, col: offset };\n            const start = this.lineStarts[low - 1];\n            return { line: low, col: offset - start + 1 };\n        };\n    }\n}\n\nexport { LineCounter };\n","import { tokenType } from './cst.js';\nimport { Lexer } from './lexer.js';\n\nfunction includesToken(list, type) {\n    for (let i = 0; i < list.length; ++i)\n        if (list[i].type === type)\n            return true;\n    return false;\n}\nfunction findNonEmptyIndex(list) {\n    for (let i = 0; i < list.length; ++i) {\n        switch (list[i].type) {\n            case 'space':\n            case 'comment':\n            case 'newline':\n                break;\n            default:\n                return i;\n        }\n    }\n    return -1;\n}\nfunction isFlowToken(token) {\n    switch (token?.type) {\n        case 'alias':\n        case 'scalar':\n        case 'single-quoted-scalar':\n        case 'double-quoted-scalar':\n        case 'flow-collection':\n            return true;\n        default:\n            return false;\n    }\n}\nfunction getPrevProps(parent) {\n    switch (parent.type) {\n        case 'document':\n            return parent.start;\n        case 'block-map': {\n            const it = parent.items[parent.items.length - 1];\n            return it.sep ?? it.start;\n        }\n        case 'block-seq':\n            return parent.items[parent.items.length - 1].start;\n        /* istanbul ignore next should not happen */\n        default:\n            return [];\n    }\n}\n/** Note: May modify input array */\nfunction getFirstKeyStartProps(prev) {\n    if (prev.length === 0)\n        return [];\n    let i = prev.length;\n    loop: while (--i >= 0) {\n        switch (prev[i].type) {\n            case 'doc-start':\n            case 'explicit-key-ind':\n            case 'map-value-ind':\n            case 'seq-item-ind':\n            case 'newline':\n                break loop;\n        }\n    }\n    while (prev[++i]?.type === 'space') {\n        /* loop */\n    }\n    return prev.splice(i, prev.length);\n}\nfunction fixFlowSeqItems(fc) {\n    if (fc.start.type === 'flow-seq-start') {\n        for (const it of fc.items) {\n            if (it.sep &&\n                !it.value &&\n                !includesToken(it.start, 'explicit-key-ind') &&\n                !includesToken(it.sep, 'map-value-ind')) {\n                if (it.key)\n                    it.value = it.key;\n                delete it.key;\n                if (isFlowToken(it.value)) {\n                    if (it.value.end)\n                        Array.prototype.push.apply(it.value.end, it.sep);\n                    else\n                        it.value.end = it.sep;\n                }\n                else\n                    Array.prototype.push.apply(it.start, it.sep);\n                delete it.sep;\n            }\n        }\n    }\n}\n/**\n * A YAML concrete syntax tree (CST) parser\n *\n * ```ts\n * const src: string = ...\n * for (const token of new Parser().parse(src)) {\n *   // token: Token\n * }\n * ```\n *\n * To use the parser with a user-provided lexer:\n *\n * ```ts\n * function* parse(source: string, lexer: Lexer) {\n *   const parser = new Parser()\n *   for (const lexeme of lexer.lex(source))\n *     yield* parser.next(lexeme)\n *   yield* parser.end()\n * }\n *\n * const src: string = ...\n * const lexer = new Lexer()\n * for (const token of parse(src, lexer)) {\n *   // token: Token\n * }\n * ```\n */\nclass Parser {\n    /**\n     * @param onNewLine - If defined, called separately with the start position of\n     *   each new line (in `parse()`, including the start of input).\n     */\n    constructor(onNewLine) {\n        /** If true, space and sequence indicators count as indentation */\n        this.atNewLine = true;\n        /** If true, next token is a scalar value */\n        this.atScalar = false;\n        /** Current indentation level */\n        this.indent = 0;\n        /** Current offset since the start of parsing */\n        this.offset = 0;\n        /** On the same line with a block map key */\n        this.onKeyLine = false;\n        /** Top indicates the node that's currently being built */\n        this.stack = [];\n        /** The source of the current token, set in parse() */\n        this.source = '';\n        /** The type of the current token, set in parse() */\n        this.type = '';\n        // Must be defined after `next()`\n        this.lexer = new Lexer();\n        this.onNewLine = onNewLine;\n    }\n    /**\n     * Parse `source` as a YAML stream.\n     * If `incomplete`, a part of the last line may be left as a buffer for the next call.\n     *\n     * Errors are not thrown, but yielded as `{ type: 'error', message }` tokens.\n     *\n     * @returns A generator of tokens representing each directive, document, and other structure.\n     */\n    *parse(source, incomplete = false) {\n        if (this.onNewLine && this.offset === 0)\n            this.onNewLine(0);\n        for (const lexeme of this.lexer.lex(source, incomplete))\n            yield* this.next(lexeme);\n        if (!incomplete)\n            yield* this.end();\n    }\n    /**\n     * Advance the parser by the `source` of one lexical token.\n     */\n    *next(source) {\n        this.source = source;\n        if (this.atScalar) {\n            this.atScalar = false;\n            yield* this.step();\n            this.offset += source.length;\n            return;\n        }\n        const type = tokenType(source);\n        if (!type) {\n            const message = `Not a YAML token: ${source}`;\n            yield* this.pop({ type: 'error', offset: this.offset, message, source });\n            this.offset += source.length;\n        }\n        else if (type === 'scalar') {\n            this.atNewLine = false;\n            this.atScalar = true;\n            this.type = 'scalar';\n        }\n        else {\n            this.type = type;\n            yield* this.step();\n            switch (type) {\n                case 'newline':\n                    this.atNewLine = true;\n                    this.indent = 0;\n                    if (this.onNewLine)\n                        this.onNewLine(this.offset + source.length);\n                    break;\n                case 'space':\n                    if (this.atNewLine && source[0] === ' ')\n                        this.indent += source.length;\n                    break;\n                case 'explicit-key-ind':\n                case 'map-value-ind':\n                case 'seq-item-ind':\n                    if (this.atNewLine)\n                        this.indent += source.length;\n                    break;\n                case 'doc-mode':\n                case 'flow-error-end':\n                    return;\n                default:\n                    this.atNewLine = false;\n            }\n            this.offset += source.length;\n        }\n    }\n    /** Call at end of input to push out any remaining constructions */\n    *end() {\n        while (this.stack.length > 0)\n            yield* this.pop();\n    }\n    get sourceToken() {\n        const st = {\n            type: this.type,\n            offset: this.offset,\n            indent: this.indent,\n            source: this.source\n        };\n        return st;\n    }\n    *step() {\n        const top = this.peek(1);\n        if (this.type === 'doc-end' && (!top || top.type !== 'doc-end')) {\n            while (this.stack.length > 0)\n                yield* this.pop();\n            this.stack.push({\n                type: 'doc-end',\n                offset: this.offset,\n                source: this.source\n            });\n            return;\n        }\n        if (!top)\n            return yield* this.stream();\n        switch (top.type) {\n            case 'document':\n                return yield* this.document(top);\n            case 'alias':\n            case 'scalar':\n            case 'single-quoted-scalar':\n            case 'double-quoted-scalar':\n                return yield* this.scalar(top);\n            case 'block-scalar':\n                return yield* this.blockScalar(top);\n            case 'block-map':\n                return yield* this.blockMap(top);\n            case 'block-seq':\n                return yield* this.blockSequence(top);\n            case 'flow-collection':\n                return yield* this.flowCollection(top);\n            case 'doc-end':\n                return yield* this.documentEnd(top);\n        }\n        /* istanbul ignore next should not happen */\n        yield* this.pop();\n    }\n    peek(n) {\n        return this.stack[this.stack.length - n];\n    }\n    *pop(error) {\n        const token = error ?? this.stack.pop();\n        /* istanbul ignore if should not happen */\n        if (!token) {\n            const message = 'Tried to pop an empty stack';\n            yield { type: 'error', offset: this.offset, source: '', message };\n        }\n        else if (this.stack.length === 0) {\n            yield token;\n        }\n        else {\n            const top = this.peek(1);\n            if (token.type === 'block-scalar') {\n                // Block scalars use their parent rather than header indent\n                token.indent = 'indent' in top ? top.indent : 0;\n            }\n            else if (token.type === 'flow-collection' && top.type === 'document') {\n                // Ignore all indent for top-level flow collections\n                token.indent = 0;\n            }\n            if (token.type === 'flow-collection')\n                fixFlowSeqItems(token);\n            switch (top.type) {\n                case 'document':\n                    top.value = token;\n                    break;\n                case 'block-scalar':\n                    top.props.push(token); // error\n                    break;\n                case 'block-map': {\n                    const it = top.items[top.items.length - 1];\n                    if (it.value) {\n                        top.items.push({ start: [], key: token, sep: [] });\n                        this.onKeyLine = true;\n                        return;\n                    }\n                    else if (it.sep) {\n                        it.value = token;\n                    }\n                    else {\n                        Object.assign(it, { key: token, sep: [] });\n                        this.onKeyLine = !includesToken(it.start, 'explicit-key-ind');\n                        return;\n                    }\n                    break;\n                }\n                case 'block-seq': {\n                    const it = top.items[top.items.length - 1];\n                    if (it.value)\n                        top.items.push({ start: [], value: token });\n                    else\n                        it.value = token;\n                    break;\n                }\n                case 'flow-collection': {\n                    const it = top.items[top.items.length - 1];\n                    if (!it || it.value)\n                        top.items.push({ start: [], key: token, sep: [] });\n                    else if (it.sep)\n                        it.value = token;\n                    else\n                        Object.assign(it, { key: token, sep: [] });\n                    return;\n                }\n                /* istanbul ignore next should not happen */\n                default:\n                    yield* this.pop();\n                    yield* this.pop(token);\n            }\n            if ((top.type === 'document' ||\n                top.type === 'block-map' ||\n                top.type === 'block-seq') &&\n                (token.type === 'block-map' || token.type === 'block-seq')) {\n                const last = token.items[token.items.length - 1];\n                if (last &&\n                    !last.sep &&\n                    !last.value &&\n                    last.start.length > 0 &&\n                    findNonEmptyIndex(last.start) === -1 &&\n                    (token.indent === 0 ||\n                        last.start.every(st => st.type !== 'comment' || st.indent < token.indent))) {\n                    if (top.type === 'document')\n                        top.end = last.start;\n                    else\n                        top.items.push({ start: last.start });\n                    token.items.splice(-1, 1);\n                }\n            }\n        }\n    }\n    *stream() {\n        switch (this.type) {\n            case 'directive-line':\n                yield { type: 'directive', offset: this.offset, source: this.source };\n                return;\n            case 'byte-order-mark':\n            case 'space':\n            case 'comment':\n            case 'newline':\n                yield this.sourceToken;\n                return;\n            case 'doc-mode':\n            case 'doc-start': {\n                const doc = {\n                    type: 'document',\n                    offset: this.offset,\n                    start: []\n                };\n                if (this.type === 'doc-start')\n                    doc.start.push(this.sourceToken);\n                this.stack.push(doc);\n                return;\n            }\n        }\n        yield {\n            type: 'error',\n            offset: this.offset,\n            message: `Unexpected ${this.type} token in YAML stream`,\n            source: this.source\n        };\n    }\n    *document(doc) {\n        if (doc.value)\n            return yield* this.lineEnd(doc);\n        switch (this.type) {\n            case 'doc-start': {\n                if (findNonEmptyIndex(doc.start) !== -1) {\n                    yield* this.pop();\n                    yield* this.step();\n                }\n                else\n                    doc.start.push(this.sourceToken);\n                return;\n            }\n            case 'anchor':\n            case 'tag':\n            case 'space':\n            case 'comment':\n            case 'newline':\n                doc.start.push(this.sourceToken);\n                return;\n        }\n        const bv = this.startBlockValue(doc);\n        if (bv)\n            this.stack.push(bv);\n        else {\n            yield {\n                type: 'error',\n                offset: this.offset,\n                message: `Unexpected ${this.type} token in YAML document`,\n                source: this.source\n            };\n        }\n    }\n    *scalar(scalar) {\n        if (this.type === 'map-value-ind') {\n            const prev = getPrevProps(this.peek(2));\n            const start = getFirstKeyStartProps(prev);\n            let sep;\n            if (scalar.end) {\n                sep = scalar.end;\n                sep.push(this.sourceToken);\n                delete scalar.end;\n            }\n            else\n                sep = [this.sourceToken];\n            const map = {\n                type: 'block-map',\n                offset: scalar.offset,\n                indent: scalar.indent,\n                items: [{ start, key: scalar, sep }]\n            };\n            this.onKeyLine = true;\n            this.stack[this.stack.length - 1] = map;\n        }\n        else\n            yield* this.lineEnd(scalar);\n    }\n    *blockScalar(scalar) {\n        switch (this.type) {\n            case 'space':\n            case 'comment':\n            case 'newline':\n                scalar.props.push(this.sourceToken);\n                return;\n            case 'scalar':\n                scalar.source = this.source;\n                // block-scalar source includes trailing newline\n                this.atNewLine = true;\n                this.indent = 0;\n                if (this.onNewLine) {\n                    let nl = this.source.indexOf('\\n') + 1;\n                    while (nl !== 0) {\n                        this.onNewLine(this.offset + nl);\n                        nl = this.source.indexOf('\\n', nl) + 1;\n                    }\n                }\n                yield* this.pop();\n                break;\n            /* istanbul ignore next should not happen */\n            default:\n                yield* this.pop();\n                yield* this.step();\n        }\n    }\n    *blockMap(map) {\n        const it = map.items[map.items.length - 1];\n        // it.sep is true-ish if pair already has key or : separator\n        switch (this.type) {\n            case 'newline':\n                this.onKeyLine = false;\n                if (it.value) {\n                    const end = 'end' in it.value ? it.value.end : undefined;\n                    const last = Array.isArray(end) ? end[end.length - 1] : undefined;\n                    if (last?.type === 'comment')\n                        end?.push(this.sourceToken);\n                    else\n                        map.items.push({ start: [this.sourceToken] });\n                }\n                else if (it.sep) {\n                    it.sep.push(this.sourceToken);\n                }\n                else {\n                    it.start.push(this.sourceToken);\n                }\n                return;\n            case 'space':\n            case 'comment':\n                if (it.value) {\n                    map.items.push({ start: [this.sourceToken] });\n                }\n                else if (it.sep) {\n                    it.sep.push(this.sourceToken);\n                }\n                else {\n                    if (this.atIndentedComment(it.start, map.indent)) {\n                        const prev = map.items[map.items.length - 2];\n                        const end = prev?.value?.end;\n                        if (Array.isArray(end)) {\n                            Array.prototype.push.apply(end, it.start);\n                            end.push(this.sourceToken);\n                            map.items.pop();\n                            return;\n                        }\n                    }\n                    it.start.push(this.sourceToken);\n                }\n                return;\n        }\n        if (this.indent >= map.indent) {\n            const atNextItem = !this.onKeyLine && this.indent === map.indent && it.sep;\n            // For empty nodes, assign newline-separated not indented empty tokens to following node\n            let start = [];\n            if (atNextItem && it.sep && !it.value) {\n                const nl = [];\n                for (let i = 0; i < it.sep.length; ++i) {\n                    const st = it.sep[i];\n                    switch (st.type) {\n                        case 'newline':\n                            nl.push(i);\n                            break;\n                        case 'space':\n                            break;\n                        case 'comment':\n                            if (st.indent > map.indent)\n                                nl.length = 0;\n                            break;\n                        default:\n                            nl.length = 0;\n                    }\n                }\n                if (nl.length >= 2)\n                    start = it.sep.splice(nl[1]);\n            }\n            switch (this.type) {\n                case 'anchor':\n                case 'tag':\n                    if (atNextItem || it.value) {\n                        start.push(this.sourceToken);\n                        map.items.push({ start });\n                        this.onKeyLine = true;\n                    }\n                    else if (it.sep) {\n                        it.sep.push(this.sourceToken);\n                    }\n                    else {\n                        it.start.push(this.sourceToken);\n                    }\n                    return;\n                case 'explicit-key-ind':\n                    if (!it.sep && !includesToken(it.start, 'explicit-key-ind')) {\n                        it.start.push(this.sourceToken);\n                    }\n                    else if (atNextItem || it.value) {\n                        start.push(this.sourceToken);\n                        map.items.push({ start });\n                    }\n                    else {\n                        this.stack.push({\n                            type: 'block-map',\n                            offset: this.offset,\n                            indent: this.indent,\n                            items: [{ start: [this.sourceToken] }]\n                        });\n                    }\n                    this.onKeyLine = true;\n                    return;\n                case 'map-value-ind':\n                    if (includesToken(it.start, 'explicit-key-ind')) {\n                        if (!it.sep) {\n                            if (includesToken(it.start, 'newline')) {\n                                Object.assign(it, { key: null, sep: [this.sourceToken] });\n                            }\n                            else {\n                                const start = getFirstKeyStartProps(it.start);\n                                this.stack.push({\n                                    type: 'block-map',\n                                    offset: this.offset,\n                                    indent: this.indent,\n                                    items: [{ start, key: null, sep: [this.sourceToken] }]\n                                });\n                            }\n                        }\n                        else if (it.value) {\n                            map.items.push({ start: [], key: null, sep: [this.sourceToken] });\n                        }\n                        else if (includesToken(it.sep, 'map-value-ind')) {\n                            this.stack.push({\n                                type: 'block-map',\n                                offset: this.offset,\n                                indent: this.indent,\n                                items: [{ start, key: null, sep: [this.sourceToken] }]\n                            });\n                        }\n                        else if (isFlowToken(it.key) &&\n                            !includesToken(it.sep, 'newline')) {\n                            const start = getFirstKeyStartProps(it.start);\n                            const key = it.key;\n                            const sep = it.sep;\n                            sep.push(this.sourceToken);\n                            // @ts-expect-error type guard is wrong here\n                            delete it.key, delete it.sep;\n                            this.stack.push({\n                                type: 'block-map',\n                                offset: this.offset,\n                                indent: this.indent,\n                                items: [{ start, key, sep }]\n                            });\n                        }\n                        else if (start.length > 0) {\n                            // Not actually at next item\n                            it.sep = it.sep.concat(start, this.sourceToken);\n                        }\n                        else {\n                            it.sep.push(this.sourceToken);\n                        }\n                    }\n                    else {\n                        if (!it.sep) {\n                            Object.assign(it, { key: null, sep: [this.sourceToken] });\n                        }\n                        else if (it.value || atNextItem) {\n                            map.items.push({ start, key: null, sep: [this.sourceToken] });\n                        }\n                        else if (includesToken(it.sep, 'map-value-ind')) {\n                            this.stack.push({\n                                type: 'block-map',\n                                offset: this.offset,\n                                indent: this.indent,\n                                items: [{ start: [], key: null, sep: [this.sourceToken] }]\n                            });\n                        }\n                        else {\n                            it.sep.push(this.sourceToken);\n                        }\n                    }\n                    this.onKeyLine = true;\n                    return;\n                case 'alias':\n                case 'scalar':\n                case 'single-quoted-scalar':\n                case 'double-quoted-scalar': {\n                    const fs = this.flowScalar(this.type);\n                    if (atNextItem || it.value) {\n                        map.items.push({ start, key: fs, sep: [] });\n                        this.onKeyLine = true;\n                    }\n                    else if (it.sep) {\n                        this.stack.push(fs);\n                    }\n                    else {\n                        Object.assign(it, { key: fs, sep: [] });\n                        this.onKeyLine = true;\n                    }\n                    return;\n                }\n                default: {\n                    const bv = this.startBlockValue(map);\n                    if (bv) {\n                        if (atNextItem &&\n                            bv.type !== 'block-seq' &&\n                            includesToken(it.start, 'explicit-key-ind')) {\n                            map.items.push({ start });\n                        }\n                        this.stack.push(bv);\n                        return;\n                    }\n                }\n            }\n        }\n        yield* this.pop();\n        yield* this.step();\n    }\n    *blockSequence(seq) {\n        const it = seq.items[seq.items.length - 1];\n        switch (this.type) {\n            case 'newline':\n                if (it.value) {\n                    const end = 'end' in it.value ? it.value.end : undefined;\n                    const last = Array.isArray(end) ? end[end.length - 1] : undefined;\n                    if (last?.type === 'comment')\n                        end?.push(this.sourceToken);\n                    else\n                        seq.items.push({ start: [this.sourceToken] });\n                }\n                else\n                    it.start.push(this.sourceToken);\n                return;\n            case 'space':\n            case 'comment':\n                if (it.value)\n                    seq.items.push({ start: [this.sourceToken] });\n                else {\n                    if (this.atIndentedComment(it.start, seq.indent)) {\n                        const prev = seq.items[seq.items.length - 2];\n                        const end = prev?.value?.end;\n                        if (Array.isArray(end)) {\n                            Array.prototype.push.apply(end, it.start);\n                            end.push(this.sourceToken);\n                            seq.items.pop();\n                            return;\n                        }\n                    }\n                    it.start.push(this.sourceToken);\n                }\n                return;\n            case 'anchor':\n            case 'tag':\n                if (it.value || this.indent <= seq.indent)\n                    break;\n                it.start.push(this.sourceToken);\n                return;\n            case 'seq-item-ind':\n                if (this.indent !== seq.indent)\n                    break;\n                if (it.value || includesToken(it.start, 'seq-item-ind'))\n                    seq.items.push({ start: [this.sourceToken] });\n                else\n                    it.start.push(this.sourceToken);\n                return;\n        }\n        if (this.indent > seq.indent) {\n            const bv = this.startBlockValue(seq);\n            if (bv) {\n                this.stack.push(bv);\n                return;\n            }\n        }\n        yield* this.pop();\n        yield* this.step();\n    }\n    *flowCollection(fc) {\n        const it = fc.items[fc.items.length - 1];\n        if (this.type === 'flow-error-end') {\n            let top;\n            do {\n                yield* this.pop();\n                top = this.peek(1);\n            } while (top && top.type === 'flow-collection');\n        }\n        else if (fc.end.length === 0) {\n            switch (this.type) {\n                case 'comma':\n                case 'explicit-key-ind':\n                    if (!it || it.sep)\n                        fc.items.push({ start: [this.sourceToken] });\n                    else\n                        it.start.push(this.sourceToken);\n                    return;\n                case 'map-value-ind':\n                    if (!it || it.value)\n                        fc.items.push({ start: [], key: null, sep: [this.sourceToken] });\n                    else if (it.sep)\n                        it.sep.push(this.sourceToken);\n                    else\n                        Object.assign(it, { key: null, sep: [this.sourceToken] });\n                    return;\n                case 'space':\n                case 'comment':\n                case 'newline':\n                case 'anchor':\n                case 'tag':\n                    if (!it || it.value)\n                        fc.items.push({ start: [this.sourceToken] });\n                    else if (it.sep)\n                        it.sep.push(this.sourceToken);\n                    else\n                        it.start.push(this.sourceToken);\n                    return;\n                case 'alias':\n                case 'scalar':\n                case 'single-quoted-scalar':\n                case 'double-quoted-scalar': {\n                    const fs = this.flowScalar(this.type);\n                    if (!it || it.value)\n                        fc.items.push({ start: [], key: fs, sep: [] });\n                    else if (it.sep)\n                        this.stack.push(fs);\n                    else\n                        Object.assign(it, { key: fs, sep: [] });\n                    return;\n                }\n                case 'flow-map-end':\n                case 'flow-seq-end':\n                    fc.end.push(this.sourceToken);\n                    return;\n            }\n            const bv = this.startBlockValue(fc);\n            /* istanbul ignore else should not happen */\n            if (bv)\n                this.stack.push(bv);\n            else {\n                yield* this.pop();\n                yield* this.step();\n            }\n        }\n        else {\n            const parent = this.peek(2);\n            if (parent.type === 'block-map' &&\n                ((this.type === 'map-value-ind' && parent.indent === fc.indent) ||\n                    (this.type === 'newline' &&\n                        !parent.items[parent.items.length - 1].sep))) {\n                yield* this.pop();\n                yield* this.step();\n            }\n            else if (this.type === 'map-value-ind' &&\n                parent.type !== 'flow-collection') {\n                const prev = getPrevProps(parent);\n                const start = getFirstKeyStartProps(prev);\n                fixFlowSeqItems(fc);\n                const sep = fc.end.splice(1, fc.end.length);\n                sep.push(this.sourceToken);\n                const map = {\n                    type: 'block-map',\n                    offset: fc.offset,\n                    indent: fc.indent,\n                    items: [{ start, key: fc, sep }]\n                };\n                this.onKeyLine = true;\n                this.stack[this.stack.length - 1] = map;\n            }\n            else {\n                yield* this.lineEnd(fc);\n            }\n        }\n    }\n    flowScalar(type) {\n        if (this.onNewLine) {\n            let nl = this.source.indexOf('\\n') + 1;\n            while (nl !== 0) {\n                this.onNewLine(this.offset + nl);\n                nl = this.source.indexOf('\\n', nl) + 1;\n            }\n        }\n        return {\n            type,\n            offset: this.offset,\n            indent: this.indent,\n            source: this.source\n        };\n    }\n    startBlockValue(parent) {\n        switch (this.type) {\n            case 'alias':\n            case 'scalar':\n            case 'single-quoted-scalar':\n            case 'double-quoted-scalar':\n                return this.flowScalar(this.type);\n            case 'block-scalar-header':\n                return {\n                    type: 'block-scalar',\n                    offset: this.offset,\n                    indent: this.indent,\n                    props: [this.sourceToken],\n                    source: ''\n                };\n            case 'flow-map-start':\n            case 'flow-seq-start':\n                return {\n                    type: 'flow-collection',\n                    offset: this.offset,\n                    indent: this.indent,\n                    start: this.sourceToken,\n                    items: [],\n                    end: []\n                };\n            case 'seq-item-ind':\n                return {\n                    type: 'block-seq',\n                    offset: this.offset,\n                    indent: this.indent,\n                    items: [{ start: [this.sourceToken] }]\n                };\n            case 'explicit-key-ind': {\n                this.onKeyLine = true;\n                const prev = getPrevProps(parent);\n                const start = getFirstKeyStartProps(prev);\n                start.push(this.sourceToken);\n                return {\n                    type: 'block-map',\n                    offset: this.offset,\n                    indent: this.indent,\n                    items: [{ start }]\n                };\n            }\n            case 'map-value-ind': {\n                this.onKeyLine = true;\n                const prev = getPrevProps(parent);\n                const start = getFirstKeyStartProps(prev);\n                return {\n                    type: 'block-map',\n                    offset: this.offset,\n                    indent: this.indent,\n                    items: [{ start, key: null, sep: [this.sourceToken] }]\n                };\n            }\n        }\n        return null;\n    }\n    atIndentedComment(start, indent) {\n        if (this.type !== 'comment')\n            return false;\n        if (this.indent <= indent)\n            return false;\n        return start.every(st => st.type === 'newline' || st.type === 'space');\n    }\n    *documentEnd(docEnd) {\n        if (this.type !== 'doc-mode') {\n            if (docEnd.end)\n                docEnd.end.push(this.sourceToken);\n            else\n                docEnd.end = [this.sourceToken];\n            if (this.type === 'newline')\n                yield* this.pop();\n        }\n    }\n    *lineEnd(token) {\n        switch (this.type) {\n            case 'comma':\n            case 'doc-start':\n            case 'doc-end':\n            case 'flow-seq-end':\n            case 'flow-map-end':\n            case 'map-value-ind':\n                yield* this.pop();\n                yield* this.step();\n                break;\n            case 'newline':\n                this.onKeyLine = false;\n            // fallthrough\n            case 'space':\n            case 'comment':\n            default:\n                // all other values are errors\n                if (token.end)\n                    token.end.push(this.sourceToken);\n                else\n                    token.end = [this.sourceToken];\n                if (this.type === 'newline')\n                    yield* this.pop();\n        }\n    }\n}\n\nexport { Parser };\n","import { Composer } from './compose/composer.js';\nimport { Document } from './doc/Document.js';\nimport { prettifyError, YAMLParseError } from './errors.js';\nimport { warn } from './log.js';\nimport { LineCounter } from './parse/line-counter.js';\nimport { Parser } from './parse/parser.js';\n\nfunction parseOptions(options) {\n    const prettyErrors = options.prettyErrors !== false;\n    const lineCounter = options.lineCounter || (prettyErrors && new LineCounter()) || null;\n    return { lineCounter, prettyErrors };\n}\n/**\n * Parse the input as a stream of YAML documents.\n *\n * Documents should be separated from each other by `...` or `---` marker lines.\n *\n * @returns If an empty `docs` array is returned, it will be of type\n *   EmptyStream and contain additional stream information. In\n *   TypeScript, you should use `'empty' in docs` as a type guard for it.\n */\nfunction parseAllDocuments(source, options = {}) {\n    const { lineCounter, prettyErrors } = parseOptions(options);\n    const parser = new Parser(lineCounter?.addNewLine);\n    const composer = new Composer(options);\n    const docs = Array.from(composer.compose(parser.parse(source)));\n    if (prettyErrors && lineCounter)\n        for (const doc of docs) {\n            doc.errors.forEach(prettifyError(source, lineCounter));\n            doc.warnings.forEach(prettifyError(source, lineCounter));\n        }\n    if (docs.length > 0)\n        return docs;\n    return Object.assign([], { empty: true }, composer.streamInfo());\n}\n/** Parse an input string into a single YAML.Document */\nfunction parseDocument(source, options = {}) {\n    const { lineCounter, prettyErrors } = parseOptions(options);\n    const parser = new Parser(lineCounter?.addNewLine);\n    const composer = new Composer(options);\n    // `doc` is always set by compose.end(true) at the very latest\n    let doc = null;\n    for (const _doc of composer.compose(parser.parse(source), true, source.length)) {\n        if (!doc)\n            doc = _doc;\n        else if (doc.options.logLevel !== 'silent') {\n            doc.errors.push(new YAMLParseError(_doc.range.slice(0, 2), 'MULTIPLE_DOCS', 'Source contains multiple documents; please use YAML.parseAllDocuments()'));\n            break;\n        }\n    }\n    if (prettyErrors && lineCounter) {\n        doc.errors.forEach(prettifyError(source, lineCounter));\n        doc.warnings.forEach(prettifyError(source, lineCounter));\n    }\n    return doc;\n}\nfunction parse(src, reviver, options) {\n    let _reviver = undefined;\n    if (typeof reviver === 'function') {\n        _reviver = reviver;\n    }\n    else if (options === undefined && reviver && typeof reviver === 'object') {\n        options = reviver;\n    }\n    const doc = parseDocument(src, options);\n    if (!doc)\n        return null;\n    doc.warnings.forEach(warning => warn(doc.options.logLevel, warning));\n    if (doc.errors.length > 0) {\n        if (doc.options.logLevel !== 'silent')\n            throw doc.errors[0];\n        else\n            doc.errors = [];\n    }\n    return doc.toJS(Object.assign({ reviver: _reviver }, options));\n}\nfunction stringify(value, replacer, options) {\n    let _replacer = null;\n    if (typeof replacer === 'function' || Array.isArray(replacer)) {\n        _replacer = replacer;\n    }\n    else if (options === undefined && replacer) {\n        options = replacer;\n    }\n    if (typeof options === 'string')\n        options = options.length;\n    if (typeof options === 'number') {\n        const indent = Math.round(options);\n        options = indent < 1 ? undefined : indent > 8 ? { indent: 8 } : { indent };\n    }\n    if (value === undefined) {\n        const { keepUndefined } = options ?? replacer ?? {};\n        if (!keepUndefined)\n            return undefined;\n    }\n    return new Document(value, _replacer, options).toString(options);\n}\n\nexport { parse, parseAllDocuments, parseDocument, stringify };\n"],"names":["ALIAS","Symbol","for","DOC","MAP","PAIR","SCALAR","SEQ","NODE_TYPE","isAlias","node","isDocument","isMap","isPair","isScalar","isSeq","isCollection","isNode","hasAnchor","anchor","BREAK","SKIP","REMOVE","visit","visitor","visitor_","initVisitor","visit_","contents","Object","freeze","key","path","ctrl","callVisitor","replaceNode","concat","i","items","length","ci","splice","ck","cv","value","async","visitAsync","visitAsync_","Collection","Node","Value","assign","Alias","Map","Scalar","Seq","Pair","parent","pt","Error","escapeChars","Directives","constructor","yaml","tags","this","docStart","docEnd","defaultYaml","defaultTags","clone","copy","atDocument","res","version","atNextDocument","explicit","add","line","onError","parts","trim","split","name","shift","handle","prefix","test","tagName","source","verbatim","slice","suffix","match","decodeURIComponent","error","String","tagString","tag","entries","startsWith","substring","replace","ch","toString","doc","lines","tagEntries","tagNames","_key","keys","some","tn","push","join","anchorIsValid","sa","JSON","stringify","anchorNames","root","anchors","Set","findNewAnchor","exclude","has","applyReviver","reviver","obj","val","Array","isArray","len","v0","v1","undefined","k","from","get","delete","set","call","toJS","arg","ctx","map","v","toJSON","data","aliasCount","count","onCreate","keep","Number","NodeBase","type","defineProperty","create","getPrototypeOf","getOwnPropertyDescriptors","range","mapAsMap","maxAliasCount","onAnchor","TypeError","mapKeyWarned","values","super","resolve","found","_arg","msg","ReferenceError","getAliasCount","_onComment","_onChompKeep","src","options","verifyAliasOrder","implicitKey","item","c","kc","vc","Math","max","isScalarValue","BLOCK_FOLDED","BLOCK_LITERAL","PLAIN","QUOTE_DOUBLE","QUOTE_SINGLE","defaultTagPrefix","createNode","schema","Boolean","BigInt","valueOf","aliasDuplicateObjects","onTagObj","sourceObjects","ref","tagObj","filter","t","find","format","identify","findTagObject","iterator","nodeClass","default","collectionFromPath","isInteger","a","keepUndefined","isEmptyPath","next","done","configurable","enumerable","writable","it","addIn","rest","deleteIn","getIn","keepScalar","hasAllNullValues","allowScalar","every","n","commentBefore","comment","hasIn","setIn","maxFlowStringSingleLineLength","stringifyComment","str","indentComment","indent","lineComment","endsWith","includes","FOLD_FLOW","FOLD_BLOCK","FOLD_QUOTED","foldFlowLines","text","mode","indentAtStart","lineWidth","minContentWidth","onFold","onOverflow","endStep","folds","escapedFolds","prev","end","overflow","escStart","escEnd","consumeMoreIndentedLines","j","fold","getFoldOptions","isBlock","containsDocumentMarker","doubleQuotedString","json","doubleQuotedAsJSON","minMultiLineLength","doubleQuotedMinMultiLineLength","start","code","substr","singleQuotedString","singleQuote","quotedString","qs","hasDouble","hasSingle","blockEndNewlines","RegExp","blockString","onComment","onChompKeep","blockQuote","commentString","forceBlockIndent","literal","indentLength","limit","strLen","lineLengthOverLimit","chomp","endStart","endNlPos","indexOf","startEnd","startWithSpace","startNlPos","header","stringifyString","inFlow","ss","_stringify","_type","actualString","indentStep","compat","plainString","defaultKeyType","defaultStringType","createStringifyContext","opt","directives","falseStr","flowCollectionPadding","indentSeq","nullStr","simpleKeys","trueStr","toStringOptions","collectionStyle","repeat","resolvedAliases","o","getTagObject","props","stringifyProps","warn","logLevel","warning","process","emitWarning","console","addPairToJSMap","merge","isMergeKey","mergeToJSMap","jsKey","stringKey","strCtx","inStringifyKey","strKey","jsonStr","stringifyKey","jsValue","srcMap","prototype","hasOwnProperty","createPair","_","allNullValues","keyComment","explicitKey","vsb","vcb","valueComment","keyCommentDone","chompKeep","spaceBefore","flow","valueCommentDone","valueStr","ws","vs0","nl0","hasNewline","hasPropsLine","sp0","stringifyPair","stringifyCollection","collection","stringifyFlowCollection","stringifyBlockCollection","blockItemPrefix","flowChars","itemIndent","itemCtx","addCommentBefore","ik","fcPadding","reqNewline","linesAtValue","iv","reduce","sum","ic","trimStart","findPair","YAMLMap","replacer","sortMapEntries","sort","pair","overwrite","_pair","sortEntries","findIndex","Type","YAMLSeq","idx","asItemIndex","seq","string","nullTag","boolTag","stringifyNumber","minFractionDigits","num","isFinite","isNaN","d","floatNaN","toLowerCase","NaN","NEGATIVE_INFINITY","POSITIVE_INFINITY","floatExp","parseFloat","toExponential","float","dot","intIdentify","intResolve","offset","radix","intAsBigInt","parseInt","intStringify","intOct","_onError","int","intHex","stringifyJSON","binary","Uint8Array","Buffer","atob","buffer","charCodeAt","buf","btoa","s","fromCharCode","ceil","resolvePairs","cn","createPairs","iterable","pairs","YAMLOMap","bind","omap","seenKeys","boolStringify","trueTag","falseTag","f","sign","intBin","YAMLSet","keepPair","parseSexagesimal","asBigInt","p","stringifySexagesimal","_60","unshift","padStart","intTime","floatTime","timestamp","Date","year","month","day","hour","minute","second","millisec","date","UTC","tz","abs","toISOString","schemas","schema$1","schema$2","tagsByName","bool","null","coreKnownTags","getTags","customTags","schemaName","sortMapEntriesByKey","b","Schema","resolveKnownTags","toStringDefaults","knownTags","Document","errors","warnings","_replacer","keepSourceTokens","prettyErrors","strict","uniqueKeys","_directives","setSchema","assertCollection","createAlias","keyToStr","asStr","anchorPrefix","setAnchors","aliasObjects","prevAnchors","createNodeAnchors","sv","jsonArg","hasDirectives","dir","cs","contentComment","body","dc","stringifyDocument","YAMLError","pos","message","YAMLParseError","YAMLWarning","prettifyError","lc","linePos","col","lineStr","lineStarts","min","pointer","resolveProps","tokens","indicator","startOnNewline","atNewline","hasSpace","commentSep","hasNewlineAfterProp","reqSpace","comma","token","cb","last","containsNewline","st","sep","flowIndentCheck","fc","mapIncludes","search","isEqual","startColMsg","resolveEnd","blockMsg","resolveCollection","CN","coll","composeNode","composeEmptyNode","bm","atRoot","commentEnd","collItem","keyProps","keyStart","keyNode","valueProps","valueNode","srcToken","resolveBlockMap","bs","resolveBlockSeq","fcName","prevItemComment","loop","expectedEnd","ce","ee","cePos","toUpperCase","resolveFlowCollection","Coll","resolveBlockScalar","scalar","ts","parseBlockScalarHeader","first","m","splitLines","chompStart","content","trimIndent","contentStart","prevMoreIndented","crlf","resolveFlowScalar","rel","badChar","foldLines","plainValue","singleQuotedValue","foldNewline","cc","escapeCodes","x","u","U","parseCharCode","raw","wsStart","doubleQuotedValue","valueEnd","re","exec","lastIndex","e","r","N","L","P","fromCodePoint","composeScalar","tagToken","matchWithTest","kt","findScalarTagByName","findScalarTagByTest","emptyScalarPosition","before","isSrcToken","alias","composeAlias","expType","composeCollection","getErrorPos","parsePrelude","prelude","atComment","afterEmptyLine","Composer","atDirectives","decorate","afterDoc","apply","streamInfo","compose","forceDoc","endOffset","opts","contentEnd","composeDoc","addEndtoBlockProps","setFlowScalarValue","oa","tok","nl","stringifyToken","stringifyItem","cst","_visit","field","itemAtPath","index","parentCollection","BOM","DOCUMENT","FLOW_END","tokenType","context","he","head","afterKey","setBlockScalarValue","isEmpty","hexDigits","tagChars","invalidFlowScalarChars","invalidAnchorChars","isNotAnchorChar","Lexer","atEnd","blockScalarIndent","blockScalarKeep","flowKey","flowLevel","indentNext","indentValue","lineEndPos","lex","incomplete","hasChars","parseNext","atLineEnd","charAt","continueScalar","dt","getLine","setNext","state","peek","parseStream","parseLineStart","parseBlockStart","parseDocument","parseFlowCollection","parseQuotedScalar","parseBlockScalar","parsePlainScalar","pushCount","dirEnd","pushSpaces","pushNewline","sp","ch0","ch1","pushIndicators","pushUntil","quote","qb","pushToIndex","lastChar","allowEmpty","pushTag","allowTabs","LineCounter","addNewLine","low","high","mid","includesToken","list","findNonEmptyIndex","isFlowToken","getPrevProps","getFirstKeyStartProps","fixFlowSeqItems","Parser","onNewLine","atNewLine","atScalar","onKeyLine","stack","lexer","parse","lexeme","step","pop","sourceToken","top","stream","document","blockScalar","blockMap","blockSequence","flowCollection","documentEnd","lineEnd","bv","startBlockValue","atIndentedComment","atNextItem","fs","flowScalar","parseOptions","lineCounter","parser","composer","_doc","forEach","_reviver","docs","empty","round"],"mappings":"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"}